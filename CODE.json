[
    {
        "id": 1,
        "slip_no": "",
        "language": "c",
        "question": "Banker's Algorithm",
        "code": "#include <stdio.h>\n\nint main(void) {\n    int r, p, i, j, done = 0;\n    printf(\"Enter number of resources: \");\n    scanf(\"%d\", &r);\n    int total[r], avail[r];\n    for(i = 0; i < r; i++) {\n        printf(\"Total instances for resource %c: \", 'A' + i);\n        scanf(\"%d\", &total[i]);\n        avail[i] = total[i];  // initialize available resources\n    }\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &p);\n    int alloc[p][r], max[p][r], need[p][r], finish[p], safe[p];\n    for(i = 0; i < p; i++)\n        finish[i] = 0;\n    \n    // Input allocation matrix and update available resources\n    for(i = 0; i < p; i++) {\n        printf(\"Enter allocation for P[%d]:\\n\", i);\n        for(j = 0; j < r; j++) {\n            scanf(\"%d\", &alloc[i][j]);\n            avail[j] -= alloc[i][j];\n        }\n    }\n    \n    // Input maximum demand and compute need matrix\n    for(i = 0; i < p; i++) {\n        printf(\"Enter max demand for P[%d]:\\n\", i);\n        for(j = 0; j < r; j++) {\n            scanf(\"%d\", &max[i][j]);\n            need[i][j] = max[i][j] - alloc[i][j];\n        }\n    }\n    \n    // Find safe sequence\n    while(done < p) {\n        int progress = 0;\n        for(i = 0; i < p; i++) {\n            if(!finish[i]) {\n                int canRun = 1;\n                for(j = 0; j < r; j++) {\n                    if(need[i][j] > avail[j]) {\n                        canRun = 0;\n                        break;\n                    }\n                }\n                if(canRun) {\n                    safe[done++] = i;\n                    finish[i] = 1;\n                    for(j = 0; j < r; j++)\n                        avail[j] += alloc[i][j];\n                    progress = 1;\n                }\n            }\n        }\n        if(!progress) break; // no process could be allocated resources\n    }\n    \n    // Output result\n    if(done == p) {\n        printf(\"Safe sequence: \");\n        for(i = 0; i < p; i++)\n            printf(\"P[%d] \", safe[i]);\n        printf(\"\\n\");\n    } else {\n        printf(\"System is not in a safe state.\\n\");\n    }\n    return 0;\n}\n"
    },
    {
        "id": 2,
        "slip_no": "",
        "language": "c",
        "question": "FCFS",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int RQ[100], n, i, TotalHeadMovement = 0, initial;\n\n    printf(\"Enter the number of requests: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the request sequence: \");\n    for(i = 0; i < n; i++)\n        scanf(\"%d\", &RQ[i]);\n\n    printf(\"Enter initial head position: \");\n    scanf(\"%d\", &initial);\n\n    for(i = 0; i < n; i++) {\n        TotalHeadMovement += abs(RQ[i] - initial);\n        initial = RQ[i];\n    }\n\n    printf(\"Total Head Movement: %d\\n\", TotalHeadMovement);\n    return 0;\n}"
    },
    {
        "id": 3,
        "slip_no": "",
        "language": "c",
        "question": "SSTF",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int RQ[100], n, i, TotalHeadMovement = 0, initial, count = 0;\n\n    printf(\"Enter the number of requests: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter the request sequence: \");\n    for(i = 0; i < n; i++)\n        scanf(\"%d\", &RQ[i]);\n\n    printf(\"Enter initial head position: \");\n    scanf(\"%d\", &initial);\n\n    while(count != n) {\n        int min = 1000, d, index;\n\n        for(i = 0; i < n; i++) {\n            d = abs(RQ[i] - initial);\n            if(min > d) {\n                min = d;\n                index = i;\n            }\n        }\n\n        TotalHeadMovement += min;\n        initial = RQ[index];\n        RQ[index] = 1000; // Mark as visited\n        count++;\n    }\n\n    printf(\"Total Head Movement: %d\\n\", TotalHeadMovement);\n    return 0;\n}"
    },
    {
        "id": 1742901094483,
        "slip_no": "slip 4 slip 7 slip 13 slip 18",
        "question": "scan",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid scan_disk_scheduling(int requests[], int n, int head, char direction, int disk_size) {\n    int left[n + 2], right[n + 2], l = 0, r = 0;\n    left[l++] = 0;  // Include start of the disk\n    right[r++] = disk_size - 1;  // Include end of the disk\n\n    // Divide requests into left and right arrays\n    for (int i = 0; i < n; i++) {\n        if (requests[i] < head)\n            left[l++] = requests[i];\n        else\n            right[r++] = requests[i];\n    }\n\n    // Sorting left and right arrays\n    for (int i = 0; i < l - 1; i++) {\n        for (int j = 0; j < l - i - 1; j++) {\n            if (left[j] > left[j + 1]) {\n                int temp = left[j];\n                left[j] = left[j + 1];\n                left[j + 1] = temp;\n            }\n        }\n    }\n    for (int i = 0; i < r - 1; i++) {\n        for (int j = 0; j < r - i - 1; j++) {\n            if (right[j] > right[j + 1]) {\n                int temp = right[j];\n                right[j] = right[j + 1];\n                right[j + 1] = temp;\n            }\n        }\n    }\n\n    int seek_sequence[n + 2], seek_count = 0, index = 0;\n    \n    if (direction == 'l') {\n        for (int i = l - 1; i >= 0; i--) {  // Move left first\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n        for (int i = 0; i < r; i++) {  // Then move right\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n    } else {\n        for (int i = 0; i < r; i++) {  // Move right first\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n        for (int i = l - 1; i >= 0; i--) {  // Then move left\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n    }\n\n    printf(\"\\nOrder of execution: \");\n    for (int i = 0; i < index; i++) {\n        printf(\"%d \", seek_sequence[i]);\n    }\n    printf(\"\\nTotal number of head movements: %d\\n\", seek_count);\n}\n\nint main() {\n    int disk_size, n, head;\n    char direction;\n\n    printf(\"Enter total number of disk blocks: \");\n    scanf(\"%d\", &disk_size);\n    printf(\"Enter number of disk requests: \");\n    scanf(\"%d\", &n);\n\n    int requests[n];\n    printf(\"Enter disk request string: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &requests[i]);\n    }\n    printf(\"Enter the current head position: \");\n    scanf(\"%d\", &head);\n    printf(\"Enter the direction (l for left / r for right): \");\n    scanf(\" %c\", &direction);\n\n    scan_disk_scheduling(requests, n, head, direction, disk_size);\n    return 0;\n}\n"
    },
    {
        "id": 1742901202217,
        "slip_no": "slip 6 slip 10 slip 15 slip 19",
        "question": " c scan",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid cscan_disk_scheduling(int requests[], int n, int head, char direction, int disk_size) {\n    int left[n + 2], right[n + 2], l = 0, r = 0;\n    right[r++] = disk_size - 1;  // Include end of the disk\n    left[l++] = 0;  // Include start of the disk\n\n    for (int i = 0; i < n; i++) {\n        if (requests[i] < head)\n            left[l++] = requests[i];\n        else\n            right[r++] = requests[i];\n    }\n\n    // Sorting left and right arrays\n    for (int i = 0; i < l - 1; i++) {\n        for (int j = 0; j < l - i - 1; j++) {\n            if (left[j] > left[j + 1]) {\n                int temp = left[j];\n                left[j] = left[j + 1];\n                left[j + 1] = temp;\n            }\n        }\n    }\n    for (int i = 0; i < r - 1; i++) {\n        for (int j = 0; j < r - i - 1; j++) {\n            if (right[j] > right[j + 1]) {\n                int temp = right[j];\n                right[j] = right[j + 1];\n                right[j + 1] = temp;\n            }\n        }\n    }\n\n    int seek_sequence[n + 2], seek_count = 0, index = 0;\n    \n    if (direction == 'l') {\n        for (int i = l - 1; i >= 0; i--) {  // Move left first\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n        head = right[0];  // Jump to end without counting movement\n        for (int i = r - 1; i >= 0; i--) {  // Move right from end\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n    } else {\n        for (int i = 0; i < r; i++) {  // Move right first\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n        head = left[0];  // Jump to start without counting movement\n        for (int i = 0; i < l; i++) {  // Move left from start\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n    }\n\n    printf(\"\\nOrder of execution: \");\n    for (int i = 0; i < index; i++) {\n        printf(\"%d \", seek_sequence[i]);\n    }\n    printf(\"\\nTotal number of head movements: %d\\n\", seek_count);\n}\n\nint main() {\n    int disk_size, n, head;\n    char direction;\n\n    printf(\"Enter total number of disk blocks: \");\n    scanf(\"%d\", &disk_size);\n    printf(\"Enter number of disk requests: \");\n    scanf(\"%d\", &n);\n\n    int requests[n];\n    printf(\"Enter disk request string: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &requests[i]);\n    }\n    printf(\"Enter the current head position: \");\n    scanf(\"%d\", &head);\n    printf(\"Enter the direction (l for left / r for right): \");\n    scanf(\" %c\", &direction);\n\n    cscan_disk_scheduling(requests, n, head, direction, disk_size);\n    return 0;\n}\n"
    },
    {
        "id": 1742901240233,
        "slip_no": "slip 9 slip 17 slip 25 slip 27",
        "question": "look",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid look_disk_scheduling(int requests[], int n, int head, char direction) {\n    int left[n+1], right[n+1], l = 0, r = 0;\n\n    // Divide requests into left and right of head\n    for (int i = 0; i < n; i++) {\n        if (requests[i] < head)\n            left[l++] = requests[i];\n        else\n            right[r++] = requests[i];\n    }\n\n    // Sort left and right requests using Bubble Sort\n    for (int i = 0; i < l - 1; i++) {\n        for (int j = 0; j < l - i - 1; j++) {\n            if (left[j] > left[j + 1]) {\n                int temp = left[j];\n                left[j] = left[j + 1];\n                left[j + 1] = temp;\n            }\n        }\n    }\n    for (int i = 0; i < r - 1; i++) {\n        for (int j = 0; j < r - i - 1; j++) {\n            if (right[j] > right[j + 1]) {\n                int temp = right[j];\n                right[j] = right[j + 1];\n                right[j + 1] = temp;\n            }\n        }\n    }\n\n    int seek_sequence[n], seek_count = 0, index = 0;\n\n    // Process requests based on direction\n    if (direction == 'l') {\n        // Move left first\n        for (int i = l - 1; i >= 0; i--) {\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n        // Then move right\n        for (int i = 0; i < r; i++) {\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n    } else { // direction == 'r'\n        // Move right first\n        for (int i = 0; i < r; i++) {\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n        // Then move left\n        for (int i = l - 1; i >= 0; i--) {\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n    }\n\n    // Output results\n    printf(\"\\nOrder of execution: \");\n    for (int i = 0; i < index; i++) {\n        printf(\"%d \", seek_sequence[i]);\n    }\n    printf(\"\\nTotal number of head movements: %d\\n\", seek_count);\n}\n\nint main() {\n    int n, head;\n    char direction;\n\n    printf(\"Enter number of disk requests: \");\n    scanf(\"%d\", &n);\n\n    int requests[n];\n    printf(\"Enter disk request string: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &requests[i]);\n    }\n    printf(\"Enter the current head position: \");\n    scanf(\"%d\", &head);\n    printf(\"Enter the direction (l for left / r for right): \");\n    scanf(\" %c\", &direction);\n\n    look_disk_scheduling(requests, n, head, direction);\n    return 0;\n}\n"
    },
    {
        "id": 1742901301013,
        "slip_no": "slip 12 slip 28 slip 29",
        "question": "c look",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid clook_disk_scheduling(int requests[], int n, int head, char direction) {\n    int left[n+1], right[n+1], l = 0, r = 0;\n\n    // Divide requests into left and right of head\n    for (int i = 0; i < n; i++) {\n        if (requests[i] < head)\n            left[l++] = requests[i];\n        else\n            right[r++] = requests[i];\n    }\n\n    // Sort left and right requests using Bubble Sort\n    for (int i = 0; i < l - 1; i++) {\n        for (int j = 0; j < l - i - 1; j++) {\n            if (left[j] > left[j + 1]) {\n                int temp = left[j];\n                left[j] = left[j + 1];\n                left[j + 1] = temp;\n            }\n        }\n    }\n    for (int i = 0; i < r - 1; i++) {\n        for (int j = 0; j < r - i - 1; j++) {\n            if (right[j] > right[j + 1]) {\n                int temp = right[j];\n                right[j] = right[j + 1];\n                right[j + 1] = temp;\n            }\n        }\n    }\n\n    int seek_sequence[n], seek_count = 0, index = 0;\n\n    // Process requests based on direction\n    \n    if (direction == 'l') {\n        // Move left first\n        for (int i = l - 1; i >= 0; i--) {\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n        // Jump directly to the highest request in right (no movement counted)\n        head = right[0];\n        for (int i = 0; i < r; i++) {\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n        \n    } else {  // direction == 'r'\n        // Move right first\n        for (int i = 0; i < r; i++) {\n            seek_sequence[index++] = right[i];\n            seek_count += abs(head - right[i]);\n            head = right[i];\n        }\n        // Jump directly to the lowest request in left (no movement counted)\n        head = left[0];\n        for (int i = 0; i < l; i++) {\n            seek_sequence[index++] = left[i];\n            seek_count += abs(head - left[i]);\n            head = left[i];\n        }\n    }\n\n    // Output results\n    printf(\"\\nOrder of execution: \");\n    for (int i = 0; i < index; i++) {\n        printf(\"%d \", seek_sequence[i]);\n    }\n    printf(\"\\nTotal number of head movements: %d\\n\", seek_count);\n}\n\nint main() {\n    int n, head;\n    char direction;\n\n    printf(\"Enter number of disk requests: \");\n    scanf(\"%d\", &n);\n\n    int requests[n];\n    printf(\"Enter disk request string: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &requests[i]);\n    }\n    printf(\"Enter the current head position: \");\n    scanf(\"%d\", &head);\n    printf(\"Enter the direction (l for left / r for right): \");\n    scanf(\" %c\", &direction);\n\n    clook_disk_scheduling(requests, n, head, direction);\n    return 0;\n}\n"
    },
    {
        "id": 1743040495050,
        "slip_no": "slip 3 slip 8 slip 13 slip 14 slip 16 slip 22 slip 24 slip 26",
        "question": "contiguous  file allocation method.",
        "language": "c",
        "code": "#include <stdio.h>\n\nint main() {\n    int size, start, len, i, option;\n\n    printf(\"Enter the initial block size: \");\n    scanf(\"%d\", &size);\n\n    int f[size];  // Bit Vector\n    for (i = 0; i < size; i++)\n        f[i] = 0;  // Initialize all blocks as free\n\n    printf(\"\\n----- Menu -----\\n\");\n    printf(\"1. Show Bit Vector\\n\");\n    printf(\"2. Create File\\n\");\n    printf(\"3. Exit\\n\");\n\n    do {\n        printf(\"\\n-------------------\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &option);\n\n        switch (option) {\n            case 1:\n                printf(\"\\nCurrent Bit Vector:\\n\");\n                for (i = 0; i < size; i++)  // Print from index 0\n                    printf(\"%d \", f[i]);\n                printf(\"\\n\");\n                break;\n\n            case 2:\n                printf(\"\\nEnter the start index and length: \");\n                scanf(\"%d %d\", &start, &len);\n\n                if (start < 0 || start + len > size) {\n                    printf(\"Error: Out of bounds allocation!\\n\");\n                    break;\n                }\n\n                int available = 1;\n                for (i = start; i < start + len; i++) {\n                    if (f[i] == 1) {\n                        available = 0;\n                        break;\n                    }\n                }\n\n                if (available) {\n                    for (i = start; i < start + len; i++) {\n                        f[i] = 1;\n                    }\n                    printf(\"File allocated successfully!\\n\");\n                } else {\n                    printf(\"Error: Contiguous blocks not available!\\n\");\n                }\n                break;\n\n            case 3:\n                printf(\"Exiting program.\\n\");\n                break;\n\n            default:\n                printf(\"Invalid choice! Please try again.\\n\");\n        }\n    } while (option != 3);\n\n    return 0;\n}\n"
    },
    {
        "id": 1743040618781,
        "slip_no": "slip 2 slip 6 slip 15 slip 25",
        "question": "linked file allocation method",
        "language": "c",
        "code": "#include <stdio.h>\n\nint main() {\n    int size, start, len, i, j, option;\n\n    printf(\"Enter the total number of disk blocks: \");\n    scanf(\"%d\", &size);\n\n    int f[size]; // Disk block status array\n    for (i = 0; i < size; i++)\n        f[i] = 0; // Initialize all blocks as free\n\n    printf(\"\\n----- Menu -----\\n\");\n    printf(\"1. Show Bit Vector\\n\");\n    printf(\"2. Create File (Linked Allocation)\\n\");\n    printf(\"3. Exit\\n\");\n\n    do {\n        printf(\"\\n-------------------\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &option);\n\n        switch (option) {\n            case 1: // Show Bit Vector\n                printf(\"\\nCurrent Disk Status: \");\n                for (i = 0; i < size; i++)\n                    printf(\"%d \", f[i]);\n                printf(\"\\n\");\n                break;\n\n            case 2: { // Create File (Linked Allocation)\n                printf(\"\\nEnter the start index and number of blocks: \");\n                scanf(\"%d %d\", &start, &len);\n\n                int allocated = 0, blocks[len];\n\n                // Find 'len' free blocks anywhere in disk\n                for (i = start; i < size && allocated < len; i++) {\n                    if (f[i] == 0) {\n                        blocks[allocated] = i;\n                        allocated++;\n                    }\n                }\n\n                if (allocated == len) {\n                    printf(\"File allocated successfully!\\nLinked Blocks: \");\n                    for (j = 0; j < len; j++) {\n                        f[blocks[j]] = 1;\n                        printf(\"%d--> \", blocks[j]);\n                    }\n                    printf(\"END\\n\");\n                } else {\n                    printf(\"Error: Not enough free blocks available!\\n\");\n                }\n                break;\n            }\n\n            case 3:\n                printf(\"Exiting Program.\\n\");\n                break;\n\n            default:\n                printf(\"Invalid option! Try again.\\n\");\n        }\n    } while (option != 3);\n\n    return 0;\n}\n"
    },
    {
        "id": 1743040679339,
        "slip_no": "slip 17 slip 18",
        "question": "Write a program to simulate Sequential (Contiguous) file allocation method. Assume disk with n number of blocks. Give value of n as input. Randomly mark some block as allocated and accordingly maintain the list of free blocks Write menu driver program with menu options as mentioned below and implement each option • Show Bit Vector • Create New File • Show Directory • Exit",
        "language": "c",
        "code": "#include <stdio.h>\n\nint main() {\n    int size, indexBlock, len, i, j, option;\n\n    printf(\"Enter the total number of disk blocks: \");\n    scanf(\"%d\", &size);\n\n    int f[size]; // Disk block status array\n    for (i = 0; i < size; i++)\n        f[i] = 0; // Initialize all blocks as free\n\n    printf(\"\\n----- Menu -----\\n\");\n    printf(\"1. Show Bit Vector\\n\");\n    printf(\"2. Create File (Indexed Allocation)\\n\");\n    printf(\"3. Exit\\n\");\n\n    do {\n        printf(\"\\n-------------------\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &option);\n\n        switch (option) {\n            case 1: // Show Bit Vector\n                printf(\"\\nCurrent Disk Status: \");\n                for (i = 0; i < size; i++)\n                    printf(\"%d \", f[i]);\n                printf(\"\\n\");\n                break;\n\n            case 2: { // Create File (Indexed Allocation)\n                printf(\"\\nEnter the index block number: \");\n                scanf(\"%d\", &indexBlock);\n\n                if (indexBlock < 0 || indexBlock >= size || f[indexBlock] == 1) {\n                    printf(\"Error: Invalid or already allocated index block!\\n\");\n                    break;\n                }\n\n                printf(\"Enter the number of blocks needed: \");\n                scanf(\"%d\", &len);\n\n                if (len <= 0 || len > size - 1) {\n                    printf(\"Error: Invalid block request!\\n\");\n                    break;\n                }\n\n                int allocated = 0, blocks[len];\n\n                // Find 'len' free blocks anywhere in disk\n                for (i = 0; i < size && allocated < len; i++) {\n                    if (f[i] == 0 && i != indexBlock) { // Ensure index block is not included\n                        blocks[allocated++] = i;\n                    }\n                }\n\n                if (allocated == len) {\n                    f[indexBlock] = 1; // Mark index block as allocated\n                    printf(\"File allocated successfully!\\nIndex Block: %d\\nAllocated Blocks: \", indexBlock);\n                    for (j = 0; j < len; j++) {\n                        f[blocks[j]] = 1; // Mark block as allocated\n                        printf(\"%d \", blocks[j]); // Print only the allocated block\n                    }\n                    printf(\"\\n\");\n                } else {\n                    printf(\"Error: Not enough free blocks available!\\n\");\n                }\n                break;\n            }\n\n            case 3:\n                printf(\"Exiting Program.\\n\");\n                break;\n\n            default:\n                printf(\"Invalid option! Try again.\\n\");\n        }\n    } while (option != 3);\n\n    return 0;\n}\n"
    },
    {
        "id": 11,
        "slip_no": "",
        "language": "c",
        "question": "MPI Program to Calculate Sum of Randomly Generated 1000 Numbers on a Cluster",
        "code": "#include <mpich/mpi.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define N 1000\n\nint main(int argc, char *argv[]) {\n    int a[N], a2[N];\n    int pid, np, elements_per_process, n_elements_received;\n    int sum = 0, partial_sum = 0;\n    MPI_Status status;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_rank(MPI_COMM_WORLD, &pid);\n    MPI_Comm_size(MPI_COMM_WORLD, &np);\n\n    // Master process\n    if (pid == 0) {\n        srand(time(0));\n        for (int i = 0; i < N; i++) {\n            a[i] = rand() % 100; // Random numbers between 0 and 99\n        }\n\n        elements_per_process = N / np;\n\n        // Sending chunks of array to other processes\n        for (int i = 1; i < np; i++) {\n            int index = i * elements_per_process;\n            int elements_left = (i == np - 1) ? (N - index) : elements_per_process;\n\n            MPI_Send(&elements_left, 1, MPI_INT, i, 0, MPI_COMM_WORLD);\n            MPI_Send(&a[index], elements_left, MPI_INT, i, 0, MPI_COMM_WORLD);\n        }\n\n        // Master process calculates its own part\n        for (int i = 0; i < elements_per_process; i++) {\n            sum += a[i];\n        }\n\n        // Collecting partial sums from other processes\n        for (int i = 1; i < np; i++) {\n            MPI_Recv(&partial_sum, 1, MPI_INT, i, 0, MPI_COMM_WORLD, &status);\n            sum += partial_sum;\n        }\n\n        printf(\"Total sum of array: %d\\n\", sum);\n    }\n    // Slave processes\n    else {\n        MPI_Recv(&n_elements_received, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);\n        MPI_Recv(&a2, n_elements_received, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);\n\n        partial_sum = 0;\n        for (int i = 0; i < n_elements_received; i++) {\n            partial_sum += a2[i];\n        }\n\n        MPI_Send(&partial_sum, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n    }\n\n    MPI_Finalize();\n    return 0;\n}"
    },
    {
        "id": 12,
        "slip_no": "",
        "language": "c",
        "question": "MPI Program to Find Min and Max Number from Randomly Generated 1000 Numbers on a Cluster (Using MPI_Reduce)",
        "code": "#include <stdlib.h>\n#include <stdio.h>\n#include <mpi.h>\n#define N 1000\n\nint main(int argc, char* argv[]) {\n    int my_id, num_procs;\n    int array[N];\n    int local_min, local_max;\n    int global_min, global_max;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_rank(MPI_COMM_WORLD, &my_id);\n    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n\n    // Seed for random number generation\n    srand(my_id + 1);\n\n    // Generate random numbers in array\n    for (int i = 0; i < N / num_procs; i++) {\n        array[i] = rand() % 1000; // Random numbers between 0 and 999\n    }\n\n    // Find local min and max in the portion assigned to this process\n    local_min = array[0];\n    local_max = array[0];\n    for (int i = 1; i < N / num_procs; i++) {\n        if (array[i] < local_min) local_min = array[i];\n        if (array[i] > local_max) local_max = array[i];\n    }\n\n    // Use MPI_Reduce to find global min and max\n    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);\n    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);\n\n    // Master process displays the results\n    if (my_id == 0) {\n        printf(\"Global Min: %d\\n\", global_min);\n        printf(\"Global Max: %d\\n\", global_max);\n    }\n\n    MPI_Finalize();\n    return 0;\n}"
    },
    {
        "id": 1742478307670,
        "slip_no": "slip 1",
        "question": "Write a PHP script to keep track of number of times the web page has been accessed (Use Session Tracking).",
        "language": "php",
        "code": "<?php\nsession_start();\n\nif (!isset($_SESSION['page_count'])) {\n    $_SESSION['page_count'] = 1;\n} else {\n    $_SESSION['page_count']++;\n}\n\necho \"<h2>You have visited this page \" . $_SESSION['page_count'] . \" times.</h2>\";\n?>\n"
    },
    {
        "id": 1742478968689,
        "slip_no": "slip 1",
        "question": "Create ‘Position_Salaries’ Data set. Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets. then divide the training and testing sets into a 7:3 ratio, respectively and print them. Build a simple linear regression model.",
        "language": "python",
        "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = {\n    'Position': ['Intern', 'Junior', 'Senior', 'Lead', 'Manager', 'Director', 'VP', 'SVP', 'C-Level', 'CEO'],\n    'Level': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Salary': [25000, 50000, 75000, 110000, 150000, 200000, 300000, 500000, 800000, 1000000]\n}\ndf = pd.DataFrame(data)\n\nX = df[['Level']]\ny = df['Salary']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(\"Training Set:\")\nprint(pd.concat([X_train, y_train], axis=1))\nprint(\"\\nTesting Set:\")\nprint(pd.concat([X_test, y_test], axis=1))\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\nplt.scatter(X, y, color='red', label='Actual Data')\nplt.plot(X, model.predict(X), color='blue', label='Linear Regression Line')\nplt.xlabel('Level')\nplt.ylabel('Salary')\nplt.title('Position Level vs Salary')\nplt.legend()\nplt.show()"
    },
    {
        "id": 1742479812395,
        "slip_no": "slip 2",
        "question": "Write a PHP script to change the preferences of your web page like font style, font size, font color, background color using cookie. Display selected setting on next web page and actual implementation (with new settings) on third page (Use Cookies).",
        "language": "php",
        "code": "// preferences.php\n\n<?php\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    setcookie(\"font_style\", $_POST['font_style'], time() + 3600, \"/\");\n    setcookie(\"font_size\", $_POST['font_size'], time() + 3600, \"/\");\n    setcookie(\"font_color\", $_POST['font_color'], time() + 3600, \"/\");\n    setcookie(\"bg_color\", $_POST['bg_color'], time() + 3600, \"/\");\n    header(\"Location: preview.php\");\n    exit;\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Set Preferences</title>\n</head>\n<body>\n    <h2>Choose Your Preferences</h2>\n    <form method=\"post\" action=\"\">\n        Font Style: \n        <select name=\"font_style\">\n            <option value=\"Arial\">Arial</option>\n            <option value=\"Verdana\">Verdana</option>\n            <option value=\"Times New Roman\">Times New Roman</option>\n        </select><br>\n        \n        Font Size: \n        <select name=\"font_size\">\n            <option value=\"14px\">14px</option>\n            <option value=\"16px\">16px</option>\n            <option value=\"18px\">18px</option>\n        </select><br>\n        \n        Font Color: \n        <input type=\"color\" name=\"font_color\"><br>\n        \n        Background Color: \n        <input type=\"color\" name=\"bg_color\"><br>\n        \n        <button type=\"submit\">Save Preferences</button>\n    </form>\n</body>\n</html>\n\n// preview.php\n\n<?php\nif (!isset($_COOKIE['font_style']) || !isset($_COOKIE['font_size']) || !isset($_COOKIE['font_color']) || !isset($_COOKIE['bg_color'])) {\n    echo \"<h2>No preferences set. Please go back and set them.</h2>\";\n} else {\n    echo \"<h2>Preview of Your Preferences:</h2>\";\n    echo \"<p>Font Style: \" . $_COOKIE['font_style'] . \"</p>\";\n    echo \"<p>Font Size: \" . $_COOKIE['font_size'] . \"</p>\";\n    echo \"<p>Font Color: \" . $_COOKIE['font_color'] . \"</p>\";\n    echo \"<p>Background Color: \" . $_COOKIE['bg_color'] . \"</p>\";\n    echo \"<a href='apply.php'>Apply Preferences</a>\";\n}\n?>\n\n\n// apply.php\n\n<?php\n$font_style = isset($_COOKIE['font_style']) ? $_COOKIE['font_style'] : 'Arial';\n$font_size = isset($_COOKIE['font_size']) ? $_COOKIE['font_size'] : '16px';\n$font_color = isset($_COOKIE['font_color']) ? $_COOKIE['font_color'] : '#000000';\n$bg_color = isset($_COOKIE['bg_color']) ? $_COOKIE['bg_color'] : '#ffffff';\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Applied Preferences</title>\n    <style>\n        body {\n            font-family: <?php echo $font_style; ?>;\n            font-size: <?php echo $font_size; ?>;\n            color: <?php echo $font_color; ?>;\n            background-color: <?php echo $bg_color; ?>;\n        }\n    </style>\n</head>\n<body>\n    <h2>Your Preferences Have Been Applied!</h2>\n    <p>This page reflects the selected font style, font size, font color, and background color.</p>\n</body>\n</html>\n\n"
    },
    {
        "id": 1742480111444,
        "slip_no": "slip 2",
        "question": "Create ‘Salary’ Data set . Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.",
        "language": "python",
        "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = {\n    'YearsExperience': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Salary': [30000, 35000, 40000, 50000, 60000, 75000, 90000, 110000, 130000, 150000]\n}\ndf = pd.DataFrame(data)\n\nX = df[['YearsExperience']]\ny = df['Salary']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(\"Training Set:\")\nprint(pd.concat([X_train, y_train], axis=1))\nprint(\"\\nTesting Set:\")\nprint(pd.concat([X_test, y_test], axis=1))\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\nplt.scatter(X, y, color='red', label='Actual Data')\nplt.plot(X, model.predict(X), color='blue', label='Linear Regression Line')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')\nplt.title('Years of Experience vs Salary')\nplt.legend()\nplt.show()\n"
    },
    {
        "id": 1742480834663,
        "slip_no": "slip 3",
        "question": "Create ‘User’ Data set having 5 columns namely: User ID, Gender, Age, Estimated Salary and Purchased. Build a logistic regression model that can predict whether on the given parameter a person will buy a car or not.",
        "language": "python",
        "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndata = {\n    'User ID': np.arange(1, 11),\n    'Gender': ['Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female'],\n    'Age': [22, 25, 47, 52, 46, 23, 56, 27, 48, 49],\n    'Estimated Salary': [20000, 35000, 70000, 50000, 80000, 25000, 120000, 30000, 85000, 90000],\n    'Purchased': [0, 0, 1, 1, 1, 0, 1, 0, 1, 1]\n}\ndf = pd.DataFrame(data)\n\ndf['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})\n\nX = df[['Gender', 'Age', 'Estimated Salary']]\ny = df['Purchased']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\n\nprint(\"Training Set:\")\nprint(pd.DataFrame(X_train, columns=['Gender', 'Age', 'Estimated Salary']))\nprint(\"\\nTesting Set:\")\nprint(pd.DataFrame(X_test, columns=['Gender', 'Age', 'Estimated Salary']))\nprint(\"\\nModel Accuracy:\", accuracy)\nprint(\"\\nConfusion Matrix:\\n\", conf_matrix)\n"
    },
    {
        "id": 1742481251136,
        "slip_no": "slip 3",
        "question": "Write a PHP script to accept username and password. If in the first three chances, username and password entered is correct then display second form with “Welcome message” otherwise display error message. [Use Session]",
        "language": "php",
        "code": "// login.php\n\n<?php\nsession_start();\n\n$correct_username = \"ajay\";\n$correct_password = \"ajay123\";\n\nif (!isset($_SESSION['attempts'])) {\n    $_SESSION['attempts'] = 0;\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n    \n    if ($username === $correct_username && $password === $correct_password) {\n        $_SESSION['authenticated'] = true;\n        header(\"Location: welcome.php\");\n        exit;\n    } else {\n        $_SESSION['attempts']++;\n        $error = \"Invalid username or password. Attempt \" . $_SESSION['attempts'] . \" of 3.\";\n    }\n    \n    if ($_SESSION['attempts'] >= 3) {\n        $error = \"Too many failed attempts. Please try again later.\";\n        session_destroy();\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <h2>Login</h2>\n    <?php if (isset($error)) echo \"<p style='color:red;'>$error</p>\"; ?>\n    <form method=\"post\">\n        Username: <input type=\"text\" name=\"username\" required><br>\n        Password: <input type=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>\n\n\n// welcome.php\n\n<?php\nsession_start();\nif (!isset($_SESSION['authenticated']) || $_SESSION['authenticated'] !== true) {\n    header(\"Location: login.php\");\n    exit;\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome</title>\n</head>\n<body>\n    <h2>Welcome!</h2>\n    <p>You have successfully logged in.</p>\n</body>\n</html>\n\n\n\n\n\n"
    },
    {
        "id": 1742481967342,
        "slip_no": "slip 4",
        "question": "Write a PHP script to accept Employee details (Eno, Ename, Address) on first page. On second page accept earning (Basic, DA, HRA). On third page print Employee information (Eno, Ename, Address, Basic, DA, HRA, Total) [ Use Session]",
        "language": "php",
        "code": "// employee.php\n\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $_SESSION['eno'] = $_POST['eno'];\n    $_SESSION['ename'] = $_POST['ename'];\n    $_SESSION['address'] = $_POST['address'];\n    header(\"Location: earnings.php\");\n    exit;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Employee Details</title>\n</head>\n<body>\n    <h2>Enter Employee Details</h2>\n    <form method=\"post\">\n        Employee Number: <input type=\"text\" name=\"eno\" required><br>\n        Employee Name: <input type=\"text\" name=\"ename\" required><br>\n        Address: <input type=\"text\" name=\"address\" required><br>\n        <button type=\"submit\">Next</button>\n    </form>\n</body>\n</html>\n\n\n// earnings.php\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $_SESSION['basic'] = $_POST['basic'];\n    $_SESSION['da'] = $_POST['da'];\n    $_SESSION['hra'] = $_POST['hra'];\n    header(\"Location: summary.php\");\n    exit;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Employee Earnings</title>\n</head>\n<body>\n    <h2>Enter Employee Earnings</h2>\n    <form method=\"post\">\n        Basic: <input type=\"number\" name=\"basic\" required><br>\n        DA: <input type=\"number\" name=\"da\" required><br>\n        HRA: <input type=\"number\" name=\"hra\" required><br>\n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n\n\n// summary.php\n\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $_SESSION['basic'] = $_POST['basic'];\n    $_SESSION['da'] = $_POST['da'];\n    $_SESSION['hra'] = $_POST['hra'];\n    header(\"Location: summary.php\");\n    exit;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Employee Earnings</title>\n</head>\n<body>\n    <h2>Enter Employee Earnings</h2>\n    <form method=\"post\">\n        Basic: <input type=\"number\" name=\"basic\" required><br>\n        DA: <input type=\"number\" name=\"da\" required><br>\n        HRA: <input type=\"number\" name=\"hra\" required><br>\n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n\n"
    },
    {
        "id": 1742482245759,
        "slip_no": "slip 4",
        "question": "Build a simple linear regression model for Fish Species Weight Prediction.",
        "language": "python",
        "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ndata = {\n    'Species': ['Salmon', 'Trout', 'Salmon', 'Trout', 'Salmon', 'Trout', 'Salmon', 'Trout', 'Salmon', 'Trout'],\n    'Length': [30, 25, 35, 28, 40, 30, 45, 32, 50, 35],\n    'Weight': [500, 400, 600, 450, 700, 500, 800, 550, 900, 600]\n}\ndf = pd.DataFrame(data)\n\ndf['Species'] = df['Species'].map({'Salmon': 0, 'Trout': 1})\n\nX = df[['Species', 'Length']]\ny = df['Weight']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(\"Training Set:\")\nprint(pd.concat([X_train, y_train], axis=1))\nprint(\"\\nTesting Set:\")\nprint(pd.concat([X_test, y_test], axis=1))\nprint(\"\\nMean Squared Error:\", mse)\nprint(\"R-squared Score:\", r2)\n\nplt.scatter(df['Length'], df['Weight'], color='red', label='Actual Data')\nplt.plot(df['Length'], model.predict(X), color='blue', label='Regression Line')\nplt.xlabel('Length (cm)')\nplt.ylabel('Weight (g)')\nplt.title('Fish Length vs Weight Prediction')\nplt.legend()\nplt.show()"
    },
    {
        "id": 1742483876353,
        "slip_no": "slip 5",
        "question": "Create XML file named “Item.xml”with item-name, item-rate, item quantity Store the details of 5 Items of different Types",
        "language": "php",
        "code": "<?php\n$dom = new DOMDocument('1.0', 'UTF-8');\n$items = $dom->createElement('Items');\n$dom->appendChild($items);\n\n$itemList = [\n    ['name' => 'Laptop', 'rate' => 75000, 'quantity' => 5],\n    ['name' => 'Phone', 'rate' => 50000, 'quantity' => 10],\n    ['name' => 'Tablet', 'rate' => 30000, 'quantity' => 7],\n    ['name' => 'Monitor', 'rate' => 20000, 'quantity' => 4],\n    ['name' => 'Keyboard', 'rate' => 1500, 'quantity' => 15]\n];\n\nforeach ($itemList as $item) {\n    $itemNode = $dom->createElement('Item');\n    \n    $name = $dom->createElement('ItemName', $item['name']);\n    $rate = $dom->createElement('ItemRate', $item['rate']);\n    $quantity = $dom->createElement('ItemQuantity', $item['quantity']);\n\n    $itemNode->appendChild($name);\n    $itemNode->appendChild($rate);\n    $itemNode->appendChild($quantity);\n    \n    $items->appendChild($itemNode);\n}\n\n$dom->formatOutput = true;\n$dom->save(\"Item.xml\");\n\necho \"XML file 'Item.xml' has been created successfully.\";\n?>\n"
    },
    {
        "id": 1742484132441,
        "slip_no": "slip 5",
        "question": "Use the iris dataset. Write a Python program to view some basic statistical details like percentile, mean, std etc. of the species of 'Iris-setosa', 'Iris-versicolor' and 'Iris-virginica'. Apply logistic regression on the dataset to identify different species (setosa, versicolor, verginica) of Iris flowers given just 4 features: sepal and petal lengths and widths.. Find the accuracy of the model.",
        "language": "python",
        "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\niris = sns.load_dataset('iris')\n\nspecies_stats = iris.groupby('species').describe()\nprint(\"Basic Statistical Details of Each Species:\\n\", species_stats)\n\nX = iris.drop(columns=['species'])  \ny = iris['species']  \n\ny = y.map({'setosa': 0, 'versicolor': 1, 'virginica': 2})\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nmodel = LogisticRegression(multi_class='ovr', solver='lbfgs', max_iter=200)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\n\nprint(\"Model Accuracy:\", accuracy)\nprint(\"\\nConfusion Matrix:\\n\", conf_matrix)\nprint(\"\\nClassification Report:\\n\", class_report)\n\nplt.figure(figsize=(6,4))\nsns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d', xticklabels=['Setosa', 'Versicolor', 'Virginica'], yticklabels=['Setosa', 'Versicolor', 'Virginica'])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()\n"
    },
    {
        "id": 1742484474938,
        "slip_no": "slip 6",
        "question": "Write PHP script to read “book.xml” file into simpleXML object. Display attributes and elements . ( simple_xml_load_file() function )",
        "language": "php",
        "code": "// book.php\n\n<?php\n$xml = simplexml_load_file('book.xml') or die(\"Error: Cannot load XML file\");\n\nforeach ($xml->Book as $book) {\n    echo \"<h2>Book Details</h2>\";\n    echo \"Title: \" . $book->Title . \"<br>\";\n    echo \"Author: \" . $book->Author . \"<br>\";\n    echo \"Price: \" . $book->Price . \"<br>\";\n    \n    if ($book->attributes()) {\n        echo \"<strong>Attributes:</strong><br>\";\n        foreach ($book->attributes() as $key => $value) {\n            echo ucfirst($key) . \": \" . $value . \"<br>\";\n        }\n    }\n    echo \"<hr>\";\n}\n?>\n\n// book.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Library>\n    <Book id=\"101\">\n        <Title>The Great Gatsby</Title>\n        <Author>F. Scott Fitzgerald</Author>\n        <Price>10.99</Price>\n    </Book>\n    <Book id=\"102\">\n        <Title>1984</Title>\n        <Author>George Orwell</Author>\n        <Price>8.99</Price>\n    </Book>\n    <Book id=\"103\">\n        <Title>To Kill a Mockingbird</Title>\n        <Author>Harper Lee</Author>\n        <Price>12.50</Price>\n    </Book>\n    <Book id=\"104\">\n        <Title>The Catcher in the Rye</Title>\n        <Author>J.D. Salinger</Author>\n        <Price>9.75</Price>\n    </Book>\n    <Book id=\"105\">\n        <Title>Pride and Prejudice</Title>\n        <Author>Jane Austen</Author>\n        <Price>7.99</Price>\n    </Book>\n</Library>\n\n"
    },
    {
        "id": 1742484790243,
        "slip_no": "slip 6",
        "question": "Create the following dataset in python & Convert the categorical values into numeric format.Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.frequent_patterns import apriori, association_rules\nfrom mlxtend.preprocessing import TransactionEncoder\n\ndataset = [\n    ['Milk', 'Bread', 'Eggs'],\n    ['Milk', 'Diaper', 'Beer', 'Bread'],\n    ['Milk', 'Diaper', 'Beer', 'Cola'],\n    ['Bread', 'Butter'],\n    ['Milk', 'Diaper', 'Bread', 'Butter'],\n    ['Milk', 'Bread', 'Diaper', 'Cola'],\n    ['Eggs', 'Bread'],\n    ['Milk', 'Eggs', 'Diaper', 'Beer'],\n    ['Milk', 'Bread', 'Diaper'],\n    ['Milk', 'Diaper', 'Beer']\n]\n\nte = TransactionEncoder()\nte_ary = te.fit(dataset).transform(dataset)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\n\nmin_sup_values = [0.3, 0.4, 0.5]\n\nfor min_sup in min_sup_values:\n    print(f\"\\nFrequent Itemsets with min_support={min_sup}:\")\n    frequent_itemsets = apriori(df, min_support=min_sup, use_colnames=True)\n    print(frequent_itemsets)\n    \n    print(f\"\\nAssociation Rules with min_support={min_sup}:\")\n    rules = association_rules(frequent_itemsets, metric='lift', min_threshold=1)\n    print(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])\n"
    },
    {
        "id": 1742485423900,
        "slip_no": "slip 7",
        "question": "Write a PHP script to read “Movie.xml” file and print all MovieTitle and ActorName of file using DOMDocument Parser. “Movie.xml” file should contain following information with at least 5 records with values. MovieInfoMovieNo, MovieTitle, ActorName ,ReleaseYear",
        "language": "php",
        "code": "// movies.php\n\n<?php\n$doc = new DOMDocument();\n$doc->load('movies.xml') or die(\"Error: Cannot load XML file\");\n\n$movies = $doc->getElementsByTagName('Movie');\n\necho \"<h2>Movie List</h2>\";\n\nforeach ($movies as $movie) {\n\t$no = $movie->getElementsByTagName('MovieNo')->item(0)->nodeValue;\n    $title = $movie->getElementsByTagName('MovieTitle')->item(0)->nodeValue;\n    $actor = $movie->getElementsByTagName('ActorName')->item(0)->nodeValue;\n    $releaseyear = $movie->getElementsByTagName('ReleaseYear')->item(0)->nodeValue;\n    echo \"<strong>Actor:</strong> $no <br>\";\n    echo \"<strong>Title:</strong> $title <br>\";\n    echo \"<strong>Actor:</strong> $actor <br>\";\n    echo \"<strong>Actor:</strong> $releaseyear <br><hr>\";\n}\n?>\n\n// movies.php\n\n<?php\n$xml = new SimpleXMLElement('<?xml version=\"1.0\" encoding=\"UTF-8\"?><Movies></Movies>');\n\n$movies = [\n    ['MovieNo' => '001', 'Title' => 'Inception', 'Actor' => 'Leonardo DiCaprio', 'Year' => 2010],\n    ['MovieNo' => '002', 'Title' => 'The Dark Knight', 'Actor' => 'Christian Bale', 'Year' => 2008],\n    ['MovieNo' => '003', 'Title' => 'Interstellar', 'Actor' => 'Matthew McConaughey', 'Year' => 2014],\n    ['MovieNo' => '004', 'Title' => 'Forrest Gump', 'Actor' => 'Tom Hanks', 'Year' => 1994],\n    ['MovieNo' => '005', 'Title' => 'Gladiator', 'Actor' => 'Russell Crowe', 'Year' => 2000]\n];\n\nforeach ($movies as $movie) {\n    $movieNode = $xml->addChild('Movie');\n    $movieNode->addAttribute('MovieNo', $movie['MovieNo']);\n    $movieNode->addChild('MovieNo', ltrim($movie['MovieNo'], '0'));\n    $movieNode->addChild('MovieTitle', $movie['Title']);\n    $movieNode->addChild('ActorName', $movie['Actor']);\n    $movieNode->addChild('ReleaseYear', $movie['Year']);\n}\n\n$file = 'Movies.xml';\n$xml->asXML($file);\n\necho \"XML file 'Movies.xml' has been created successfully.\";\n?>\n"
    },
    {
        "id": 1742486190630,
        "slip_no": "slip 7",
        "question": "Download the Market basket dataset. Write a python program to read the dataset and display its information. Preprocess the data (drop null values etc.) Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.frequent_patterns import apriori, association_rules\nfrom mlxtend.preprocessing import TransactionEncoder\n\nfile_path = \"/home/ajay/.cache/kagglehub/datasets/devchauhan1/market-basket-optimisationcsv/versions/1/Market_Basket_Optimisation.csv\"\ndf = pd.read_csv(file_path, header=None)\n\nprint(\"Dataset Info:\\n\", df.info())\nprint(\"\\nFirst 5 rows:\\n\", df.head())\n\ntransactions = []\nfor i in range(len(df)):\n    transaction = [str(df.values[i, j]) for j in range(len(df.columns)) if str(df.values[i, j]) != 'nan']\n    transactions.append(transaction)\n\nte = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\ndf_encoded = pd.DataFrame(te_ary, columns=te.columns_)\n\nfrequent_itemsets = apriori(df_encoded, min_support=0.05, use_colnames=True)\n\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\n\nprint(\"\\nFrequent Itemsets:\\n\", frequent_itemsets)\nprint(\"\\nAssociation Rules:\\n\", rules)\n\nfrequent_itemsets.to_csv(\"frequent_itemsets.csv\", index=False)\nrules.to_csv(\"association_rules.csv\", index=False)\n\nprint(\"\\nFrequent itemsets and association rules saved successfully!\")\n"
    },
    {
        "id": 1742486601726,
        "slip_no": "slip 8",
        "question": "Write a JavaScript to display message ‘Exams are near, have you started preparing for?’ (usealert box ) and Accept any two numbers from user and display addition of two number .(Use Prompt and confirm box)",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exam Alert & Addition</title>\n</head>\n<body>\n\n    <script>\n        alert(\"Exams are near, have you started preparing?\");\n\n        let num1 = prompt(\"Enter the first number:\");\n        let num2 = prompt(\"Enter the second number:\");\n\n        num1 = parseFloat(num1);\n        num2 = parseFloat(num2);\n\n        if (isNaN(num1) || isNaN(num2)) {\n            alert(\"Invalid input! Please enter numeric values.\");\n        } else {\n            let confirmAddition = confirm(\"Do you want to see the sum of the two numbers?\");\n            \n            if (confirmAddition) {\n                let sum = num1 + num2;\n                alert(\"The sum of \" + num1 + \" and \" + num2 + \" is: \" + sum);\n            } else {\n                alert(\"Addition operation canceled.\");\n            }\n        }\n    </script>\n\n</body>\n</html>\n"
    },
    {
        "id": 1742487195384,
        "slip_no": "slip 8",
        "question": "Download the groceries dataset. Write a python program to read the dataset and display its information. Preprocess the data (drop null values etc.) Convert the categorical values into numeric format. Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\nfile_path = '/home/ajay/.cache/kagglehub/datasets/heeraldedhia/groceries-dataset/versions/1/Groceries_dataset.csv'  \ndf = pd.read_csv(file_path, header=None)\n\nprint(\"Dataset Info:\\n\", df.info())\nprint(\"\\nFirst 5 rows:\\n\", df.head())\n\ntransactions = df.apply(lambda row: row.dropna().tolist(), axis=1).tolist()\n\nte = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\ndf_encoded = pd.DataFrame(te_ary, columns=te.columns_)\n\nfrequent_itemsets = apriori(df_encoded, min_support=0.05, use_colnames=True)\n\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\n\nprint(\"\\nFrequent Itemsets:\\n\", frequent_itemsets)\nprint(\"\\nAssociation Rules:\\n\", rules)\n\nfrequent_itemsets.to_csv(\"frequent_itemsets.csv\", index=False)\nrules.to_csv(\"association_rules.csv\", index=False)\n\nprint(\"\\nFrequent itemsets and association rules saved successfully!\")\n"
    },
    {
        "id": 1742487541057,
        "slip_no": "slip 9",
        "question": "Write a JavaScript function to validate username and password for a membership form.",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Membership Form</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            text-align: center;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            width: 300px;\n            margin: auto;\n            margin-top: 50px;\n            border-radius: 10px;\n            box-shadow: 0px 0px 10px gray;\n        }\n        input {\n            width: 90%;\n            padding: 8px;\n            margin: 8px 0;\n        }\n        button {\n            background: blue;\n            color: white;\n            padding: 10px;\n            width: 100%;\n            border: none;\n            cursor: pointer;\n        }\n        button:hover {\n            background: darkblue;\n        }\n        .error {\n            color: red;\n            font-size: 14px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h2>Membership Form</h2>\n        <form onsubmit=\"return validateForm()\">\n            <input type=\"text\" id=\"username\" placeholder=\"Enter Username\"><br>\n            <span id=\"userError\" class=\"error\"></span><br>\n\n            <input type=\"password\" id=\"password\" placeholder=\"Enter Password\"><br>\n            <span id=\"passError\" class=\"error\"></span><br>\n\n            <button type=\"submit\">Register</button>\n        </form>\n    </div>\n\n    <script>\n        function validateForm() {\n            let username = document.getElementById(\"username\").value;\n            let password = document.getElementById(\"password\").value;\n            let userError = document.getElementById(\"userError\");\n            let passError = document.getElementById(\"passError\");\n\n            userError.innerHTML = \"\";\n            passError.innerHTML = \"\";\n\n            let isValid = true;\n\n            // Validate Username (Min 5 characters)\n            if (username.length < 5) {\n                userError.innerHTML = \"Username must be at least 5 characters long\";\n                isValid = false;\n            }\n\n            // Validate Password (Min 8 characters, at least one uppercase, lowercase, digit, and special character)\n            let passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n            if (!passwordPattern.test(password)) {\n                passError.innerHTML = \"Password must be 8+ chars, include uppercase, lowercase, digit, and special char.\";\n                isValid = false;\n            }\n\n            return isValid;\n        }\n    </script>\n\n</body>\n</html>\n"
    },
    {
        "id": 1742487848552,
        "slip_no": "slip 9",
        "question": "Create your own transactions dataset and apply the above process on your dataset.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\ntransactions = [\n    ['Milk', 'Bread', 'Eggs'],\n    ['Milk', 'Bread'],\n    ['Eggs', 'Butter'],\n    ['Milk', 'Eggs', 'Butter'],\n    ['Bread', 'Butter'],\n    ['Milk', 'Bread', 'Butter', 'Eggs']\n]\n\nte = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\ndf_encoded = pd.DataFrame(te_ary, columns=te.columns_)\n\nprint(\"Encoded Dataset:\\n\", df_encoded.head())\n\nfrequent_itemsets = apriori(df_encoded, min_support=0.5, use_colnames=True)\nprint(\"\\nFrequent Itemsets:\\n\", frequent_itemsets)\n\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\nprint(\"\\nAssociation Rules:\\n\", rules)\n\nfrequent_itemsets.to_csv(\"frequent_itemsets.csv\", index=False)\nrules.to_csv(\"association_rules.csv\", index=False)\nprint(\"\\nFrequent itemsets and association rules saved successfully!\")\n"
    },
    {
        "id": 1742493439501,
        "slip_no": "slip 10",
        "question": "Create a HTML fileto insert text before and after a Paragraph using jQuery. [Hint : Use before( ) and after( )]",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>jQuery Before & After Example</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        .container {\n            width: 50%;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 10px;\n            box-shadow: 2px 2px 10px gray;\n        }\n        button {\n            margin: 10px;\n            padding: 10px;\n            font-size: 16px;\n            cursor: pointer;\n            border: none;\n            background: blue;\n            color: white;\n            border-radius: 5px;\n        }\n        button:hover {\n            background: darkblue;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h2>Insert Text Before & After a Paragraph using jQuery</h2>\n        <button id=\"addBefore\">Insert Before</button>\n        <button id=\"addAfter\">Insert After</button>\n\n        <p id=\"myPara\">This is the main paragraph.</p>\n    </div>\n\n    <script>\n        $(document).ready(function(){\n            $(\"#addBefore\").click(function(){\n                $(\"#myPara\").before(\"<p style='color: green;'>This text is added before the paragraph.</p>\");\n            });\n\n            $(\"#addAfter\").click(function(){\n                $(\"#myPara\").after(\"<p style='color: red;'>This text is added after the paragraph.</p>\");\n            });\n        });\n    </script>\n\n</body>\n</html>\n"
    },
    {
        "id": 1742493659072,
        "slip_no": "slip 10",
        "question": "Create the following dataset in python & Convert the categorical values into numeric format.Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\ntransactions = [\n    ['eggs', 'milk', 'bread'],\n    ['eggs', 'apple'],\n    ['milk', 'bread'],\n    ['apple', 'milk'],\n    ['milk', 'apple', 'bread']\n]\n\nte = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\ndf_encoded = pd.DataFrame(te_ary, columns=te.columns_)\n\nprint(\"Encoded Dataset:\\n\", df_encoded)\n\nprint(\"\\nApplying Apriori with min_support=0.5\")\nfrequent_itemsets_50 = apriori(df_encoded, min_support=0.5, use_colnames=True)\nprint(\"\\nFrequent Itemsets (min_sup=0.5):\\n\", frequent_itemsets_50)\n\nrules_50 = association_rules(frequent_itemsets_50, metric=\"lift\", min_threshold=1.0)\nprint(\"\\nAssociation Rules (min_sup=0.5):\\n\", rules_50)\n\nprint(\"\\nApplying Apriori with min_support=0.3\")\nfrequent_itemsets_30 = apriori(df_encoded, min_support=0.3, use_colnames=True)\nprint(\"\\nFrequent Itemsets (min_sup=0.3):\\n\", frequent_itemsets_30)\n\nrules_30 = association_rules(frequent_itemsets_30, metric=\"lift\", min_threshold=1.0)\nprint(\"\\nAssociation Rules (min_sup=0.3):\\n\", rules_30)\n\nfrequent_itemsets_50.to_csv(\"frequent_itemsets_50.csv\", index=False)\nrules_50.to_csv(\"association_rules_50.csv\", index=False)\nfrequent_itemsets_30.to_csv(\"frequent_itemsets_30.csv\", index=False)\nrules_30.to_csv(\"association_rules_30.csv\", index=False)\n\nprint(\"\\nFrequent itemsets and association rules saved successfully!\")\n"
    },
    {
        "id": 1742494935359,
        "slip_no": "slip 11",
        "question": "Write a Javascript program to accept name of student, change font color to red, font size to 18 if student name is present otherwise on clicking on empty text box display image which changes its size (Use onblur, onload, onmousehover, onmouseclick, onmouseup)",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Student Name Validation</title>\n    <style>\n        #studentName {\n            padding: 10px;\n            font-size: 16px;\n            border: 2px solid black;\n        }\n        .highlight {\n            color: red;\n            font-size: 18px;\n        }\n        #studentImage {\n            display: none;\n            width: 150px;\n            height: 150px;\n        }\n    </style>\n</head>\n<body>\n\n    <h2>Enter Student Name</h2>\n    <input type=\"text\" id=\"studentName\" placeholder=\"Enter Name\" onblur=\"validateName()\" onclick=\"showImage()\">\n    <br><br>\n    \n    <img id=\"studentImage\" src=\"https://images.pexels.com/photos/33109/fall-autumn-red-season.jpg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1/150\"\n        onmouseover=\"enlargeImage()\"\n        onclick=\"resetImageSize()\"\n        onmouseup=\"shrinkImage()\">\n\n    <script>\n        function validateName() {\n            let nameInput = document.getElementById(\"studentName\");\n            if (nameInput.value.trim() !== \"\") {\n                nameInput.classList.add(\"highlight\");\n            } else {\n                nameInput.classList.remove(\"highlight\");\n            }\n        }\n\n        function showImage() {\n            let nameInput = document.getElementById(\"studentName\");\n            let img = document.getElementById(\"studentImage\");\n\n            if (nameInput.value.trim() === \"\") {\n                img.style.display = \"block\";\n            }\n        }\n\n        function enlargeImage() {\n            document.getElementById(\"studentImage\").style.width = \"200px\";\n        }\n\n        function shrinkImage() {\n            document.getElementById(\"studentImage\").style.width = \"100px\";\n        }\n\n        function resetImageSize() {\n            document.getElementById(\"studentImage\").style.width = \"150px\";\n        }\n    </script>\n\n</body>\n</html>\n"
    },
    {
        "id": 1742495196486,
        "slip_no": "slip 11",
        "question": "Create the following dataset in python & Convert the categorical values into numeric format.Apply the apriori algorithm on the above dataset to generate the frequent itemsets and associationrules. Repeat the process with different min_sup values.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n# Step 1: Create the dataset (List of transactions)\ntransactions = [\n    ['butter', 'bread', 'milk'],\n    ['butter', 'flour', 'milk', 'sugar'],\n    ['butter', 'eggs', 'milk', 'salt'],\n    ['eggs'],\n    ['butter', 'flour', 'milk', 'salt']\n]\n\n# Step 2: Convert transactions to One-Hot Encoding format\nte = TransactionEncoder()\nte_array = te.fit(transactions).transform(transactions)\ndf_encoded = pd.DataFrame(te_array, columns=te.columns_)\n\nprint(\"🔹 One-Hot Encoded Data:\\n\", df_encoded)\n\n# Step 3: Apply Apriori Algorithm (First run with min_support = 0.5)\nprint(\"\\n🟢 Applying Apriori Algorithm (min_support = 0.5)...\")\nfrequent_itemsets = apriori(df_encoded, min_support=0.5, use_colnames=True)\nprint(\"\\n🔹 Frequent Itemsets:\\n\", frequent_itemsets)\n\n# Step 4: Generate Association Rules (Lift > 1.0)\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\nprint(\"\\n🔹 Association Rules:\\n\", rules)\n\n# Step 5: Try different min_support values\nfor min_sup in [0.4, 0.3]:  # Try with 0.4 and 0.3\n    print(f\"\\n🟢 Applying Apriori Algorithm (min_support = {min_sup})...\")\n    frequent_itemsets = apriori(df_encoded, min_support=min_sup, use_colnames=True)\n    print(\"\\n🔹 Frequent Itemsets:\\n\", frequent_itemsets)\n    \n    rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\n    print(\"\\n🔹 Association Rules:\\n\", rules)\n\n# Step 6: Save the results\nfrequent_itemsets.to_csv(\"frequent_itemsets.csv\", index=False)\nrules.to_csv(\"association_rules.csv\", index=False)\n\nprint(\"\\n✅ Frequent itemsets and association rules saved successfully!\")\n"
    },
    {
        "id": 1742531892803,
        "slip_no": "slip 12",
        "question": "Write AJAX program to read contact.dat file and print the contents of the file in a tabular format when the user clicks on print button. Contact.dat file should contain srno, name, residence number, mobile number, Address. [Enter at least 3 record in contact.dat file]",
        "language": "html",
        "code": "// contact.dat\n1, John Doe, 0123456789, 9876543210, 123 Street, NY\n2, Alice Brown, 0112233445, 9988776655, 456 Avenue, LA\n3, Bob Smith, 0223344556, 9876123456, 789 Road, TX\n\n\n// index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AJAX Contact List</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n        table, th, td {\n            border: 1px solid black;\n            padding: 10px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n\n    <h2>Contact List</h2>\n    <button onclick=\"fetchContacts()\">Print</button>\n    \n    <table id=\"contactTable\" style=\"display: none;\">\n        <thead>\n            <tr>\n                <th>Sr. No</th>\n                <th>Name</th>\n                <th>Residence No</th>\n                <th>Mobile No</th>\n                <th>Address</th>\n            </tr>\n        </thead>\n        <tbody></tbody>\n    </table>\n\n    <script>\n        function fetchContacts() {\n            $.ajax({\n                url: \"read_contact.php\",\n                method: \"GET\",\n                dataType: \"json\",\n                success: function(data) {\n                    let tableBody = $(\"#contactTable tbody\");\n                    tableBody.empty();\n\n                    data.forEach(contact => {\n                        let row = `<tr>\n                            <td>${contact.srno}</td>\n                            <td>${contact.name}</td>\n                            <td>${contact.residence}</td>\n                            <td>${contact.mobile}</td>\n                            <td>${contact.address}</td>\n                        </tr>`;\n                        tableBody.append(row);\n                    });\n\n                    $(\"#contactTable\").show();\n                },\n                error: function() {\n                    alert(\"Error fetching contacts!\");\n                }\n            });\n        }\n    </script>\n\n</body>\n</html>\n"
    },
    {
        "id": 1742495675059,
        "slip_no": "slip 12",
        "question": "Create ‘heights-and-weights’ Data set . Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.",
        "language": "python",
        "code": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Step 1: Create the dataset (synthetic data)\nnp.random.seed(42)\nheights = np.random.randint(140, 200, 100)  # Heights in cm\nweights = heights * 0.5 + np.random.normal(5, 3, 100)  # Weight with some noise\n\n# Create a DataFrame\ndf = pd.DataFrame({'Height': heights, 'Weight': weights})\n\n# Step 2: Define Independent (X) and Target (y) Variables\nX = df[['Height']]  # Independent variable\ny = df['Weight']    # Target variable\n\n# Step 3: Split into Training (70%) and Testing (30%) Sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Print training and testing data\nprint(\"Training Data:\\n\", X_train.head(), \"\\n\")\nprint(\"Testing Data:\\n\", X_test.head(), \"\\n\")\n\n# Step 4: Train a Linear Regression Model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Step 5: Make Predictions\ny_pred = model.predict(X_test)\n\n# Step 6: Model Evaluation\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"\\nMean Squared Error: {mse:.2f}\")\nprint(f\"R-squared Score: {r2:.2f}\")\n\n# Step 7: Plot Results\nplt.scatter(X_test, y_test, color='blue', label='Actual')\nplt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')\nplt.xlabel('Height (cm)')\nplt.ylabel('Weight (kg)')\nplt.title('Linear Regression: Height vs Weight')\nplt.legend()\nplt.show()\n"
    },
    {
        "id": 1742496056541,
        "slip_no": "slip 13",
        "question": "Write AJAX program where the user is requested to write his or her name in a text box, and the server keeps sending back responses while the user is typing. If the user name is not entered then the message displayed will be, “Stranger, please tell me your name!”. If the name is Rohit, Virat, Dhoni, Ashwin or Harbhajan , the server responds with “Hello, master !”. If the name is anything else, the message will be “, I don’t know you!”",
        "language": "html",
        "code": "// index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Live Name Response</title>\n    <script>\n        function checkName() {\n            let name = document.getElementById(\"username\").value;\n            let xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState == 4 && xhr.status == 200) {\n                    document.getElementById(\"response\").innerHTML = xhr.responseText;\n                }\n            };\n            xhr.open(\"GET\", \"server.php?name=\" + name, true);\n            xhr.send();\n        }\n    </script>\n</head>\n<body>\n    <h2>Enter your name:</h2>\n    <input type=\"text\" id=\"username\" onkeyup=\"checkName()\" placeholder=\"Type your name...\">\n    <p id=\"response\" style=\"font-weight: bold; color: blue;\"></p>\n</body>\n</html>\n\n// server.php\n\n<?php\nif (isset($_GET['name'])) {\n    $name = trim($_GET['name']);\n    \n    if ($name == \"\") {\n        echo \"Stranger, please tell me your name!\";\n    } else {\n        $masters = [\"Rohit\", \"Virat\", \"Dhoni\", \"Ashwin\", \"Harbhajan\"];\n        \n        if (in_array($name, $masters)) {\n            echo \"Hello, master!\";\n        } else {\n            echo \"$name, I don’t know you!\";\n        }\n    }\n}\n?>\n\n"
    },
    {
        "id": 1742496647636,
        "slip_no": "slip 13",
        "question": "Download nursery dataset from UCI. Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.",
        "language": "python",
        "code": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Step 2: Load the dataset\nurl = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\ndf = pd.read_csv(url, sep=';')\n\n# Step 3: Identify independent and target variables\nX = df.drop('quality', axis=1)\ny = df['quality']\n\n# Step 4: Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Step 5: Build and train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Step 6: Evaluate the model\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f'Mean Squared Error: {mse}')\nprint(f'R² Score: {r2}')\n"
    },
    {
        "id": 1742497245837,
        "slip_no": "slip 14",
        "question": "Create TEACHER table as follows TEACHER(tno, tname, qualification, salary). Write Ajax program to select a teachers name and print the selected teachers details",
        "language": "html",
        "code": "// index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Teacher Details</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n</head>\n<body>\n\n    <h2>Select a Teacher</h2>\n    <select id=\"teacherDropdown\">\n        <option value=\"\">Select a Teacher</option>\n    </select>\n\n    <h3>Teacher Details</h3>\n    <div id=\"teacherDetails\"></div>\n\n    <script>\n        $(document).ready(function() {\n            // Load teacher names into dropdown\n            $.ajax({\n                url: \"get_teachers.php\",\n                type: \"GET\",\n                success: function(response) {\n                    let teachers = JSON.parse(response);\n                    teachers.forEach(teacher => {\n                        $(\"#teacherDropdown\").append(`<option value=\"${teacher.tno}\">${teacher.tname}</option>`);\n                    });\n                }\n            });\n\n            // Fetch teacher details on selection\n            $(\"#teacherDropdown\").change(function() {\n                let tno = $(this).val();\n                if (tno) {\n                    $.ajax({\n                        url: \"get_teacher_details.php\",\n                        type: \"GET\",\n                        data: { tno: tno },\n                        success: function(response) {\n                            $(\"#teacherDetails\").html(response);\n                        }\n                    });\n                } else {\n                    $(\"#teacherDetails\").html(\"\");\n                }\n            });\n        });\n    </script>\n\n</body>\n</html>\n\n// get_teachers.php\n<?php\n$conn = pg_connect(\"host=localhost dbname=your_db user=your_user password=your_password\");\nif (!$conn) {\n    die(\"Connection failed\");\n}\n\n$result = pg_query($conn, \"SELECT tno, tname FROM TEACHER\");\n$teachers = pg_fetch_all($result);\n\necho json_encode($teachers);\npg_close($conn);\n?>\n\n// get_teacher_details.php\n<?php\n$conn = pg_connect(\"host=localhost dbname=your_db user=your_user password=your_password\");\nif (!$conn) {\n    die(\"Connection failed\");\n}\n\nif (isset($_GET['tno'])) {\n    $tno = $_GET['tno'];\n    $query = \"SELECT * FROM TEACHER WHERE tno = $1\";\n    $result = pg_query_params($conn, $query, array($tno));\n    $teacher = pg_fetch_assoc($result);\n\n    if ($teacher) {\n        echo \"<p><strong>Name:</strong> \" . $teacher['tname'] . \"</p>\";\n        echo \"<p><strong>Qualification:</strong> \" . $teacher['qualification'] . \"</p>\";\n        echo \"<p><strong>Salary:</strong> $\" . $teacher['salary'] . \"</p>\";\n    } else {\n        echo \"Teacher not found.\";\n    }\n}\n\npg_close($conn);\n?>\n\n\n\n"
    },
    {
        "id": 1742497454317,
        "slip_no": "slip 14",
        "question": "Create the following dataset in python & Convert the categorical values into numeric format.Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n# Step 1: Create dataset\ntransactions = [\n    ['Apple', 'Mango', 'Banana'],\n    ['Mango', 'Banana', 'Cabbage', 'Carrots'],\n    ['Mango', 'Banana', 'Carrots'],\n    ['Mango', 'Carrots']\n]\n\n# Step 2: Convert categorical values into numeric format (One-Hot Encoding)\nte = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\ndf_encoded = pd.DataFrame(te_ary, columns=te.columns_)\n\nprint(\"\\nEncoded Data:\\n\", df_encoded)\n\n# Step 3: Apply Apriori algorithm with different min_support values\nmin_support_values = [0.5, 0.6]  # Try different values\n\nfor min_sup in min_support_values:\n    print(f\"\\nApplying Apriori with min_support = {min_sup}\")\n    \n    # Generate frequent itemsets\n    frequent_itemsets = apriori(df_encoded, min_support=min_sup, use_colnames=True)\n\n    if frequent_itemsets.empty:\n        print(\"No frequent itemsets found for min_support =\", min_sup)\n        continue\n\n    print(\"\\nFrequent Itemsets:\\n\", frequent_itemsets)\n\n    # Generate association rules only if frequent itemsets exist\n    rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\n    \n    if rules.empty:\n        print(\"No association rules found for min_support =\", min_sup)\n    else:\n        print(\"\\nAssociation Rules:\\n\", rules)\n\n# Save results\nfrequent_itemsets.to_csv(\"frequent_itemsets.csv\", index=False)\nrules.to_csv(\"association_rules.csv\", index=False)\n\nprint(\"\\nFrequent itemsets and association rules saved successfully!\")\n"
    },
    {
        "id": 1742497604652,
        "slip_no": "slip 15",
        "question": "Write Ajax program to fetch suggestions when is user is typing in a textbox. (eg like google suggestions. Hint create array of suggestions and matching string will be displayed)",
        "language": "html",
        "code": "// index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Live Search Suggestions</title>\n    <script>\n        function showSuggestions(str) {\n            if (str.length == 0) {\n                document.getElementById(\"suggestions\").innerHTML = \"\";\n                return;\n            }\n\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4 && xhr.status == 200) {\n                    document.getElementById(\"suggestions\").innerHTML = xhr.responseText;\n                }\n            };\n            xhr.open(\"GET\", \"suggestions.php?q=\" + str, true);\n            xhr.send();\n        }\n    </script>\n    <style>\n        #suggestions {\n            border: 1px solid #ddd;\n            max-width: 300px;\n            background: #f9f9f9;\n            position: absolute;\n        }\n        .suggestion-item {\n            padding: 8px;\n            cursor: pointer;\n        }\n        .suggestion-item:hover {\n            background: #ddd;\n        }\n    </style>\n</head>\n<body>\n    <h2>Search Suggestions (AJAX Example)</h2>\n    <input type=\"text\" onkeyup=\"showSuggestions(this.value)\" placeholder=\"Start typing...\" autocomplete=\"off\">\n    <div id=\"suggestions\"></div>\n</body>\n</html>\n\n\n// suggestions.php \n\n<?php\n// Sample data (You can replace this with data from a database)\n$suggestions = [\"Apple\", \"Amazon\", \"Android\", \"Angular\", \"Banana\", \"Bootstrap\", \"C++\", \"ChatGPT\", \"CSS\", \"Django\", \"Java\", \"JavaScript\", \"JSON\", \"Node.js\", \"Python\", \"PHP\", \"React\", \"SQL\", \"Vue.js\"];\n\n// Get query parameter\n$q = isset($_GET['q']) ? strtolower($_GET['q']) : \"\";\n\n// Find matches\n$matches = array_filter($suggestions, function($item) use ($q) {\n    return strpos(strtolower($item), $q) !== false;\n});\n\n// Display results\nforeach ($matches as $match) {\n    echo \"<div class='suggestion-item' onclick='selectSuggestion(\\\"$match\\\")'>$match</div>\";\n}\n?>\n\n<script>\n    function selectSuggestion(value) {\n        document.querySelector(\"input\").value = value;\n        document.getElementById(\"suggestions\").innerHTML = \"\";\n    }\n</script>\n"
    },
    {
        "id": 1742497892743,
        "slip_no": "slip 15",
        "question": "Create the following dataset in python & Convert the categorical values into numeric format.Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values.",
        "language": "python",
        "code": "import pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\n# Step 1: Create dataset\ndataset = [\n    ['Apple', 'Mango', 'Banana'],\n    ['Mango', 'Banana', 'Cabbage', 'Carrots'],\n    ['Mango', 'Banana', 'Carrots'],\n    ['Mango', 'Carrots']\n]\n\n# Step 2: Convert categorical values into numeric format\nte = TransactionEncoder()\nencoded_data = te.fit(dataset).transform(dataset)\ndf_encoded = pd.DataFrame(encoded_data, columns=te.columns_)\n\n# Step 3: Apply Apriori Algorithm with a lower min_support to avoid missing values\nfrequent_itemsets = apriori(df_encoded, min_support=0.3, use_colnames=True)\n\n# Step 4: Generate Association Rules, handling division errors\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\n\n# **Fix NaN issue by removing rules with NaN values**\nrules.dropna(inplace=True)\n\n# Display results\nprint(\"\\nFrequent Itemsets:\\n\", frequent_itemsets)\nprint(\"\\nAssociation Rules:\\n\", rules)\n"
    },
    {
        "id": 1743153934325,
        "slip_no": "slip 16",
        "question": "Consider text paragraph.So, keep working. Keep striving. Never give up. Fall down seven times, get up eight. Ease is a greater threat to progress than hardship. Ease is a greater threat to progress than hardship. So, keep moving, keep growing, keep learning. See you at work.Preprocess the text to remove any special characters and digits. Generate the summary using extractive summarization process.",
        "language": "python",
        "code": "import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom collections import defaultdict\n\n\ntext = \"\"\"So, keep working. Keep striving. Never give up. Fall down seven times, get up eight. Ease is a greater threat to progress than hardship. Ease is a greater threat to progress than hardship. So, keep moving, keep growing, keep learning. See you at work.\"\"\"\n\ntext_cleaned = re.sub(r'[^a-zA-Z\\s]', '', text)\nprint(\"Preprocessed Text:\\n\", text_cleaned)\n\nsentences = sent_tokenize(text)\nwords = word_tokenize(text_cleaned.lower())\n\nstop_words = set(stopwords.words('english'))\nwords = [word for word in words if word not in stop_words]\n\nword_freq = defaultdict(int)\nfor word in words:\n    word_freq[word] += 1\n\nsentence_scores = {}\nfor sent in sentences:\n    for word in word_tokenize(sent.lower()):\n        if word in word_freq.keys():\n            if sent not in sentence_scores:\n                sentence_scores[sent] = word_freq[word]\n            else:\n                sentence_scores[sent] += word_freq[word]\n\nsummary_sentences = sorted(sentence_scores, key=sentence_scores.get, reverse=True)[:2]\nsummary = ' '.join(summary_sentences)\n\nprint(\"\\nExtractive Summary:\\n\", summary)\n"
    },
    {
        "id": 1742533425467,
        "slip_no": "slip 17",
        "question": "rite a Java Script Program to show Hello Good Morning message onload event using alert box and display the Student registration from.",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Student Registration Form</title>\n    <script>\n        // Function to show alert on page load\n        window.onload = function() {\n            alert(\"Hello, Good Morning!\");\n        };\n    </script>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 30px;\n        }\n        form {\n            width: 300px;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 10px;\n            background-color: #f9f9f9;\n        }\n        label {\n            font-weight: bold;\n            display: block;\n            margin-top: 10px;\n        }\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        button {\n            margin-top: 15px;\n            width: 100%;\n            background-color: blue;\n            color: white;\n            padding: 10px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: darkblue;\n        }\n    </style>\n</head>\n<body>\n\n    <h2>Student Registration Form</h2>\n    \n    <form>\n        <label for=\"name\">Full Name:</label>\n        <input type=\"text\" id=\"name\" placeholder=\"Enter your name\" required>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" placeholder=\"Enter your email\" required>\n\n        <label for=\"dob\">Date of Birth:</label>\n        <input type=\"date\" id=\"dob\" required>\n\n        <label for=\"gender\">Gender:</label>\n        <select id=\"gender\" required>\n            <option value=\"\">Select Gender</option>\n            <option value=\"Male\">Male</option>\n            <option value=\"Female\">Female</option>\n            <option value=\"Other\">Other</option>\n        </select>\n\n        <label for=\"course\">Course:</label>\n        <input type=\"text\" id=\"course\" placeholder=\"Enter course name\" required>\n\n        <button type=\"submit\">Register</button>\n    </form>\n\n</body>\n</html>\n"
    },
    {
        "id": 1742534174304,
        "slip_no": "slip 17",
        "question": "Consider text paragraph.So, keep working. Keep striving. Never give up. Fall down seven times, get up eight. Ease is a greater threat to progress than hardship. Ease is a greater threat to progress than hardship. So, keep moving, keep growing, keep learning. See you at work.Preprocess the text to remove any special characters and digits. Generate the summary using extractive summarization process.",
        "language": "python",
        "code": "import re\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom collections import Counter\n\n# Ensure required resources are downloaded\nnltk.download('punkt')\nnltk.download('stopwords')\n\n# Given paragraph\ntext = \"\"\"So, keep working. Keep striving. Never give up. Fall down seven times, get up eight. \nEase is a greater threat to progress than hardship. Ease is a greater threat to progress than hardship. \nSo, keep moving, keep growing, keep learning. See you at work.\"\"\"\n\n# Step 1: Preprocess the text\ntext = re.sub(r'[^a-zA-Z\\s]', '', text)  # Remove special characters and digits\ntext = text.lower()  # Convert to lowercase\nsentences = sent_tokenize(text)  # Tokenize into sentences\nwords = word_tokenize(text)  # Tokenize words\n\n# Remove stopwords\nstop_words = set(stopwords.words(\"english\"))\nfiltered_words = [word for word in words if word not in stop_words]\n\n# Step 2: Compute word frequency\nword_freq = Counter(filtered_words)\n\n# Step 3: Assign scores to sentences\nsentence_scores = {}\nfor sentence in sentences:\n    for word in word_tokenize(sentence):\n        if word in word_freq:\n            sentence_scores[sentence] = sentence_scores.get(sentence, 0) + word_freq[word]\n\n# Step 4: Extract top-ranked sentences (Summary)\nsummary_sentences = sorted(sentence_scores, key=sentence_scores.get, reverse=True)[:2]  # Top 2 sentences\nsummary = ' '.join(summary_sentences)\n\n# Print the summary\nprint(\"Extractive Summary:\")\nprint(summary)\n"
    }
]
