[
    {
        "id": 1,
        "slip_no": "slip 1",
        "question": "Write the simulation program to implement demand paging and show the page scheduling and total number of page faults according to the LFU page replacement algorithm. Assume the memory of n frames. Reference String : 3,4,5,4,3,4,7,2,4,5,6,7,2,4,6.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <limits.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n// Function to find the index of the least frequently used page\nint findLFU(int frames[], int freq[], int n) {\n    int min = INT_MAX, min_index = -1;\n    for (int i = 0; i < n; i++) {\n        if (freq[i] < min) {\n            min = freq[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\n// Function to check if a page is present in the frames\nint isPresent(int frames[], int page, int n) {\n    for (int i = 0; i < n; i++) {\n        if (frames[i] == page)\n            return i;\n    }\n    return -1;\n}\n\nint main() {\n    int n, num_pages;\n    int frames[MAX_FRAMES], freq[MAX_FRAMES], ref_str[MAX_PAGES];\n    int page_faults = 0;\n\n    // Initialize frames and frequency\n    for (int i = 0; i < MAX_FRAMES; i++) {\n        frames[i] = -1;\n        freq[i] = 0;\n    }\n\n    // Input: number of frames\n    printf(\"Enter number of frames: \");\n    scanf(\"%d\", &n);\n\n    // Input: reference string\n    printf(\"Enter the number of pages in the reference string: \");\n    scanf(\"%d\", &num_pages);\n    printf(\"Enter reference string: \");\n    for (int i = 0; i < num_pages; i++) {\n        scanf(\"%d\", &ref_str[i]);\n    }\n\n    // Page scheduling and LFU algorithm\n    for (int i = 0; i < num_pages; i++) {\n        int page = ref_str[i];\n        int pos = isPresent(frames, page, n);\n\n        // Page is not present in memory, a page fault occurs\n        if (pos == -1) {\n            // Find a free frame or replace the least frequently used page\n            int replace_index = findLFU(frames, freq, n);\n\n            // Replace the page and update frequency\n            frames[replace_index] = page;\n            freq[replace_index] = 1; // Reset frequency for the new page\n            page_faults++;\n\n            // Display frames content\n            printf(\"Page %d caused a page fault. Frames: \", page);\n            for (int j = 0; j < n; j++) {\n                if (frames[j] != -1)\n                    printf(\"%d \", frames[j]);\n                else\n                    printf(\"- \");\n            }\n            printf(\"\\n\");\n        } else {\n            // Page is already in memory, just update its frequency\n            freq[pos]++;\n            printf(\"Page %d found in memory. No page fault.\\n\", page);\n        }\n    }\n\n    printf(\"\\nTotal page faults: %d\\n\", page_faults);\n    return 0;\n}"
    },
    {
        "id": 2,
        "slip_no": "slip 1",
        "question": "Write a C program to implement the shell which displays the command prompt 'myshell$'. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command 'typeline' as typeline +n filename :- To print first n lines in the file. typeline -a filename :- To print all lines in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \\n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \\n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to handle the 'typeline' command\nvoid typeline(int argc, char **args) {\n    if (argc != 3) {\n        printf(\"Usage: typeline +n filename OR typeline -a filename\\n\");\n        return;\n    }\n\n    char *filename = args[2];\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int count = 0;\n\n    if (strcmp(args[1], \"-a\") == 0) {\n        // Print all lines\n        while (fgets(line, sizeof(line), file)) {\n            printf(\"%s\", line);\n        }\n    } else if (args[1][0] == '+' && atoi(args[1] + 1) > 0) {\n        // Print first n lines\n        int n = atoi(args[1] + 1);\n        while (fgets(line, sizeof(line), file) && count < n) {\n            printf(\"%s\", line);\n            count++;\n        }\n    } else {\n        printf(\"Invalid typeline command\\n\");\n    }\n\n    fclose(file);\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for 'exit' command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Handle the 'typeline' command\n        if (strcmp(args[0], \"typeline\") == 0) {\n            typeline(MAX_ARGS, args);\n            continue;\n        }\n\n        // Fork a child process to execute the command\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            exit(1);\n        } else if (pid == 0) {\n            // Child process: Execute the command\n            execvp(args[0], args);\n            // If execvp fails\n            perror(\"Command execution failed\");\n            exit(1);\n        } else {\n            // Parent process: Wait for the child to finish\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 3,
        "slip_no": "slip 2",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the FIFO page replacement algorithm. Assume the memory of n frames. Reference String: 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6.",
        "language": "c",
        "code": "#include <stdio.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to check if a page is present in memory\nint isPageInMemory(int page, int frames[], int n) {\n    for (int i = 0; i < n; i++) {\n        if (frames[i] == page) {\n            return 1; // Page found in memory\n        }\n    }\n    return 0; // Page not found\n}\n\n// Function to print the current state of frames\nvoid printFrames(int frames[], int n) {\n    for (int i = 0; i < n; i++) {\n        if (frames[i] == -1) {\n            printf(\"- \");\n        } else {\n            printf(\"%d \", frames[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n; // Number of frames\n    int frames[MAX_FRAMES], reference_string[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};\n    int num_pages = sizeof(reference_string) / sizeof(reference_string[0]);\n    int page_faults = 0;\n    int current_frame = 0; // To keep track of the next frame to replace (FIFO)\n\n    // Input: number of frames\n    printf(\"Enter the number of frames: \");\n    scanf(\"%d\", &n);\n\n    // Initialize frames to -1 (indicating they are empty)\n    for (int i = 0; i < n; i++) {\n        frames[i] = -1;\n    }\n\n    // FIFO Page Replacement Algorithm\n    for (int i = 0; i < num_pages; i++) {\n        int page = reference_string[i];\n\n        // If the page is not already in memory, it's a page fault\n        if (!isPageInMemory(page, frames, n)) {\n            // Replace the page using FIFO\n            frames[current_frame] = page;\n            current_frame = (current_frame + 1) % n; // Move to the next frame in a circular manner\n            page_faults++;\n\n            printf(\"Page %d caused a page fault. Frames: \", page);\n            printFrames(frames, n);\n        } else {\n            printf(\"Page %d found in memory. No page fault.\\n\", page);\n        }\n    }\n\n    printf(\"\\nTotal number of page faults: %d\\n\", page_faults);\n\n    return 0;\n}"
    },
    {
        "id": 4,
        "slip_no": "slip 2",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following ‘list’ commands as myshell$ list f dirname :- To print names of all the files in current directory. myshell$ list n dirname :- To print the number of all entries in the current directory.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <dirent.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \\n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \\n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to handle the `list` command\nvoid listDirectory(int argc, char **args) {\n    if (argc != 3) {\n        printf(\"Usage: list f dirname OR list n dirname\\n\");\n        return;\n    }\n\n    char *dirname = args[2];\n    DIR *dir = opendir(dirname);\n    if (!dir) {\n        perror(\"Error opening directory\");\n        return;\n    }\n\n    struct dirent *entry;\n    int count = 0;\n\n    if (strcmp(args[1], \"f\") == 0) {\n        // Print names of all files in the directory\n        while ((entry = readdir(dir)) != NULL) {\n            if (entry->d_name[0] != '.') { // Exclude hidden files\n                printf(\"%s\\n\", entry->d_name);\n            }\n        }\n    } else if (strcmp(args[1], \"n\") == 0) {\n        // Count all entries in the directory\n        while ((entry = readdir(dir)) != NULL) {\n            count++;\n        }\n        printf(\"Total entries: %d\\n\", count);\n    } else {\n        printf(\"Invalid list command\\n\");\n    }\n\n    closedir(dir);\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n        // Handle the `list` command\n        if (strcmp(args[0], \"list\") == 0) {\n            listDirectory(MAX_ARGS, args);\n            continue;\n        }\n        // Fork a child process to execute the command\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            exit(1);\n        } else if (pid == 0) {\n            // Child process: Execute the command\n            execvp(args[0], args);\n            // If execvp fails\n            perror(\"Command execution failed\");\n            exit(1);\n        } else {\n            // Parent process: Wait for the child to finish\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 5,
        "slip_no": "slip 3",
        "question": "Write the simulation program to implement demand paging and show the page scheduling and total number of page faults according to the LRU (using counter method) page replacement algorithm. Assume the memory of n frames. Reference String : 3, 5, 7, 2, 5, 1, 2, 3, 1, 3, 5, 3, 1, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to check if a page is present in memory\nint isPageInMemory(int page, int frames[], int n) {\n    for (int i = 0; i < n; i++) {\n        if (frames[i] == page) {\n            return 1; // Page found in memory\n        }\n    }\n    return 0; // Page not found\n}\n\n// Function to print the current state of frames\nvoid printFrames(int frames[], int n) {\n    for (int i = 0; i < n; i++) {\n        if (frames[i] == -1) {\n            printf(\"- \");\n        } else {\n            printf(\"%d \", frames[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\n// Function to find the least recently used page\nint findLRU(int frames[], int lastUsed[], int n) {\n    int minIndex = 0, minCounter = lastUsed[0];\n    for (int i = 1; i < n; i++) {\n        if (lastUsed[i] < minCounter) {\n            minCounter = lastUsed[i];\n            minIndex = i;\n        }\n    }\n    return minIndex; // Return index of the least recently used page\n}\n\nint main() {\n    int n; // Number of frames\n    int frames[MAX_FRAMES], lastUsed[MAX_FRAMES];\n    int reference_string[] = {3, 5, 7, 2, 5, 1, 2, 3, 1, 3, 5, 3, 1, 6, 2};\n    int num_pages = sizeof(reference_string) / sizeof(reference_string[0]);\n    int page_faults = 0;\n\n    // Input: number of frames\n    printf(\"Enter the number of frames: \");\n    scanf(\"%d\", &n);\n\n    // Initialize frames to -1 (indicating they are empty)\n    for (int i = 0; i < n; i++) {\n        frames[i] = -1;\n        lastUsed[i] = 0; // Initialize last used counters\n    }\n\n    // LRU Page Replacement Algorithm\n    for (int i = 0; i < num_pages; i++) {\n        int page = reference_string[i];\n\n        // If the page is not already in memory, it's a page fault\n        if (!isPageInMemory(page, frames, n)) {\n            int replaceIndex = findLRU(frames, lastUsed, n); // Find LRU page index\n\n            // Replace the page\n            frames[replaceIndex] = page;\n            lastUsed[replaceIndex] = i; // Update last used counter for the replaced page\n            page_faults++;\n\n            printf(\"Page %d caused a page fault. Frames: \", page);\n            printFrames(frames, n);\n        } else {\n            // If the page is found, update the last used counter\n            for (int j = 0; j < n; j++) {\n                if (frames[j] == page) {\n                    lastUsed[j] = i; // Update last used counter for the current page\n                    break;\n                }\n            }\n            printf(\"Page %d found in memory. No page fault.\\n\", page);\n        }\n    }\n\n    printf(\"\\nTotal number of page faults: %d\\n\", page_faults);\n\n    return 0;\n}"
    },
    {
        "id": 6,
        "slip_no": "slip 3",
        "question": "Write a program to implement the toy shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands: \n count c filename :- To print number of characters in the file. \n count w filename :- To print number of words in the file. \n count l filename :- To print number of lines in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \\n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \\n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to count characters, words, or lines in a file\nvoid countFile(const char *option, const char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    int characters = 0, words = 0, lines = 0;\n    char ch;\n    int inWord = 0;\n\n    while ((ch = fgetc(file)) != EOF) {\n        characters++;\n        if (ch == '\\n') {\n            lines++;\n        }\n        if (ch == ' ' || ch == '\\n' || ch == '\\t') {\n            if (inWord) {\n                inWord = 0;\n                words++;\n            }\n        } else {\n            inWord = 1;\n        }\n    }\n    if (inWord) {\n        words++; // Count the last word if the file doesn't end with a space\n    }\n\n    fclose(file);\n\n    // Print the requested count\n    if (strcmp(option, \"c\") == 0) {\n        printf(\"Character count: %d\\n\", characters);\n    } else if (strcmp(option, \"w\") == 0) {\n        printf(\"Word count: %d\\n\", words);\n    } else if (strcmp(option, \"l\") == 0) {\n        printf(\"Line count: %d\\n\", lines);\n    } else {\n        printf(\"Invalid count option.\\n\");\n    }\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n        // Check if the command is 'count'\n        if (strcmp(args[0], \"count\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                countFile(args[1], args[2]); // Call count function\n            } else {\n                printf(\"Usage: count [c|w|l] filename\\n\");\n            }\n            continue;\n        }\n        // Fork a child process to execute the command\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            exit(1);\n        } else if (pid == 0) {\n            // Child process: Execute the command\n            execvp(args[0], args);\n            // If execvp fails\n            perror(\"Command execution failed\");\n            exit(1);\n        } else {\n            // Parent process: Wait for the child to finish\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 7,
        "slip_no": "slip 4",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the MFU page replacement algorithm. Assume the memory of n frames. Reference String: 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Structure to represent a page\ntypedef struct {\n    int page_number;\n    int frequency; // To track the number of accesses\n} Page;\n\n// Function to find the index of the most frequently used page\nint findMFU(Page pages[], int frame_count) {\n    int max_frequency = pages[0].frequency;\n    int mfu_index = 0;\n\n    for (int i = 1; i < frame_count; i++) {\n        if (pages[i].frequency > max_frequency) {\n            max_frequency = pages[i].frequency;\n            mfu_index = i;\n        }\n    }\n    return mfu_index;\n}\n\n// Function to simulate demand paging using MFU page replacement\nvoid simulateMFU(int reference_string[], int ref_length, int frame_count) {\n    Page pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n\n    // Initialize the page frames\n    for (int i = 0; i < MAX_FRAMES; i++) {\n        pages[i].page_number = -1; // -1 indicates an empty frame\n        pages[i].frequency = 0;\n    }\n\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        int found = 0;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j].page_number == current_page) {\n                pages[j].frequency++; // Increment frequency\n                found = 1;\n                break;\n            }\n        }\n\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames].page_number = current_page;\n                pages[current_frames].frequency = 1;\n                current_frames++;\n            } else {\n                // If memory is full, replace the most frequently used page\n                int mfu_index = findMFU(pages, frame_count);\n                pages[mfu_index].page_number = current_page;\n                pages[mfu_index].frequency = 1; // Reset frequency for the new page\n            }\n        }\n\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d(%d) \", pages[j].page_number, pages[j].frequency);\n        }\n        printf(\"\\n\");\n    }\n\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateMFU(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 8,
        "slip_no": "slip 4",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands. myshell$ search a filename pattern :- To search all the occurrence of pattern in the file. myshell$ search c filename pattern :- To count the number of occurrence of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \\n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \\n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to search for occurrences of a pattern in a file\nvoid searchInFile(const char *filename, const char *pattern, int count) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int occurrences = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        char *ptr = line;\n        while ((ptr = strstr(ptr, pattern)) != NULL) {\n            occurrences++;\n            ptr += strlen(pattern); // Move past the last found occurrence\n        }\n    }\n\n    fclose(file);\n\n    if (count) {\n        printf(\"Occurrences of pattern '%s': %d\\n\", pattern, occurrences);\n    } else {\n        if (occurrences > 0) {\n            printf(\"Pattern '%s' found in file '%s'.\\n\", pattern, filename);\n        } else {\n            printf(\"Pattern '%s' not found in file '%s'.\\n\", pattern, filename);\n        }\n    }\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n        // Check for `search` command\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                if (strcmp(args[1], \"c\") == 0) {\n                    // Count occurrences\n                    if (args[3] != NULL) {\n                        searchInFile(args[2], args[3], 1); // Count mode\n                    } else {\n                        printf(\"Usage: search c filename pattern\\n\");\n                    }\n                } else {\n                    // Search mode\n                    searchInFile(args[1], args[2], 0); // Search mode\n                }\n            } else {\n                printf(\"Usage: search [c] filename pattern\\n\");\n            }\n            continue;\n        }\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            exit(1);\n        } else if (pid == 0) {\n            // Child process: Execute the command\n            execvp(args[0], args);\n            // If execvp fails\n            perror(\"Command execution failed\");\n            exit(1);\n        } else {\n            // Parent process: Wait for the child to finish\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 9,
        "slip_no": "slip 5",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the optimal page replacement algorithm. Assume the memory of n frames. Reference String : 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to find the index of the page to be replaced using the Optimal page replacement algorithm\nint findOptimal(int pages[], int n, int frame_count, int current_index) {\n    int optimal_index = -1;\n    int farthest = current_index;\n\n    for (int i = 0; i < frame_count; i++) {\n        int j;\n        // Check if the page is in the frame\n        for (j = current_index; j < n; j++) {\n            if (pages[j] == pages[i]) {\n                // Found the page in future references\n                if (j > farthest) {\n                    farthest = j;\n                    optimal_index = i;\n                }\n                break;\n            }\n        }\n        // If the page is not found in the future references, it can be replaced\n        if (j == n) {\n            return i; // Replace this page\n        }\n    }\n    // If all pages are found in future references, replace the optimal index\n    return (optimal_index != -1) ? optimal_index : 0;\n}\n\n// Function to simulate demand paging using the Optimal page replacement algorithm\nvoid simulateOptimal(int reference_string[], int ref_length, int frame_count) {\n    int pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n\n    // Initialize the page frames\n    for (int i = 0; i < frame_count; i++) {\n        pages[i] = -1; // -1 indicates an empty frame\n    }\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        int found = 0;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j] == current_page) {\n                found = 1; // Page hit\n                break;\n            }\n        }\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames] = current_page;\n                current_frames++;\n            } else {\n                // If memory is full, replace the optimal page\n                int optimal_index = findOptimal(pages, ref_length, frame_count, i + 1);\n                pages[optimal_index] = current_page; // Replace the optimal page\n            }\n        }\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d \", pages[j]);\n        }\n        printf(\"\\n\");\n    }\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateOptimal(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 10,
        "slip_no": "slip 5",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands. myshell$ search f filename pattern :- To display first occurrence of pattern in the file. myshell$ search c filename pattern :- To count the number of occurrence of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to search for the first occurrence of a pattern in a file\nvoid searchInFile(const char *filename, const char *pattern, int count) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int occurrences = 0;\n    int first_occurrence_line = -1;\n    int line_number = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        line_number++;\n        char *ptr = strstr(line, pattern);\n        if (ptr != NULL) {\n            occurrences++;\n            if (first_occurrence_line == -1) {\n                first_occurrence_line = line_number;\n            }\n            if (count) {\n                // If counting, continue checking\n                continue;\n            } else {\n                printf(\"Pattern '%s' found in file '%s' at line %d.\\n\", pattern, filename, line_number);\n                fclose(file);\n                return;\n            }\n        }\n    }\n\n    fclose(file);\n\n    if (count) {\n        printf(\"Total occurrences of pattern '%s': %d\\n\", pattern, occurrences);\n    } else if (first_occurrence_line == -1) {\n        printf(\"Pattern '%s' not found in file '%s'.\\n\", pattern, filename);\n    }\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Check for `search` command\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                if (strcmp(args[1], \"f\") == 0) {\n                    // First occurrence\n                    if (args[3] != NULL) {\n                        searchInFile(args[2], args[3], 0); // Search mode\n                    } else {\n                        printf(\"Usage: search f filename pattern\\n\");\n                    }\n                } else if (strcmp(args[1], \"c\") == 0) {\n                    // Count occurrences\n                    if (args[3] != NULL) {\n                        searchInFile(args[2], args[3], 1); // Count mode\n                    } else {\n                        printf(\"Usage: search c filename pattern\\n\");\n                    }\n                } else {\n                    printf(\"Invalid search option. Use 'f' for first occurrence or 'c' for count.\\n\");\n                }\n            } else {\n                printf(\"Usage: search [f/c] filename pattern\\n\");\n            }\n            continue;\n        }\n\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            exit(1);\n        } else if (pid == 0) {\n            // Child process: Execute the command\n            execvp(args[0], args);\n            // If execvp fails\n            perror(\"Command execution failed\");\n            exit(1);\n        } else {\n            // Parent process: Wait for the child to finish\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 11,
        "slip_no": "slip 6",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the MRU page replacement algorithm. Assume the memory of n frames. Reference String: 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to simulate demand paging using the MRU page replacement algorithm\nvoid simulateMRU(int reference_string[], int ref_length, int frame_count) {\n    int pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n\n    // Initialize the page frames\n    for (int i = 0; i < frame_count; i++) {\n        pages[i] = -1; // -1 indicates an empty frame\n    }\n\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        bool found = false;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j] == current_page) {\n                found = true; // Page hit\n                break;\n            }\n        }\n\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames] = current_page;\n                current_frames++;\n            } else {\n                // If memory is full, replace the MRU page\n                int mru_index = 0;\n                for (int j = 1; j < frame_count; j++) {\n                    if (pages[j] > pages[mru_index]) {\n                        mru_index = j;\n                    }\n                }\n                pages[mru_index] = current_page; // Replace the MRU page\n            }\n        }\n\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d \", pages[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateMRU(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 12,
        "slip_no": "slip 6",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally, it should interpret the following commands: myshell$ search f filename pattern :- To display first occurrence of pattern in the file. myshell$ search a filename pattern :- To search all the occurrences of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to search for the first occurrence of a pattern in a file\nvoid searchInFile(const char *filename, const char *pattern, int all) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int line_number = 0;\n    int found = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        line_number++;\n        char *ptr = strstr(line, pattern);\n        if (ptr != NULL) {\n            found = 1;\n            if (!all) {\n                printf(\"Pattern '%s' found in file '%s' at line %d.\\n\", pattern, filename, line_number);\n                fclose(file);\n                return;\n            }\n            printf(\"Pattern '%s' found in file '%s' at line %d.\\n\", pattern, filename, line_number);\n        }\n    }\n\n    fclose(file);\n\n    if (found) {\n        printf(\"All occurrences of pattern '%s' have been displayed.\\n\", pattern);\n    } else {\n        printf(\"Pattern '%s' not found in file '%s'.\\n\", pattern, filename);\n    }\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Check for `search` command\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                if (strcmp(args[1], \"f\") == 0) {\n                    // First occurrence\n                    if (args[3] != NULL) {\n                        searchInFile(args[2], args[3], 0); // Search mode\n                    } else {\n                        printf(\"Usage: search f filename pattern\\n\");\n                    }\n                } else if (strcmp(args[1], \"a\") == 0) {\n                    // All occurrences\n                    if (args[2] != NULL) {\n                        searchInFile(args[2], args[3], 1); // All mode\n                    } else {\n                        printf(\"Usage: search a filename pattern\\n\");\n                    }\n                } else {\n                    printf(\"Invalid search option. Use 'f' for first occurrence or 'a' for all occurrences.\\n\");\n                }\n            } else {\n                printf(\"Usage: search [f/a] filename pattern\\n\");\n            }\n            continue;\n        }\n\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            exit(1);\n        } else if (pid == 0) {\n            // Child process: Execute the command\n            execvp(args[0], args);\n            perror(\"Command execution failed\");\n            exit(1);\n        } else {\n            // Parent process: Wait for the child to finish\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 13,
        "slip_no": "slip 7",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the Optimal page replacement algorithm. Assume the memory of n frames. Reference String: 7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to find the index of the page to be replaced using the Optimal page replacement algorithm\nint findOptimal(int pages[], int n, int frame_count, int current_index) {\n    int optimal_index = -1;\n    int farthest = current_index;\n\n    for (int i = 0; i < frame_count; i++) {\n        int j;\n        // Check if the page is in the frame\n        for (j = current_index; j < n; j++) {\n            if (pages[i] == pages[j]) {\n                // Found the page in future references\n                if (j > farthest) {\n                    farthest = j;\n                    optimal_index = i;\n                }\n                break;\n            }\n        }\n        // If the page is not found in the future references, it can be replaced\n        if (j == n) {\n            return i; // Replace this page\n        }\n    }\n    // If all pages are found in future references, replace the optimal index\n    return (optimal_index != -1) ? optimal_index : 0;\n}\n\n// Function to simulate demand paging using the Optimal page replacement algorithm\nvoid simulateOptimal(int reference_string[], int ref_length, int frame_count) {\n    int pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n\n    // Initialize the page frames\n    for (int i = 0; i < frame_count; i++) {\n        pages[i] = -1; // -1 indicates an empty frame\n    }\n\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        int found = 0;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j] == current_page) {\n                found = 1; // Page hit\n                break;\n            }\n        }\n\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames] = current_page;\n                current_frames++;\n            } else {\n                // If memory is full, replace the optimal page\n                int optimal_index = findOptimal(pages, ref_length, frame_count, i + 1);\n                pages[optimal_index] = current_page; // Replace the optimal page\n            }\n        }\n\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d \", pages[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6, 2};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateOptimal(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 14,
        "slip_no": "slip 7",
        "question": "Write a program to implement shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally, it should interpret the following commands: myshell$ search a filename pattern :- To search all the occurrences of pattern in the file. myshell$ search c filename pattern :- To count the number of occurrences of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to search for all occurrences of a pattern in a file\nvoid searchInFile(const char *filename, const char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int line_number = 0;\n    int found = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        line_number++;\n        if (strstr(line, pattern) != NULL) {\n            found = 1;\n            printf(\"Pattern '%s' found in file '%s' at line %d.\\n\", pattern, filename, line_number);\n        }\n    }\n\n    fclose(file);\n\n    if (!found) {\n        printf(\"Pattern '%s' not found in file '%s'.\\n\", pattern, filename);\n    }\n}\n\n// Function to count occurrences of a pattern in a file\nint countOccurrencesInFile(const char *filename, const char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return -1;\n    }\n\n    char line[MAX_LINE];\n    int count = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        char *ptr = line;\n        while ((ptr = strstr(ptr, pattern)) != NULL) {\n            count++;\n            ptr++;\n        }\n    }\n\n    fclose(file);\n    return count;\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Check for `search` command\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                if (strcmp(args[1], \"a\") == 0) {\n                    // All occurrences\n                    searchInFile(args[2], args[3]); // Search mode\n                } else if (strcmp(args[1], \"c\") == 0) {\n                    // Count occurrences\n                    int count = countOccurrencesInFile(args[2], args[3]);\n                    if (count != -1) {\n                        printf(\"Total occurrences of '%s' in '%s': %d\\n\", args[3], args[2], count);\n                    }\n                } else {\n                    printf(\"Invalid search option. Use 'a' for all occurrences or 'c' for count.\\n\");\n                }\n            } else {\n                printf(\"Usage: search [a/c] filename pattern\\n\");\n            }\n            continue;\n        }\n\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            continue;\n        } else if (pid == 0) {\n            // In child process\n            execvp(args[0], args);\n            perror(\"Execution failed\"); // If execvp returns, there was an error\n            exit(1);\n        } else {\n            // In parent process\n            wait(NULL); // Wait for child process to finish\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 15,
        "slip_no": "slip 8",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the LRU page replacement algorithm. Assume the memory of n frames. Reference String: 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to find the index of the page to be replaced using the LRU page replacement algorithm\nint findLRU(int pages[], int n, int frame_count, int current_index) {\n    int lru_index = -1;\n    int lru_time = -1;\n\n    for (int i = 0; i < frame_count; i++) {\n        // Find the least recently used page\n        if (pages[i] == -1) {\n            return i; // If there is an empty frame\n        }\n        int last_used_time = 0;\n        for (int j = current_index - 1; j >= 0; j--) {\n            if (pages[i] == pages[j]) {\n                last_used_time = j;\n                break;\n            }\n        }\n        if (last_used_time > lru_time) {\n            lru_time = last_used_time;\n            lru_index = i;\n        }\n    }\n    return lru_index;\n}\n\n// Function to simulate demand paging using the LRU page replacement algorithm\nvoid simulateLRU(int reference_string[], int ref_length, int frame_count) {\n    int pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n\n    // Initialize the page frames\n    for (int i = 0; i < frame_count; i++) {\n        pages[i] = -1; // -1 indicates an empty frame\n    }\n\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        int found = 0;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j] == current_page) {\n                found = 1; // Page hit\n                break;\n            }\n        }\n\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames] = current_page;\n                current_frames++;\n            } else {\n                // If memory is full, replace the least recently used page\n                int lru_index = findLRU(pages, ref_length, frame_count, i);\n                pages[lru_index] = current_page; // Replace the LRU page\n            }\n        }\n\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d \", pages[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateLRU(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 16,
        "slip_no": "slip 8",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands: myshell$ search f filename pattern :- To display first occurrence of pattern in the file. myshell$ search c filename pattern :- To count the number of occurrences of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to search for the first occurrence of a pattern in a file\nvoid searchInFile(const char *filename, const char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int line_number = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        line_number++;\n        if (strstr(line, pattern) != NULL) {\n            printf(\"Pattern '%s' found in file '%s' at line %d.\\n\", pattern, filename, line_number);\n            break;\n        }\n    }\n\n    fclose(file);\n}\n\n// Function to count occurrences of a pattern in a file\nint countOccurrencesInFile(const char *filename, const char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return -1;\n    }\n\n    char line[MAX_LINE];\n    int count = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        char *ptr = line;\n        while ((ptr = strstr(ptr, pattern)) != NULL) {\n            count++;\n            ptr++;\n        }\n    }\n\n    fclose(file);\n    return count;\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Check for `search` command\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                if (strcmp(args[1], \"f\") == 0) {\n                    // First occurrence\n                    searchInFile(args[2], args[3]); // Search mode\n                } else if (strcmp(args[1], \"c\") == 0) {\n                    // Count occurrences\n                    int count = countOccurrencesInFile(args[2], args[3]);\n                    if (count != -1) {\n                        printf(\"Total occurrences of '%s' in '%s': %d\\n\", args[3], args[2], count);\n                    }\n                } else {\n                    printf(\"Invalid search option. Use 'f' for first occurrence or 'c' for count.\\n\");\n                }\n            } else {\n                printf(\"Usage: search [f/c] filename pattern\\n\");\n            }\n            continue;\n        }\n\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            continue;\n        } else if (pid == 0) {\n            // In child process\n            execvp(args[0], args);\n            perror(\"Execution failed\"); // If execvp returns, there was an error\n            exit(1);\n        } else {\n            // In parent process\n            wait(NULL); // Wait for child process to finish\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 17,
        "slip_no": "slip 9",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the FIFO page replacement algorithm. Assume the memory of n frames. Reference String: 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to simulate demand paging using the FIFO page replacement algorithm\nvoid simulateFIFO(int reference_string[], int ref_length, int frame_count) {\n    int pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n    int page_index = 0; // To track the next page to replace\n\n    // Initialize the page frames\n    for (int i = 0; i < frame_count; i++) {\n        pages[i] = -1; // -1 indicates an empty frame\n    }\n\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        int found = 0;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j] == current_page) {\n                found = 1; // Page hit\n                break;\n            }\n        }\n\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames] = current_page;\n                current_frames++;\n            } else {\n                // If memory is full, replace the oldest page (FIFO)\n                pages[page_index] = current_page; // Replace the oldest page\n                page_index = (page_index + 1) % frame_count; // Move to the next index\n            }\n        }\n\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d \", pages[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateFIFO(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 18,
        "slip_no": "slip 9",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands: myshell$ search f filename pattern :- To display first occurrence of pattern in the file. myshell$ search a filename pattern :- To search all the occurrences of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to search for the first occurrence of a pattern in a file\nvoid searchInFile(const char *filename, const char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return;\n    }\n\n    char line[MAX_LINE];\n    int line_number = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        line_number++;\n        if (strstr(line, pattern) != NULL) {\n            printf(\"Pattern '%s' found in file '%s' at line %d.\\n\", pattern, filename, line_number);\n            break;\n        }\n    }\n\n    fclose(file);\n}\n\n// Function to count occurrences of a pattern in a file\nint countOccurrencesInFile(const char *filename, const char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Error opening file\");\n        return -1;\n    }\n\n    char line[MAX_LINE];\n    int count = 0;\n\n    // Read the file line by line\n    while (fgets(line, sizeof(line), file)) {\n        char *ptr = line;\n        while ((ptr = strstr(ptr, pattern)) != NULL) {\n            count++;\n            ptr++;\n        }\n    }\n\n    fclose(file);\n    return count;\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Check for `search` command\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] != NULL && args[2] != NULL) {\n                if (strcmp(args[1], \"f\") == 0) {\n                    // First occurrence\n                    searchInFile(args[2], args[3]); // Search mode\n                } else if (strcmp(args[1], \"a\") == 0) {\n                    // Search all occurrences\n                    int count = countOccurrencesInFile(args[2], args[3]);\n                    if (count != -1) {\n                        printf(\"Total occurrences of '%s' in '%s': %d\\n\", args[3], args[2], count);\n                    }\n                } else {\n                    printf(\"Invalid search option. Use 'f' for first occurrence or 'a' for all occurrences.\\n\");\n                }\n            } else {\n                printf(\"Usage: search [f/a] filename pattern\\n\");\n            }\n            continue;\n        }\n\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            continue;\n        } else if (pid == 0) {\n            // In child process\n            execvp(args[0], args);\n            perror(\"Execution failed\"); // If execvp returns, there was an error\n            exit(1);\n        } else {\n            // In parent process\n            wait(NULL); // Wait for child process to finish\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 19,
        "slip_no": "slip 10",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the FIFO page replacement algorithm. Assume the memory of n frames. Reference String: 2, 4, 5, 6, 9, 4, 7, 3, 4, 5, 6, 7, 2, 4, 7, 1.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_FRAMES 10\n#define MAX_PAGES 100\n\n// Function to simulate demand paging using the FIFO page replacement algorithm\nvoid simulateFIFO(int reference_string[], int ref_length, int frame_count) {\n    int pages[MAX_FRAMES];\n    int page_faults = 0;\n    int current_frames = 0;\n    int page_index = 0; // To track the next page to replace\n\n    // Initialize the page frames\n    for (int i = 0; i < frame_count; i++) {\n        pages[i] = -1; // -1 indicates an empty frame\n    }\n\n    // Process the reference string\n    for (int i = 0; i < ref_length; i++) {\n        int current_page = reference_string[i];\n        int found = 0;\n\n        // Check if the page is already in memory\n        for (int j = 0; j < current_frames; j++) {\n            if (pages[j] == current_page) {\n                found = 1; // Page hit\n                break;\n            }\n        }\n\n        // Page fault occurs\n        if (!found) {\n            page_faults++;\n            if (current_frames < frame_count) {\n                // If there is space in memory, add the new page\n                pages[current_frames] = current_page;\n                current_frames++;\n            } else {\n                // If memory is full, replace the oldest page (FIFO)\n                pages[page_index] = current_page; // Replace the oldest page\n                page_index = (page_index + 1) % frame_count; // Move to the next index\n            }\n        }\n\n        // Display the current page frames\n        printf(\"Reference: %d -> Frames: \", current_page);\n        for (int j = 0; j < current_frames; j++) {\n            printf(\"%d \", pages[j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // Print the total number of page faults\n    printf(\"Total Page Faults: %d\\n\", page_faults);\n}\n\nint main() {\n    int reference_string[] = {2, 4, 5, 6, 9, 4, 7, 3, 4, 5, 6, 7, 2, 4, 7, 1};\n    int ref_length = sizeof(reference_string) / sizeof(reference_string[0]);\n    int frame_count = 3; // Set the number of frames in memory\n\n    simulateFIFO(reference_string, ref_length, frame_count);\n\n    return 0;\n}"
    },
    {
        "id": 20,
        "slip_no": "slip 10",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following ‘list’ commands as myshell$ list f dirname :- To print names of all the files in current directory. myshell$ list i dirname :- To print names and inodes of the files in the current directory.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <sys/stat.h>\n\n#define MAX_ARGS 100\n#define MAX_LINE 1024\n\n// Function to tokenize the command input\nvoid tokenize(char *input, char **args) {\n    char *token = strtok(input, \" \n\");\n    int i = 0;\n    while (token != NULL) {\n        args[i++] = token;\n        token = strtok(NULL, \" \n\");\n    }\n    args[i] = NULL;\n}\n\n// Function to list files in a directory\nvoid listFiles(const char *dirname, int show_inodes) {\n    DIR *dir;\n    struct dirent *entry;\n    struct stat fileStat;\n    char path[MAX_LINE];\n\n    // Open the directory\n    dir = opendir(dirname);\n    if (dir == NULL) {\n        perror(\"Error opening directory\");\n        return;\n    }\n\n    // Read and list the files\n    while ((entry = readdir(dir)) != NULL) {\n        // Skip current and parent directory entries\n        if (strcmp(entry->d_name, \".\") == 0 || strcmp(entry->d_name, \"..\") == 0) {\n            continue;\n        }\n\n        // Print file name or inode\n        if (show_inodes) {\n            snprintf(path, sizeof(path), \"%s/%s\", dirname, entry->d_name);\n            if (stat(path, &fileStat) == 0) {\n                printf(\"File: %s, Inode: %lu\\n\", entry->d_name, fileStat.st_ino);\n            }\n        } else {\n            printf(\"%s\\n\", entry->d_name);\n        }\n    }\n\n    closedir(dir);\n}\n\nint main() {\n    char input[MAX_LINE];\n    char *args[MAX_ARGS];\n\n    while (1) {\n        printf(\"myshell$ \"); // Display the shell prompt\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit if EOF is encountered\n        }\n\n        // Tokenize the input\n        tokenize(input, args);\n\n        if (args[0] == NULL) {\n            continue; // Empty command, continue to next loop iteration\n        }\n\n        // Check for `exit` command to quit the shell\n        if (strcmp(args[0], \"exit\") == 0) {\n            break;\n        }\n\n        // Check for `list` command\n        if (strcmp(args[0], \"list\") == 0 && args[1] != NULL) {\n            if (strcmp(args[1], \"f\") == 0 && args[2] != NULL) {\n                listFiles(args[2], 0); // List file names\n            } else if (strcmp(args[1], \"i\") == 0 && args[2] != NULL) {\n                listFiles(args[2], 1); // List file names and inodes\n            } else {\n                printf(\"Usage: list [f/i] dirname\\n\");\n            }\n            continue;\n        }\n\n        // Fork a child process to execute other commands\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"Fork failed\");\n            continue;\n        } else if (pid == 0) {\n            // In child process\n            execvp(args[0], args);\n            perror(\"Execution failed\"); // If execvp returns, there was an error\n            exit(1);\n        } else {\n            // In parent process\n            wait(NULL); // Wait for child process to finish\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": 21,
        "slip_no": "slip 11",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the LFU page replacement algorithm. Assume the memory of n frames. Reference String : 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6",
        "language": "c",
        "code": "#include<stdio.h>\n#define MAX 50\nvoid main() {\n    int reference_string[MAX], page_faults = 0, m, n, s, pages, frames;\n    printf(\"Enter number of pages: \");\n    scanf(\"%d\", &pages);\n    printf(\"Enter reference string: \");\n    for(m = 0; m < pages; m++) {\n        scanf(\"%d\", &reference_string[m]);\n    }\n    printf(\"Enter number of frames: \");\n    scanf(\"%d\", &frames);\n    int temp[frames];\n    for(m = 0; m < frames; m++) {\n        temp[m] = -1;\n    }\n    for(m = 0; m < pages; m++) {\n        s = 0;\n        for(n = 0; n < frames; n++) {\n            if(reference_string[m] == temp[n]) {\n                s++;\n                page_faults--;\n            }\n        }\n        page_faults++;\n        if((page_faults <= frames) && (s == 0)) {\n            temp[m] = reference_string[m];\n        } else if(s == 0) {\n            temp[(page_faults - 1) % frames] = reference_string[m];\n        }\n        printf(\"\\n\");\n        for(n = 0; n < frames; n++) {\n            if(temp[n] != -1) {\n                printf(\"%d\\t\", temp[n]);\n            } else {\n                printf(\"- \\t\");\n            }\n        }\n    }\n    printf(\"\\nTotal Page Faults: %d\", page_faults);\n}"
    },
    {
        "id": 22,
        "slip_no": "slip 11",
        "question": "Write a C program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally, it should interpret the following ‘list’ commands as: myshell$ list f dirname :- To print names of all the files in current directory. myshell$ list n dirname :- To print the number of all entries in the current directory.",
        "language": "c",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<sys/types.h>\n#include<dirent.h>\n#include<string.h>\n#include<stdlib.h>\nvoid list_files(char *dirname) {\n    struct dirent *de;\n    DIR *dr = opendir(dirname);\n    if (dr == NULL) {\n        printf(\"Could not open directory %s\", dirname);\n        return;\n    }\n    while ((de = readdir(dr)) != NULL) {\n        printf(\"%s\\n\", de->d_name);\n    }\n    closedir(dr);\n}\nvoid count_entries(char *dirname) {\n    int count = 0;\n    struct dirent *de;\n    DIR *dr = opendir(dirname);\n    if (dr == NULL) {\n        printf(\"Could not open directory %s\", dirname);\n        return;\n    }\n    while ((de = readdir(dr)) != NULL) {\n        count++;\n    }\n    closedir(dr);\n    printf(\"Total entries: %d\\n\", count);\n}\nint main() {\n    char command[100];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, 100, stdin);\n        command[strlen(command) - 1] = '\\0'; // Remove newline\n        char *token = strtok(command, \" \");\n        if (strcmp(token, \"list\") == 0) {\n            token = strtok(NULL, \" \");\n            if (token != NULL && strcmp(token, \"f\") == 0) {\n                token = strtok(NULL, \" \");\n                list_files(token);\n            } else if (token != NULL && strcmp(token, \"n\") == 0) {\n                token = strtok(NULL, \" \");\n                count_entries(token);\n            }\n        } else if (fork() == 0) {\n            execlp(token, token, NULL);\n        } else {\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 23,
        "slip_no": "slip 12",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the LRU page replacement algorithm. Assume the memory of n frames. Reference String : 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6",
        "language": "c",
        "code": "#include<stdio.h>\nint findLRU(int time[], int n) {\n    int i, minimum = time[0], pos = 0;\n    for(i = 1; i < n; ++i) {\n        if(time[i] < minimum) {\n            minimum = time[i];\n            pos = i;\n        }\n    }\n    return pos;\n}\nint main() {\n    int no_of_frames, no_of_pages, frames[10], pages[30], counter = 0, time[10], flag1, flag2, i, j, pos, page_faults = 0;\n    printf(\"Enter number of frames: \");\n    scanf(\"%d\", &no_of_frames);\n    printf(\"Enter number of pages: \");\n    scanf(\"%d\", &no_of_pages);\n    printf(\"Enter reference string: \");\n    for(i = 0; i < no_of_pages; ++i) {\n        scanf(\"%d\", &pages[i]);\n    }\n    for(i = 0; i < no_of_frames; ++i) {\n        frames[i] = -1;\n    }\n    for(i = 0; i < no_of_pages; ++i) {\n        flag1 = flag2 = 0;\n        for(j = 0; j < no_of_frames; ++j) {\n            if(frames[j] == pages[i]) {\n                counter++;\n                time[j] = counter;\n                flag1 = flag2 = 1;\n                break;\n            }\n        }\n        if(flag1 == 0) {\n            for(j = 0; j < no_of_frames; ++j) {\n                if(frames[j] == -1) {\n                    counter++;\n                    page_faults++;\n                    frames[j] = pages[i];\n                    time[j] = counter;\n                    flag2 = 1;\n                    break;\n                }\n            }\n        }\n        if(flag2 == 0) {\n            pos = findLRU(time, no_of_frames);\n            counter++;\n            page_faults++;\n            frames[pos] = pages[i];\n            time[pos] = counter;\n        }\n        printf(\"\\n\");\n        for(j = 0; j < no_of_frames; ++j) {\n            if(frames[j] != -1) {\n                printf(\"%d\\t\", frames[j]);\n            } else {\n                printf(\"- \\t\");\n            }\n        }\n    }\n    printf(\"\\nTotal Page Faults = %d\", page_faults);\n    return 0;\n}"
    },
    {
        "id": 24,
        "slip_no": "slip 12",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally, it should interpret the following ‘list’ commands as: myshell$ list f dirname :- To print names of all the files in current directory. myshell$ list n dirname :- To print the number of all entries in the current directory.",
        "language": "c",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<sys/types.h>\n#include<dirent.h>\n#include<string.h>\n#include<stdlib.h>\nvoid list_files(char *dirname) {\n    struct dirent *de;\n    DIR *dr = opendir(dirname);\n    if (dr == NULL) {\n        printf(\"Could not open directory %s\", dirname);\n        return;\n    }\n    while ((de = readdir(dr)) != NULL) {\n        printf(\"%s\\n\", de->d_name);\n    }\n    closedir(dr);\n}\nvoid count_entries(char *dirname) {\n    int count = 0;\n    struct dirent *de;\n    DIR *dr = opendir(dirname);\n    if (dr == NULL) {\n        printf(\"Could not open directory %s\", dirname);\n        return;\n    }\n    while ((de = readdir(dr)) != NULL) {\n        count++;\n    }\n    closedir(dr);\n    printf(\"Total entries: %d\\n\", count);\n}\nint main() {\n    char command[100];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, 100, stdin);\n        command[strlen(command) - 1] = '\\0'; // Remove newline\n        char *token = strtok(command, \" \");\n        if (strcmp(token, \"list\") == 0) {\n            token = strtok(NULL, \" \");\n            if (token != NULL && strcmp(token, \"f\") == 0) {\n                token = strtok(NULL, \" \");\n                list_files(token);\n            } else if (token != NULL && strcmp(token, \"n\") == 0) {\n                token = strtok(NULL, \" \");\n                count_entries(token);\n            }\n        } else if (fork() == 0) {\n            execlp(token, token, NULL);\n        } else {\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 25,
        "slip_no": "slip 13",
        "question": "Write a C program to implement the shell which displays the command prompt “myshell$”. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command ‘typeline’ as: typeline -a filename :- To print all lines in the file.",
        "language": "c",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<sys/types.h>\n#include<string.h>\n#include<stdlib.h>\n#include<fcntl.h>\nvoid typeline_all(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    char line[256];\n    if (file == NULL) {\n        printf(\"Cannot open file %s\\n\", filename);\n        return;\n    }\n    while (fgets(line, sizeof(line), file)) {\n        printf(\"%s\", line);\n    }\n    fclose(file);\n}\nint main() {\n    char command[100];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, 100, stdin);\n        command[strlen(command) - 1] = '\\0'; // Remove newline\n        char *token = strtok(command, \" \");\n        if (strcmp(token, \"typeline\") == 0) {\n            token = strtok(NULL, \" \");\n            if (strcmp(token, \"-a\") == 0) {\n                token = strtok(NULL, \" \");\n                typeline_all(token);\n            }\n        } else if (fork() == 0) {\n            execlp(token, token, NULL);\n        } else {\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 26,
        "slip_no": "slip 13",
        "question": "Write the simulation program for Round Robin scheduling for given time quantum. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give the Gantt chart, turnaround time and waiting time for each process. Also display the average turnaround time and average waiting time.",
        "language": "c",
        "code": "#include<stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time, remaining_time;\n};\nint main() {\n    int n, i, j, time = 0, remain, flag = 0, time_quantum;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    remain = n;\n    for (i = 0; i < n; i++) {\n        printf(\"Enter arrival time and burst time for process P%d: \", i+1);\n        p[i].id = i + 1;\n        scanf(\"%d%d\", &p[i].arrival_time, &p[i].burst_time);\n        p[i].remaining_time = p[i].burst_time;\n    }\n    printf(\"Enter time quantum: \");\n    scanf(\"%d\", &time_quantum);\n    printf(\"\\nGantt Chart\\n\");\n    for (time = 0, i = 0; remain != 0;) {\n        if (p[i].remaining_time <= time_quantum && p[i].remaining_time > 0) {\n            time += p[i].remaining_time;\n            printf(\"| P%d \", p[i].id);\n            p[i].remaining_time = 0;\n            flag = 1;\n        } else if (p[i].remaining_time > 0) {\n            p[i].remaining_time -= time_quantum;\n            time += time_quantum;\n            printf(\"| P%d \", p[i].id);\n        }\n        if (p[i].remaining_time == 0 && flag == 1) {\n            remain--;\n            p[i].turnaround_time = time - p[i].arrival_time;\n            p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;\n            avg_waiting_time += p[i].waiting_time;\n            avg_turnaround_time += p[i].turnaround_time;\n            flag = 0;\n        }\n        if (i == n - 1) {\n            i = 0;\n        } else if (p[i + 1].arrival_time <= time) {\n            i++;\n        } else {\n            i = 0;\n        }\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 27,
        "slip_no": "slip 14",
        "question": "Write a C program to implement the shell which displays the command prompt “myshell$”. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command ‘typeline’ as: typeline +n filename :- To print first n lines in the file.",
        "language": "c",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<sys/types.h>\n#include<string.h>\n#include<stdlib.h>\n#include<fcntl.h>\nvoid typeline_n(int n, char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    char line[256];\n    int count = 0;\n    if (file == NULL) {\n        printf(\"Cannot open file %s\\n\", filename);\n        return;\n    }\n    while (fgets(line, sizeof(line), file) && count < n) {\n        printf(\"%s\", line);\n        count++;\n    }\n    fclose(file);\n}\nint main() {\n    char command[100];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, 100, stdin);\n        command[strlen(command) - 1] = '\\0'; // Remove newline\n        char *token = strtok(command, \" \");\n        if (strcmp(token, \"typeline\") == 0) {\n            token = strtok(NULL, \" \");\n            if (token[0] == '+') {\n                int n = atoi(token + 1);\n                token = strtok(NULL, \" \");\n                typeline_n(n, token);\n            }\n        } else if (fork() == 0) {\n            execlp(token, token, NULL);\n        } else {\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 28,
        "slip_no": "slip 14",
        "question": "Write a C program to simulate Non-preemptive Shortest Job First (SJF) scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include<stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time;\n};\nvoid sortByArrival(struct process p[], int n) {\n    struct process temp;\n    for(int i = 0; i < n - 1; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(p[i].arrival_time > p[j].arrival_time) {\n                temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n            }\n        }\n    }\n}\nint main() {\n    int n, total = 0;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time and burst time for process P%d: \", i+1);\n        p[i].id = i + 1;\n        scanf(\"%d%d\", &p[i].arrival_time, &p[i].burst_time);\n    }\n    sortByArrival(p, n);\n    printf(\"\\nGantt Chart\\n\");\n    for(int i = 0; i < n; i++) {\n        if(total < p[i].arrival_time) {\n            total = p[i].arrival_time;\n        }\n        total += p[i].burst_time;\n        p[i].turnaround_time = total - p[i].arrival_time;\n        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;\n        avg_waiting_time += p[i].waiting_time;\n        avg_turnaround_time += p[i].turnaround_time;\n        printf(\"| P%d \", p[i].id);\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 29,
        "slip_no": "slip 15",
        "question": "Write a C program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following ‘list’ commands as myshell$ list f dirname :- To print names of all the files in the current directory.",
        "language": "c",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<sys/types.h>\n#include<string.h>\n#include<stdlib.h>\n#include<dirent.h>\nvoid list_files(char *dirname) {\n    struct dirent *de;\n    DIR *dr = opendir(dirname);\n    if (dr == NULL) {\n        printf(\"Could not open current directory\\n\");\n        return;\n    }\n    while ((de = readdir(dr)) != NULL) {\n        if (de->d_type == DT_REG) { // Regular file\n            printf(\"%s\\n\", de->d_name);\n        }\n    }\n    closedir(dr);\n}\nint main() {\n    char command[100];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, 100, stdin);\n        command[strlen(command) - 1] = '\\0'; // Remove newline\n        char *token = strtok(command, \" \");\n        if (strcmp(token, \"list\") == 0) {\n            token = strtok(NULL, \" \");\n            if (strcmp(token, \"f\") == 0) {\n                token = strtok(NULL, \" \");\n                list_files(token);\n            }\n        } else if (fork() == 0) {\n            execlp(token, token, NULL);\n        } else {\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 30,
        "slip_no": "slip 15",
        "question": "Write the program to simulate preemptive Shortest Job First (SJF) scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include<stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time, remaining_time;\n};\nint main() {\n    int n, time = 0, smallest, remain, finish_time, flag = 0;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    remain = n;\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time and burst time for process P%d: \", i + 1);\n        p[i].id = i + 1;\n        scanf(\"%d%d\", &p[i].arrival_time, &p[i].burst_time);\n        p[i].remaining_time = p[i].burst_time;\n    }\n    printf(\"\\nGantt Chart\\n\");\n    while (remain != 0) {\n        smallest = 9;\n        for (int i = 0; i < n; i++) {\n            if (p[i].arrival_time <= time && p[i].remaining_time > 0 && (smallest == 9 || p[i].remaining_time < p[smallest].remaining_time)) {\n                smallest = i;\n            }\n        }\n        if (smallest == 9) {\n            time++;\n            continue;\n        }\n        p[smallest].remaining_time--;\n        printf(\"| P%d \", p[smallest].id);\n        if (p[smallest].remaining_time == 0) {\n            remain--;\n            finish_time = time + 1;\n            p[smallest].turnaround_time = finish_time - p[smallest].arrival_time;\n            p[smallest].waiting_time = p[smallest].turnaround_time - p[smallest].burst_time;\n            avg_waiting_time += p[smallest].waiting_time;\n            avg_turnaround_time += p[smallest].turnaround_time;\n        }\n        time++;\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 31,
        "slip_no": "slip 16",
        "question": "Write a program to implement the toy shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands. count c filename :- To print number of characters in the file. count w filename :- To print number of words in the file.",
        "language": "c",
        "code": "#include<stdio.h>\n#include<unistd.h>\n#include<sys/types.h>\n#include<string.h>\n#include<stdlib.h>\nvoid count_characters(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    char ch;\n    int count = 0;\n    if (file == NULL) {\n        printf(\"Cannot open file %s\\n\", filename);\n        return;\n    }\n    while ((ch = fgetc(file)) != EOF) {\n        count++;\n    }\n    printf(\"Number of characters: %d\\n\", count);\n    fclose(file);\n}\nvoid count_words(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    char word[50];\n    int count = 0;\n    if (file == NULL) {\n        printf(\"Cannot open file %s\\n\", filename);\n        return;\n    }\n    while (fscanf(file, \"%s\", word) != EOF) {\n        count++;\n    }\n    printf(\"Number of words: %d\\n\", count);\n    fclose(file);\n}\nint main() {\n    char command[100];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, 100, stdin);\n        command[strlen(command) - 1] = '\\0'; // Remove newline\n        char *token = strtok(command, \" \");\n        if (strcmp(token, \"count\") == 0) {\n            token = strtok(NULL, \" \");\n            if (strcmp(token, \"c\") == 0) {\n                token = strtok(NULL, \" \");\n                count_characters(token);\n            } else if (strcmp(token, \"w\") == 0) {\n                token = strtok(NULL, \" \");\n                count_words(token);\n            }\n        } else if (fork() == 0) {\n            execlp(token, token, NULL);\n        } else {\n            wait(NULL);\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 32,
        "slip_no": "slip 16",
        "question": "Write the program to simulate Non preemptive priority scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include<stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, priority, waiting_time, turnaround_time;\n};\nvoid sortByPriority(struct process p[], int n) {\n    struct process temp;\n    for(int i = 0; i < n - 1; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(p[i].priority > p[j].priority) {\n                temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n            }\n        }\n    }\n}\nint main() {\n    int n, total = 0;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time, burst time, and priority for process P%d: \", i + 1);\n        p[i].id = i + 1;\n        scanf(\"%d%d%d\", &p[i].arrival_time, &p[i].burst_time, &p[i].priority);\n    }\n    sortByPriority(p, n);\n    printf(\"\\nGantt Chart\\n\");\n    for(int i = 0; i < n; i++) {\n        if(total < p[i].arrival_time) {\n            total = p[i].arrival_time;\n        }\n        total += p[i].burst_time;\n        p[i].turnaround_time = total - p[i].arrival_time;\n        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;\n        avg_waiting_time += p[i].waiting_time;\n        avg_turnaround_time += p[i].turnaround_time;\n        printf(\"| P%d \", p[i].id);\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 33,
        "slip_no": "slip 17",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the Optimal page replacement algorithm. Assume the memory of n frames.",
        "language": "c",
        "code": "#include<stdio.h>\n#define MAX 20\nint find_farthest(int pages[], int frames[], int n, int pos) {\n    int farthest = -1, index = -1;\n    for (int i = 0; i < n; i++) {\n        int j;\n        for (j = pos; j < MAX; j++) {\n            if (frames[i] == pages[j]) {\n                if (j > farthest) {\n                    farthest = j;\n                    index = i;\n                }\n                break;\n            }\n        }\n        if (j == MAX) return i;\n    }\n    return index;\n}\nint main() {\n    int pages[MAX] = {7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6};\n    int frames[3], n = 3, page_faults = 0;\n    for (int i = 0; i < n; i++) frames[i] = -1;\n    for (int i = 0; i < MAX; i++) {\n        int flag = 0;\n        for (int j = 0; j < n; j++) {\n            if (frames[j] == pages[i]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            page_faults++;\n            if (i < n) frames[i] = pages[i];\n            else frames[find_farthest(pages, frames, n, i)] = pages[i];\n        }\n        printf(\"\\nPage: %d\\t\", pages[i]);\n        for (int k = 0; k < n; k++) printf(\"%d \", frames[k]);\n    }\n    printf(\"\\nTotal Page Faults: %d\\n\", page_faults);\n    return 0;\n}"
    },
    {
        "id": 34,
        "slip_no": "slip 17",
        "question": "Write the program to simulate FCFS CPU-scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include<stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time;\n};\nint main() {\n    int n;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time and burst time for process P%d: \", i + 1);\n        p[i].id = i + 1;\n        scanf(\"%d%d\", &p[i].arrival_time, &p[i].burst_time);\n    }\n    printf(\"\\nGantt Chart\\n\");\n    int current_time = 0;\n    for (int i = 0; i < n; i++) {\n        if (current_time < p[i].arrival_time) current_time = p[i].arrival_time;\n        current_time += p[i].burst_time;\n        p[i].turnaround_time = current_time - p[i].arrival_time;\n        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;\n        avg_waiting_time += p[i].waiting_time;\n        avg_turnaround_time += p[i].turnaround_time;\n        printf(\"| P%d \", p[i].id);\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 35,
        "slip_no": "slip 18",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the LRU page replacement algorithm. Assume the memory of n frames.",
        "language": "c",
        "code": "#include<stdio.h>\n#define MAX 20\nint find_lru(int time[], int n) {\n    int min = time[0], pos = 0;\n    for (int i = 1; i < n; i++) {\n        if (time[i] < min) {\n            min = time[i];\n            pos = i;\n        }\n    }\n    return pos;\n}\nint main() {\n    int pages[MAX] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};\n    int frames[3], time[3], n = 3, page_faults = 0, counter = 0;\n    for (int i = 0; i < n; i++) frames[i] = -1;\n    for (int i = 0; i < MAX; i++) {\n        int flag1 = 0, flag2 = 0;\n        for (int j = 0; j < n; j++) {\n            if (frames[j] == pages[i]) {\n                counter++;\n                time[j] = counter;\n                flag1 = flag2 = 1;\n                break;\n            }\n        }\n        if (!flag1) {\n            for (int j = 0; j < n; j++) {\n                if (frames[j] == -1) {\n                    counter++;\n                    frames[j] = pages[i];\n                    time[j] = counter;\n                    page_faults++;\n                    flag2 = 1;\n                    break;\n                }\n            }\n        }\n        if (!flag2) {\n            int pos = find_lru(time, n);\n            counter++;\n            frames[pos] = pages[i];\n            time[pos] = counter;\n            page_faults++;\n        }\n        printf(\"\\nPage: %d\\t\", pages[i]);\n        for (int k = 0; k < n; k++) printf(\"%d \", frames[k]);\n    }\n    printf(\"\\nTotal Page Faults: %d\\n\", page_faults);\n    return 0;\n}"
    },
    {
        "id": 36,
        "slip_no": "slip 18",
        "question": "Write a C program to simulate FCFS CPU-scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include<stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time;\n};\nint main() {\n    int n;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time and burst time for process P%d: \", i + 1);\n        p[i].id = i + 1;\n        scanf(\"%d%d\", &p[i].arrival_time, &p[i].burst_time);\n    }\n    printf(\"\\nGantt Chart\\n\");\n    int current_time = 0;\n    for (int i = 0; i < n; i++) {\n        if (current_time < p[i].arrival_time) current_time = p[i].arrival_time;\n        current_time += p[i].burst_time;\n        p[i].turnaround_time = current_time - p[i].arrival_time;\n        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;\n        avg_waiting_time += p[i].waiting_time;\n        avg_turnaround_time += p[i].turnaround_time;\n        printf(\"| P%d \", p[i].id);\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 37,
        "slip_no": "slip 19",
        "question": "Write a C program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally, it should interpret the following ‘list’ commands as myshell$ list f dirname :- To print names of all the files in the current directory.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <dirent.h>\n#define MAX_INPUT_SIZE 1024\nint main() {\n    char input[MAX_INPUT_SIZE];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = 0;  // Remove newline character\n\n        char *command = strtok(input, \" \");\n        if (strcmp(command, \"list\") == 0) {\n            char *option = strtok(NULL, \" \");\n            char *dirname = strtok(NULL, \" \");\n            if (option && strcmp(option, \"f\") == 0 && dirname) {\n                DIR *dir = opendir(dirname);\n                if (dir == NULL) {\n                    perror(\"Could not open directory\");\n                } else {\n                    struct dirent *entry;\n                    while ((entry = readdir(dir)) != NULL) {\n                        printf(\"%s\\n\", entry->d_name);\n                    }\n                    closedir(dir);\n                }\n            }\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        } else {\n            pid_t pid = fork();\n            if (pid == 0) {\n                execlp(command, command, NULL);\n                perror(\"Command execution failed\");\n                exit(EXIT_FAILURE);\n            } else {\n                wait(NULL);\n            }\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 38,
        "slip_no": "slip 19",
        "question": "Write the simulation program for Round Robin scheduling for given time quantum. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time, and burst time. The output should give the Gantt chart, turnaround time, and waiting time for each process. Also display the average turnaround time and average waiting time.",
        "language": "c",
        "code": "#include <stdio.h>\n#define MAX 10\nint main() {\n    int n, burst_time[MAX], waiting_time[MAX], turnaround_time[MAX], arrival_time[MAX], i, j, time_quantum, remaining_time[MAX];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter arrival times and burst times: \\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"Process P%d: \", i + 1);\n        scanf(\"%d %d\", &arrival_time[i], &burst_time[i]);\n        remaining_time[i] = burst_time[i];\n    }\n    printf(\"Enter time quantum: \");\n    scanf(\"%d\", &time_quantum);\n    int complete = 0, t = 0;\n    printf(\"\\nGantt Chart: \\n\");\n    while (complete < n) {\n        for (i = 0; i < n; i++) {\n            if (remaining_time[i] > 0 && arrival_time[i] <= t) {\n                if (remaining_time[i] > time_quantum) {\n                    t += time_quantum;\n                    remaining_time[i] -= time_quantum;\n                } else {\n                    t += remaining_time[i];\n                    waiting_time[i] = t - burst_time[i] - arrival_time[i];\n                    turnaround_time[i] = waiting_time[i] + burst_time[i];\n                    printf(\"P%d \", i + 1);\n                    remaining_time[i] = 0;\n                    complete++;\n                }\n            }\n        }\n    }\n    printf(\"\\n\");\n    for (i = 0; i < n; i++) {\n        avg_waiting_time += waiting_time[i];\n        avg_turnaround_time += turnaround_time[i];\n    }\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", i + 1, burst_time[i], waiting_time[i], turnaround_time[i]);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 39,
        "slip_no": "slip 20",
        "question": "Write a C program to implement the shell which displays the command prompt “myshell$”. It accepts the command, tokenizes the command line, and executes it by creating the child process. Also implement the additional command ‘typeline’ as typeline -a filename :- To print all lines in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#define MAX_INPUT_SIZE 1024\nint main() {\n    char input[MAX_INPUT_SIZE];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(input, sizeof(input), stdin);\n        input[strcspn(input, \"\\n\")] = 0;  // Remove newline character\n\n        char *command = strtok(input, \" \");\n        if (strcmp(command, \"typeline\") == 0) {\n            char *option = strtok(NULL, \" \");\n            char *filename = strtok(NULL, \" \");\n            if (option && strcmp(option, \"-a\") == 0 && filename) {\n                FILE *file = fopen(filename, \"r\");\n                if (file == NULL) {\n                    perror(\"Could not open file\");\n                } else {\n                    char line[256];\n                    while (fgets(line, sizeof(line), file)) {\n                        printf(\"%s\", line);\n                    }\n                    fclose(file);\n                }\n            }\n        } else if (strcmp(command, \"exit\") == 0) {\n            break;\n        } else {\n            pid_t pid = fork();\n            if (pid == 0) {\n                execlp(command, command, NULL);\n                perror(\"Command execution failed\");\n                exit(EXIT_FAILURE);\n            } else {\n                wait(NULL);\n            }\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 40,
        "slip_no": "slip 20",
        "question": "Write the program to simulate Non-preemptive Shortest Job First (SJF) – scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time, and burst time. The output should give Gantt chart, turnaround time, and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include <stdio.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time;\n};\nint main() {\n    int n;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time and burst time for process P%d: \", i + 1);\n        p[i].id = i + 1;\n        scanf(\"%d%d\", &p[i].arrival_time, &p[i].burst_time);\n    }\n    int current_time = 0;\n    int completed = 0;\n    int min_index;\n    printf(\"\\nGantt Chart\\n\");\n    while (completed < n) {\n        min_index = -1;\n        for (int i = 0; i < n; i++) {\n            if (p[i].arrival_time <= current_time && (min_index == -1 || p[i].burst_time < p[min_index].burst_time) && p[i].burst_time > 0) {\n                min_index = i;\n            }\n        }\n        if (min_index != -1) {\n            current_time += p[min_index].burst_time;\n            p[min_index].turnaround_time = current_time - p[min_index].arrival_time;\n            p[min_index].waiting_time = p[min_index].turnaround_time - p[min_index].burst_time;\n            avg_waiting_time += p[min_index].waiting_time;\n            avg_turnaround_time += p[min_index].turnaround_time;\n            printf(\"| P%d \", p[min_index].id);\n            p[min_index].burst_time = 0; // mark as completed\n            completed++;\n        } else {\n            current_time++; // no process is ready\n        }\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 41,
        "slip_no": "slip 21",
        "question": "Write a C Program to create a child process using fork (), display parent and child process id. Child process will display the message “I am Child Process” and the parent process should display “I am Parent Process”.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main() {\n    pid_t pid = fork();\n    if (pid < 0) {\n        perror(\"Fork failed\");\n        return 1;\n    }\n    if (pid == 0) {\n        // Child process\n        printf(\"I am Child Process. My PID is %d.\\n\", getpid());\n    } else {\n        // Parent process\n        printf(\"I am Parent Process. My PID is %d. My Child's PID is %d.\\n\", getpid(), pid);\n    }\n    return 0;\n}"
    },
    {
        "id": 42,
        "slip_no": "slip 21",
        "question": "Write a C program to simulate Preemptive Priority scheduling. The arrival time and first CPU-burst and priority for different n number of processes should be input to the algorithm. Assume the fixed IO waiting time (2 units). The next CPU-burst should be generated randomly. The output should give Gantt chart, turnaround time, and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#define MAX 10\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time, priority;\n};\nvoid sort_processes(struct process p[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (p[i].priority > p[j].priority) {\n                struct process temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n            }\n        }\n    }\n}\nint main() {\n    int n, current_time = 0, completed = 0;\n    struct process p[MAX];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    srand(time(NULL));\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time, burst time and priority for process P%d: \", i + 1);\n        scanf(\"%d %d %d\", &p[i].arrival_time, &p[i].burst_time, &p[i].priority);\n        p[i].id = i + 1;\n    }\n    printf(\"\\nGantt Chart: \\n\");\n    while (completed < n) {\n        sort_processes(p, n);\n        for (int i = 0; i < n; i++) {\n            if (p[i].arrival_time <= current_time && p[i].burst_time > 0) {\n                printf(\"P%d \", p[i].id);\n                current_time += p[i].burst_time + 2; // Add fixed IO waiting time\n                p[i].waiting_time = current_time - p[i].arrival_time - p[i].burst_time;\n                p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;\n                avg_waiting_time += p[i].waiting_time;\n                avg_turnaround_time += p[i].turnaround_time;\n                p[i].burst_time = 0; // Mark as completed\n                completed++;\n                break;\n            }\n        }\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 43,
        "slip_no": "slip 22",
        "question": "Write a C program that demonstrates the use of nice() system call. After a child Process is started using fork (), assign higher priority to the child using nice() system call.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/time.h>\n#include <sys/resource.h>\nint main() {\n    pid_t pid = fork();\n    if (pid < 0) {\n        perror(\"Fork failed\");\n        return 1;\n    }\n    if (pid == 0) {\n        // Child process\n        nice(10);  // Increase the priority of the child process\n        printf(\"Child Process: My PID is %d and my priority is now %d.\\n\", getpid(), getpriority(PRIO_PROCESS, getpid()));\n    } else {\n        // Parent process\n        printf(\"Parent Process: My PID is %d.\\n\", getpid());\n    }\n    return 0;\n}"
    },
    {
        "id": 44,
        "slip_no": "slip 22",
        "question": "Write a C program to simulate Non-preemptive priority scheduling. The arrival time and first CPU-burst of different jobs should be input to the system. Accept no. of Processes, arrival time and burst time. The output should give Gantt chart, turnaround time and waiting time for each process. Also find the average waiting time and turnaround time.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\nstruct process {\n    int id, arrival_time, burst_time, waiting_time, turnaround_time, priority;\n};\nvoid sort_processes(struct process p[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (p[i].priority > p[j].priority) {\n                struct process temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n            }\n        }\n    }\n}\nint main() {\n    int n, current_time = 0, completed = 0;\n    struct process p[10];\n    float avg_waiting_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        printf(\"Enter arrival time, burst time and priority for process P%d: \", i + 1);\n        scanf(\"%d %d %d\", &p[i].arrival_time, &p[i].burst_time, &p[i].priority);\n        p[i].id = i + 1;\n    }\n    printf(\"\\nGantt Chart\\n\");\n    while (completed < n) {\n        for (int i = 0; i < n; i++) {\n            if (p[i].arrival_time <= current_time && p[i].burst_time > 0) {\n                printf(\"| P%d \", p[i].id);\n                current_time += p[i].burst_time;\n                p[i].turnaround_time = current_time - p[i].arrival_time;\n                p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;\n                avg_waiting_time += p[i].waiting_time;\n                avg_turnaround_time += p[i].turnaround_time;\n                p[i].burst_time = 0; // Mark as completed\n                completed++;\n                break;\n            }\n        }\n    }\n    printf(\"|\\n\");\n    printf(\"\\nProcess\\tBurst Time\\tWaiting Time\\tTurnaround Time\\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"P%d\\t%d\\t\\t%d\\t\\t%d\\n\", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);\n    }\n    printf(\"\\nAverage Waiting Time: %.2f\\n\", avg_waiting_time / n);\n    printf(\"Average Turnaround Time: %.2f\\n\", avg_turnaround_time / n);\n    return 0;\n}"
    },
    {
        "id": 45,
        "slip_no": "slip 23",
        "question": "Write a C program to illustrate the concept of orphan process. Parent process creates a child and terminates before child has finished its task. So child process becomes orphan process. (Use fork(), sleep(), getpid(), getppid()).",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint main() {\n    pid_t pid = fork();\n\n    if (pid < 0) {\n        perror(\"Fork failed\");\n        return 1;\n    }\n\n    if (pid == 0) {\n        // Child process\n        sleep(5); // Simulate work by sleeping\n        printf(\"Child Process: My PID is %d and my Parent PID is %d.\\n\", getpid(), getppid());\n    } else {\n        // Parent process\n        printf(\"Parent Process: My PID is %d. Terminating now.\\n\", getpid());\n        exit(0); // Terminate parent process\n    }\n    return 0;\n}"
    },
    {
        "id": 46,
        "slip_no": "slip 23",
        "question": "Write the simulation program for demand paging and show the page scheduling and total number of page faults according to the Optimal page replacement algorithm. Assume the memory of n frames. Reference String : 7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#define MAX_FRAMES 10\n#define REF_STRING_LENGTH 14\n\nint findOptimal(int pages[], int currentIndex, int frames[], int nFrames) {\n    int farthest = currentIndex;\n    int pageIndex = -1;\n\n    for (int i = 0; i < nFrames; i++) {\n        int j;\n        for (j = currentIndex; j < REF_STRING_LENGTH; j++) {\n            if (frames[i] == pages[j]) {\n                if (j > farthest) {\n                    farthest = j;\n                    pageIndex = i;\n                }\n                break;\n            }\n        }\n        if (j == REF_STRING_LENGTH) {\n            return i; // Page not found in reference string\n        }\n    }\n    return pageIndex;\n}\n\nint main() {\n    int pages[REF_STRING_LENGTH] = {7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6};\n    int frames[MAX_FRAMES];\n    int nFrames, pageFaults = 0;\n    printf(\"Enter number of frames: \");\n    scanf(\"%d\", &nFrames);\n\n    for (int i = 0; i < nFrames; i++) {\n        frames[i] = -1; // Initialize frames\n    }\n\n    for (int i = 0; i < REF_STRING_LENGTH; i++) {\n        int j;\n        for (j = 0; j < nFrames; j++) {\n            if (frames[j] == pages[i]) {\n                break; // Page is already in a frame\n            }\n        }\n\n        if (j == nFrames) {\n            // Page fault\n            pageFaults++;\n            int pageIndex = findOptimal(pages, i, frames, nFrames);\n            frames[pageIndex] = pages[i]; // Replace the optimal page\n            printf(\"Page fault: %d - Loaded page %d\\n\", pageFaults, pages[i]);\n        } else {\n            printf(\"Page hit: %d - Page %d already loaded\\n\", i + 1, pages[i]);\n        }\n    }\n\n    printf(\"Total Page Faults: %d\\n\", pageFaults);\n    return 0;\n}"
    },
    {
        "id": 47,
        "slip_no": "slip 24",
        "question": "Write a C program to accept n integers to be sorted. Main function creates child process using fork system call. Parent process sorts the integers using bubble sort and waits for child process using wait system call. Child process sorts the integers using insertion sort.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/wait.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter number of integers: \");\n    scanf(\"%d\", &n);\n    int arr[n];\n    printf(\"Enter %d integers: \", n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n\n    pid_t pid = fork();\n    if (pid < 0) {\n        perror(\"Fork failed\");\n        return 1;\n    }\n\n    if (pid == 0) {\n        // Child process\n        insertionSort(arr, n);\n        printf(\"Child Process (Insertion Sort): Sorted array: \");\n        for (int i = 0; i < n; i++) {\n            printf(\"%d \", arr[i]);\n        }\n        printf(\"\\n\");\n        exit(0);\n    } else {\n        // Parent process\n        wait(NULL); // Wait for child process to finish\n        bubbleSort(arr, n);\n        printf(\"Parent Process (Bubble Sort): Sorted array: \");\n        for (int i = 0; i < n; i++) {\n            printf(\"%d \", arr[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
    },
    {
        "id": 48,
        "slip_no": "slip 24",
        "question": "Write a C program to implement the toy shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands. count c filename :- To print number of characters in the file. count w filename :- To print number of words in the file. count l filename :- To print number of lines in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\n\nvoid countCharacters(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"File not found\");\n        return;\n    }\n    fseek(file, 0, SEEK_END);\n    printf(\"Number of characters: %ld\\n\", ftell(file));\n    fclose(file);\n}\n\nvoid countWords(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"File not found\");\n        return;\n    }\n    int count = 0;\n    char word[100];\n    while (fscanf(file, \"%s\", word) != EOF) {\n        count++;\n    }\n    printf(\"Number of words: %d\\n\", count);\n    fclose(file);\n}\n\nvoid countLines(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"File not found\");\n        return;\n    }\n    int count = 0;\n    char ch;\n    while ((ch = fgetc(file)) != EOF) {\n        if (ch == '\\n') {\n            count++;\n        }\n    }\n    printf(\"Number of lines: %d\\n\", count);\n    fclose(file);\n}\n\nint main() {\n    char command[256];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, sizeof(command), stdin);\n        command[strcspn(command, \"\\n\")] = '\\0'; // Remove newline character\n\n        char *token = strtok(command, \" \");\n        if (token == NULL) continue;\n\n        if (strcmp(token, \"count\") == 0) {\n            token = strtok(NULL, \" \");\n            if (token == NULL) continue;\n            char *filename = strtok(NULL, \" \");\n            if (filename == NULL) continue;\n\n            pid_t pid = fork();\n            if (pid < 0) {\n                perror(\"Fork failed\");\n                continue;\n            }\n            if (pid == 0) {\n                // Child process\n                if (strcmp(token, \"c\") == 0) {\n                    countCharacters(filename);\n                } else if (strcmp(token, \"w\") == 0) {\n                    countWords(filename);\n                } else if (strcmp(token, \"l\") == 0) {\n                    countLines(filename);\n                } else {\n                    printf(\"Invalid command\\n\");\n                }\n                exit(0);\n            } else {\n                wait(NULL); // Wait for child process to finish\n            }\n        } else {\n            printf(\"Invalid command\\n\");\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 49,
        "slip_no": "slip 25",
        "question": "Write a C program that accepts an integer array. Main function forks child process. Parent process sorts an integer array and passes the sorted array to child process through the command line arguments of execve() system call. The child process uses execve() system call to load new program that uses this sorted array for performing the binary search to search the particular item in the array.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter number of integers: \");\n    scanf(\"%d\", &n);\n    int arr[n];\n    printf(\"Enter %d integers: \", n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n\n    bubbleSort(arr, n);\n\n    char *args[n + 2]; // Arguments for execve\n    args[0] = \"./binary_search\"; // Name of the new program\n    for (int i = 0; i < n; i++) {\n        args[i + 1] = malloc(10 * sizeof(char));\n        sprintf(args[i + 1], \"%d\", arr[i]); // Convert integers to strings\n    }\n    args[n + 1] = NULL;\n\n    pid_t pid = fork();\n    if (pid < 0) {\n        perror(\"Fork failed\");\n        return 1;\n    }\n\n    if (pid == 0) {\n        // Child process\n        execve(\"./binary_search\", args, NULL);\n        perror(\"execve failed\"); // Only reached if execve fails\n        exit(1);\n    } else {\n        // Parent process\n        wait(NULL); // Wait for child process\n        for (int i = 1; i <= n; i++) {\n            free(args[i]); // Free allocated memory\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 50,
        "slip_no": "slip 25",
        "question": "Write a program to implement the shell. It should display the command prompt “myshell$”. Tokenize the command line and execute the given command by creating the child process. Additionally it should interpret the following commands. myshell$ search f filename pattern :- To display first occurrence of pattern in the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\n\nvoid searchPattern(char *filename, char *pattern) {\n    FILE *file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"File not found\");\n        return;\n    }\n    char line[256];\n    int lineNumber = 0;\n    while (fgets(line, sizeof(line), file)) {\n        lineNumber++;\n        if (strstr(line, pattern)) {\n            printf(\"Pattern found in %s at line %d: %s\", filename, lineNumber, line);\n            fclose(file);\n            return;\n        }\n    }\n    printf(\"Pattern not found in %s.\\n\", filename);\n    fclose(file);\n}\n\nint main() {\n    char command[256];\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, sizeof(command), stdin);\n        command[strcspn(command, \"\\n\")] = 0; // Remove newline character\n\n        char *args[4];\n        char *token = strtok(command, \" \");\n        int i = 0;\n\n        while (token != NULL && i < 3) {\n            args[i++] = token;\n            token = strtok(NULL, \" \");\n        }\n        args[i] = NULL;\n\n        if (strcmp(args[0], \"search\") == 0 && strcmp(args[1], \"f\") == 0 && i == 3) {\n            pid_t pid = fork();\n            if (pid < 0) {\n                perror(\"Fork failed\");\n            } else if (pid == 0) {\n                searchPattern(args[2], args[3]);\n                exit(0);\n            } else {\n                wait(NULL);\n            }\n        } else {\n            printf(\"Invalid command.\\n\");\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 51,
        "slip_no": "slip 1",
        "question": "Write a Program to print all Prime numbers in an array of ‘n’ elements. (use command line arguments)",
        "language": "java",
        "code": "public class PrimeNumbers {\n    public static void main(String[] args) {\n        int n = Integer.parseInt(args[0]);\n        System.out.println(\"Prime numbers up to \" + n + \":\");\n        for (int num = 2; num <= n; num++) {\n            if (isPrime(num)) {\n                System.out.print(num + \" \");\n            }\n        }\n    }\n\n    public static boolean isPrime(int num) {\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    },
    {
        "id": 52,
        "slip_no": "slip 1",
        "question": "Define an abstract class Staff with protected members id and name. Define a parameterized constructor. Define one subclass OfficeStaff with member department. Create n objects of OfficeStaff and display all details.",
        "language": "java",
        "code": "abstract class Staff {\n    protected String id;\n    protected String name;\n\n    public Staff(String id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public abstract void displayDetails();\n}\n\nclass OfficeStaff extends Staff {\n    private String department;\n\n    public OfficeStaff(String id, String name, String department) {\n        super(id, name);\n        this.department = department;\n    }\n\n    @Override\n    public void displayDetails() {\n        System.out.println(\"ID: \" + id + \", Name: \" + name + \", Department: \" + department);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        OfficeStaff staff1 = new OfficeStaff(\"001\", \"Alice\", \"HR\");\n        OfficeStaff staff2 = new OfficeStaff(\"002\", \"Bob\", \"IT\");\n        staff1.displayDetails();\n        staff2.displayDetails();\n    }\n}"
    },
    {
        "id": 53,
        "slip_no": "slip 2",
        "question": "Write a program to read the First Name and Last Name of a person, his weight and height using command line arguments. Calculate the BMI Index which is defined as the individual's body mass divided by the square of their height. (Hint : BMI = Wts. In kgs / (ht)2)",
        "language": "java",
        "code": "public class BMI {\n    public static void main(String[] args) {\n        String firstName = args[0];\n        String lastName = args[1];\n        double weight = Double.parseDouble(args[2]);\n        double height = Double.parseDouble(args[3]);\n\n        double bmi = calculateBMI(weight, height);\n        System.out.println(firstName + \" \" + lastName + \" has a BMI of: \" + bmi);\n    }\n\n    public static double calculateBMI(double weight, double height) {\n        return weight / (height * height);\n    }\n}"
    },
    {
        "id": 54,
        "slip_no": "slip 2",
        "question": "Define a class CricketPlayer (name,no_of_innings,no_of_times_notout, totatruns, bat_avg). Create an array of n player objects. Calculate the batting average for each player using static method avg(). Define a static sort method which sorts the array on the basis of average. Display the player details in sorted order.",
        "language": "java",
        "code": "class CricketPlayer {\n    String name;\n    int no_of_innings;\n    int no_of_times_notout;\n    int totalRuns;\n\n    public CricketPlayer(String name, int no_of_innings, int no_of_times_notout, int totalRuns) {\n        this.name = name;\n        this.no_of_innings = no_of_innings;\n        this.no_of_times_notout = no_of_times_notout;\n        this.totalRuns = totalRuns;\n    }\n\n    public double battingAverage() {\n        return (double) totalRuns / (no_of_innings - no_of_times_notout);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CricketPlayer[] players = new CricketPlayer[3];\n        players[0] = new CricketPlayer(\"Player 1\", 10, 2, 500);\n        players[1] = new CricketPlayer(\"Player 2\", 8, 1, 400);\n        players[2] = new CricketPlayer(\"Player 3\", 12, 4, 600);\n\n        java.util.Arrays.sort(players, (a, b) -> Double.compare(b.battingAverage(), a.battingAverage()));\n\n        for (CricketPlayer player : players) {\n            System.out.println(player.name + \" - Average: \" + player.battingAverage());\n        }\n    }\n}"
    },
    {
        "id": 55,
        "slip_no": "slip 3",
        "question": "Write a program to accept ‘n’ name of cities from the user and sort them in ascending order.",
        "language": "java",
        "code": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class CitySorter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of cities: \");\n        int n = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n\n        String[] cities = new String[n];\n        for (int i = 0; i < n; i++) {\n            System.out.print(\"Enter city \" + (i + 1) + \": \");\n            cities[i] = scanner.nextLine();\n        }\n\n        Arrays.sort(cities);\n        System.out.println(\"Cities in ascending order:\");\n        for (String city : cities) {\n            System.out.println(city);\n        }\n        scanner.close();\n    }\n}"
    },
    {
        "id": 56,
        "slip_no": "slip 3",
        "question": "Define a class patient (patient_name, patient_age, patient_oxy_level, patient_HRCT_report). Create an object of patient. Handle appropriate exception while patient oxygen level less than 95% and HRCT scan report greater than 10, then throw user defined Exception “Patient is Covid Positive(+) and Need to Hospitalized” otherwise display its information.",
        "language": "java",
        "code": "class Patient {\n    String patient_name;\n    int patient_age;\n    double patient_oxy_level;\n    double patient_HRCT_report;\n\n    public Patient(String name, int age, double oxyLevel, double hrctReport) {\n        this.patient_name = name;\n        this.patient_age = age;\n        this.patient_oxy_level = oxyLevel;\n        this.patient_HRCT_report = hrctReport;\n    }\n\n    public void checkPatient() throws Exception {\n        if (patient_oxy_level < 95 && patient_HRCT_report > 10) {\n            throw new Exception(\"Patient is Covid Positive(+) and Need to Hospitalized\");\n        } else {\n            System.out.println(\"Patient Name: \" + patient_name + \", Age: \" + patient_age + \", Oxy Level: \" + patient_oxy_level + \", HRCT Report: \" + patient_HRCT_report);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Patient patient = new Patient(\"John Doe\", 30, 92, 12);\n        try {\n            patient.checkPatient();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}"
    },
    {
        "id": 57,
        "slip_no": "slip 4",
        "question": "Write a program to print an array after changing the rows and columns of a given two-dimensional array.",
        "language": "java",
        "code": "public class ArrayTranspose {\n    public static void main(String[] args) {\n        int[][] original = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int[][] transposed = new int[original[0].length][original.length];\n\n        for (int i = 0; i < original.length; i++) {\n            for (int j = 0; j < original[0].length; j++) {\n                transposed[j][i] = original[i][j];\n            }\n        }\n\n        System.out.println(\"Transposed Array:\");\n        for (int[] row : transposed) {\n            for (int val : row) {\n                System.out.print(val + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "id": 58,
        "slip_no": "slip 4",
        "question": "Write a program to design a screen using Awt that will take a user name and password. If the user name and password are not same, raise an Exception with appropriate message. User can have 3 login chances only. Use clear button to clear the TextFields.",
        "language": "java",
        "code": "import java.awt.*;\nimport java.awt.event.*;\n\npublic class LoginScreen {\n    private static int loginAttempts = 0;\n\n    public static void main(String[] args) {\n        Frame frame = new Frame(\"Login Screen\");\n        Label labelUser = new Label(\"Username:\");\n        Label labelPass = new Label(\"Password:\");\n        TextField userField = new TextField();\n        TextField passField = new TextField();\n        passField.setEchoChar('*');\n        Button loginButton = new Button(\"Login\");\n        Button clearButton = new Button(\"Clear\");\n        TextArea resultArea = new TextArea();\n\n        frame.setLayout(new GridLayout(4, 2));\n        frame.add(labelUser);\n        frame.add(userField);\n        frame.add(labelPass);\n        frame.add(passField);\n        frame.add(loginButton);\n        frame.add(clearButton);\n        frame.add(resultArea);\n\n        loginButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                String username = userField.getText();\n                String password = passField.getText();\n\n                if (loginAttempts < 3) {\n                    if (!username.equals(password)) {\n                        loginAttempts++;\n                        resultArea.setText(\"Login Failed. Attempts: \" + loginAttempts);\n                    } else {\n                        resultArea.setText(\"Login Successful!\");\n                    }\n                } else {\n                    resultArea.setText(\"Maximum login attempts exceeded.\");\n                }\n            }\n        });\n\n        clearButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                userField.setText(\"\");\n                passField.setText(\"\");\n                resultArea.setText(\"\");\n            }\n        });\n\n        frame.setSize(400, 300);\n        frame.setVisible(true);\n        frame.addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent we) {\n                frame.dispose();\n            }\n        });\n    }\n}"
    },
    {
        "id": 59,
        "slip_no": "slip 5",
        "question": "Write a program for multilevel inheritance such that Country is inherited from Continent. State is inherited from Country. Display the place, State, Country and Continent.",
        "language": "java",
        "code": "class Continent {\n    String name;\n\n    public Continent(String name) {\n        this.name = name;\n    }\n}\n\nclass Country extends Continent {\n    String countryName;\n\n    public Country(String continentName, String countryName) {\n        super(continentName);\n        this.countryName = countryName;\n    }\n}\n\nclass State extends Country {\n    String stateName;\n\n    public State(String continentName, String countryName, String stateName) {\n        super(continentName, countryName);\n        this.stateName = stateName;\n    }\n\n    public void display() {\n        System.out.println(\"Continent: \" + name + \", Country: \" + countryName + \", State: \" + stateName);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        State state = new State(\"Asia\", \"India\", \"Karnataka\");\n        state.display();\n    }\n}"
    },
    {
        "id": 60,
        "slip_no": "slip 5",
        "question": "Write a menu driven program to perform the following operations on multidimensional array ie matrices: Addition, Multiplication, Exit.",
        "language": "java",
        "code": "import java.util.Scanner;\n\npublic class MatrixOperations {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of rows: \");\n        int rows = scanner.nextInt();\n        System.out.print(\"Enter the number of columns: \");\n        int cols = scanner.nextInt();\n\n        int[][] matrixA = new int[rows][cols];\n        int[][] matrixB = new int[rows][cols];\n\n        System.out.println(\"Enter elements of Matrix A:\");\n        inputMatrix(scanner, matrixA);\n\n        System.out.println(\"Enter elements of Matrix B:\");\n        inputMatrix(scanner, matrixB);\n\n        while (true) {\n            System.out.println(\"Menu:\\n1. Addition\\n2. Multiplication\\n3. Exit\");\n            int choice = scanner.nextInt();\n\n            switch (choice) {\n                case 1:\n                    int[][] sum = addMatrices(matrixA, matrixB);\n                    System.out.println(\"Sum of matrices:\");\n                    printMatrix(sum);\n                    break;\n                case 2:\n                    int[][] product = multiplyMatrices(matrixA, matrixB);\n                    System.out.println(\"Product of matrices:\");\n                    printMatrix(product);\n                    break;\n                case 3:\n                    System.exit(0);\n                default:\n                    System.out.println(\"Invalid choice!\");\n            }\n        }\n    }\n\n    private static void inputMatrix(Scanner scanner, int[][] matrix) {\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n    }\n\n    private static int[][] addMatrices(int[][] a, int[][] b) {\n        int[][] sum = new int[a.length][a[0].length];\n        for (int i = 0; i < a.length; i++) {\n            for (int j = 0; j < a[i].length; j++) {\n                sum[i][j] = a[i][j] + b[i][j];\n            }\n        }\n        return sum;\n    }\n\n    private static int[][] multiplyMatrices(int[][] a, int[][] b) {\n        int[][] product = new int[a.length][b[0].length];\n        for (int i = 0; i < a.length; i++) {\n            for (int j = 0; j < b[0].length; j++) {\n                for (int k = 0; k < a[0].length; k++) {\n                    product[i][j] += a[i][k] * b[k][j];\n                }\n            }\n        }\n        return product;\n    }\n\n    private static void printMatrix(int[][] matrix) {\n        for (int[] row : matrix) {\n            for (int val : row) {\n                System.out.print(val + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "id": 61,
        "slip_no": "slip 6",
        "question": "Write a program to display the Employee(Empid, Empname, Empdesignation, Empsal) information using toString().",
        "language": "java",
        "code": "class Employee {\n    private int empId;\n    private String empName;\n    private String empDesignation;\n    private double empSal;\n\n    public Employee(int empId, String empName, String empDesignation, double empSal) {\n        this.empId = empId;\n        this.empName = empName;\n        this.empDesignation = empDesignation;\n        this.empSal = empSal;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee ID: \" + empId + \", Name: \" + empName + \", Designation: \" + empDesignation + \", Salary: \" + empSal;\n    }\n\n    public static void main(String[] args) {\n        Employee emp = new Employee(101, \"John Doe\", \"Developer\", 60000);\n        System.out.println(emp);\n    }\n}"
    },
    {
        "id": 62,
        "slip_no": "slip 6",
        "question": "Create an abstract class “order” having members id, description. Create two subclasses “PurchaseOrder” and “Sales Order” having members customer name and Vendor name respectively. Define methods accept and display in all cases. Create 3 objects each of Purchase Order and Sales Order and accept and display details.",
        "language": "java",
        "code": "import java.util.Scanner;\n\nabstract class Order {\n    int id;\n    String description;\n\n    abstract void accept();\n    abstract void display();\n}\n\nclass PurchaseOrder extends Order {\n    String customerName;\n    Scanner scanner = new Scanner(System.in);\n\n    @Override\n    void accept() {\n        System.out.print(\"Enter Purchase Order ID: \");\n        id = scanner.nextInt();\n        scanner.nextLine();  // Consume newline\n        System.out.print(\"Enter Description: \");\n        description = scanner.nextLine();\n        System.out.print(\"Enter Customer Name: \");\n        customerName = scanner.nextLine();\n    }\n\n    @Override\n    void display() {\n        System.out.println(\"Purchase Order ID: \" + id);\n        System.out.println(\"Description: \" + description);\n        System.out.println(\"Customer Name: \" + customerName);\n    }\n}\n\nclass SalesOrder extends Order {\n    String vendorName;\n    Scanner scanner = new Scanner(System.in);\n\n    @Override\n    void accept() {\n        System.out.print(\"Enter Sales Order ID: \");\n        id = scanner.nextInt();\n        scanner.nextLine();  // Consume newline\n        System.out.print(\"Enter Description: \");\n        description = scanner.nextLine();\n        System.out.print(\"Enter Vendor Name: \");\n        vendorName = scanner.nextLine();\n    }\n\n    @Override\n    void display() {\n        System.out.println(\"Sales Order ID: \" + id);\n        System.out.println(\"Description: \" + description);\n        System.out.println(\"Vendor Name: \" + vendorName);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        PurchaseOrder[] purchaseOrders = new PurchaseOrder[3];\n        SalesOrder[] salesOrders = new SalesOrder[3];\n\n        for (int i = 0; i < 3; i++) {\n            purchaseOrders[i] = new PurchaseOrder();\n            System.out.println(\"Enter details for Purchase Order \" + (i + 1));\n            purchaseOrders[i].accept();\n        }\n\n        for (int i = 0; i < 3; i++) {\n            salesOrders[i] = new SalesOrder();\n            System.out.println(\"Enter details for Sales Order \" + (i + 1));\n            salesOrders[i].accept();\n        }\n\n        System.out.println(\"\\nDisplaying Purchase Orders:\");\n        for (PurchaseOrder order : purchaseOrders) {\n            order.display();\n        }\n\n        System.out.println(\"\\nDisplaying Sales Orders:\");\n        for (SalesOrder order : salesOrders) {\n            order.display();\n        }\n    }\n}"
    },
    {
        "id": 63,
        "slip_no": "slip 7",
        "question": "Design a class for Bank. Bank Class should support the following operations; a. Deposit a certain amount into an account b. Withdraw a certain amount from an account c. Return a Balance value specifying the amount with details.",
        "language": "java",
        "code": "class Bank {\n    private double balance;\n\n    public Bank() {\n        this.balance = 0.0;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Deposited: \" + amount);\n        } else {\n            System.out.println(\"Invalid deposit amount!\");\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println(\"Withdrawn: \" + amount);\n        } else {\n            System.out.println(\"Invalid withdrawal amount!\");\n        }\n    }\n\n    public void displayBalance() {\n        System.out.println(\"Current Balance: \" + balance);\n    }\n\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.deposit(1000);\n        bank.withdraw(500);\n        bank.displayBalance();\n    }\n}"
    },
    {
        "id": 64,
        "slip_no": "slip 7",
        "question": "Write a program to accept a text file from user and display the contents of a file in reverse order and change its case.",
        "language": "java",
        "code": "import java.io.*;\nimport java.util.*;\n\npublic class ReverseFileContents {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the file path: \");\n        String filePath = scanner.nextLine();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            List<String> lines = new ArrayList<>();\n            String line;\n\n            while ((line = br.readLine()) != null) {\n                lines.add(line.toUpperCase());\n            }\n\n            Collections.reverse(lines);\n            System.out.println(\"File Contents in Reverse Order:\");\n            for (String reversedLine : lines) {\n                System.out.println(reversedLine);\n            }\n        } catch (IOException e) {\n            System.out.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}"
    },
    {
        "id": 65,
        "slip_no": "slip 8",
        "question": "Create a class Sphere, to calculate the volume and surface area of sphere. (Hint : Surface area=4*3.14(r*r), Volume=(4/3)3.14(r*r*r))",
        "language": "java",
        "code": "class Sphere {\n    private double radius;\n\n    public Sphere(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateVolume() {\n        return (4.0 / 3.0) * Math.PI * Math.pow(radius, 3);\n    }\n\n    public double calculateSurfaceArea() {\n        return 4 * Math.PI * Math.pow(radius, 2);\n    }\n\n    public static void main(String[] args) {\n        Sphere sphere = new Sphere(5);\n        System.out.println(\"Volume of Sphere: \" + sphere.calculateVolume());\n        System.out.println(\"Surface Area of Sphere: \" + sphere.calculateSurfaceArea());\n    }\n}"
    },
    {
        "id": 66,
        "slip_no": "slip 8",
        "question": "Design a screen to handle the Mouse Events such as MOUSE_MOVED and MOUSE_CLICKED and display the position of the Mouse_Click in a TextField.",
        "language": "java",
        "code": "import java.awt.*;\nimport java.awt.event.*;\n\npublic class MouseEventDemo {\n    public static void main(String[] args) {\n        Frame frame = new Frame(\"Mouse Event Example\");\n        TextField textField = new TextField();\n\n        textField.setBounds(50, 50, 200, 30);\n        frame.add(textField);\n        frame.setSize(400, 300);\n        frame.setLayout(null);\n        frame.setVisible(true);\n\n        frame.addMouseMotionListener(new MouseMotionAdapter() {\n            public void mouseMoved(MouseEvent e) {\n                textField.setText(\"Mouse Moved: \" + e.getX() + \", \" + e.getY());\n            }\n        });\n\n        frame.addMouseListener(new MouseAdapter() {\n            public void mouseClicked(MouseEvent e) {\n                textField.setText(\"Mouse Clicked: \" + e.getX() + \", \" + e.getY());\n            }\n        });\n\n        frame.addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent we) {\n                System.exit(0);\n            }\n        });\n    }\n}"
    },
    {
        "id": 67,
        "slip_no": "slip 9",
        "question": "Define a “Clock” class that does the following ; a. Accept Hours, Minutes and Seconds b. Check the validity of numbers c. Set the time to AM/PM mode. Use the necessary constructors and methods to do the above task.",
        "language": "java",
        "code": "class Clock {\n    private int hours;\n    private int minutes;\n    private int seconds;\n\n    public Clock(int hours, int minutes, int seconds) {\n        if (isValidTime(hours, minutes, seconds)) {\n            this.hours = hours;\n            this.minutes = minutes;\n            this.seconds = seconds;\n        } else {\n            throw new IllegalArgumentException(\"Invalid time\");\n        }\n    }\n\n    private boolean isValidTime(int hours, int minutes, int seconds) {\n        return hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60 && seconds >= 0 && seconds < 60;\n    }\n\n    public String to12HourFormat() {\n        int hour12 = hours % 12;\n        hour12 = hour12 == 0 ? 12 : hour12;\n        String ampm = hours < 12 ? \"AM\" : \"PM\";\n        return String.format(\"%02d:%02d:%02d %s\", hour12, minutes, seconds, ampm);\n    }\n\n    public static void main(String[] args) {\n        Clock clock = new Clock(14, 30, 45);\n        System.out.println(\"Time in 12-hour format: \" + clock.to12HourFormat());\n    }\n}"
    },
    {
        "id": 68,
        "slip_no": "slip 9",
        "question": "Write a program to using marker interface create a class Product (product_id, product_name, product_cost, product_quantity) default and parameterized constructor. Create objects of class product and display the contents of each object and Also display the object count.",
        "language": "java",
        "code": "interface MarkerInterface {}\n\nclass Product implements MarkerInterface {\n    private static int objectCount = 0;\n    private int productId;\n    private String productName;\n    private double productCost;\n    private int productQuantity;\n\n    public Product(int productId, String productName, double productCost, int productQuantity) {\n        this.productId = productId;\n        this.productName = productName;\n        this.productCost = productCost;\n        this.productQuantity = productQuantity;\n        objectCount++;\n    }\n\n    public void display() {\n        System.out.println(\"Product ID: \" + productId);\n        System.out.println(\"Product Name: \" + productName);\n        System.out.println(\"Product Cost: \" + productCost);\n        System.out.println(\"Product Quantity: \" + productQuantity);\n    }\n\n    public static int getObjectCount() {\n        return objectCount;\n    }\n\n    public static void main(String[] args) {\n        Product p1 = new Product(1, \"Product A\", 100.0, 5);\n        Product p2 = new Product(2, \"Product B\", 200.0, 10);\n        Product p3 = new Product(3, \"Product C\", 150.0, 8);\n\n        p1.display();\n        p2.display();\n        p3.display();\n\n        System.out.println(\"Total Products Created: \" + Product.getObjectCount());\n    }\n}"
    },
    {
        "id": 69,
        "slip_no": "slip 10",
        "question": "Write a program to find the cube of a given number using a functional interface.",
        "language": "java",
        "code": "import java.util.function.Function;\n\npublic class CubeCalculator {\n    public static void main(String[] args) {\n        Function<Integer, Integer> cube = x -> x * x * x;\n        int number = 3;\n        System.out.println(\"Cube of \" + number + \" is: \" + cube.apply(number));\n    }\n}"
    },
    {
        "id": 70,
        "slip_no": "slip 10",
        "question": "Write a program to create a package name student. Define class StudentInfo with method to display information about student such as rollno, class, and percentage. Create another class StudentPer with method to find the percentage of the student. Accept student details like rollno, name, class and marks of 6 subjects from user.",
        "language": "java",
        "code": "package student;\n\nimport java.util.Scanner;\n\nclass StudentInfo {\n    private String rollNo;\n    private String name;\n    private String studentClass;\n    private double percentage;\n\n    public void acceptDetails() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter Roll No: \");\n        rollNo = scanner.nextLine();\n        System.out.print(\"Enter Name: \");\n        name = scanner.nextLine();\n        System.out.print(\"Enter Class: \");\n        studentClass = scanner.nextLine();\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Roll No: \" + rollNo);\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Class: \" + studentClass);\n        System.out.println(\"Percentage: \" + percentage);\n    }\n}\n\nclass StudentPer {\n    public double calculatePercentage(int[] marks) {\n        double total = 0;\n        for (int mark : marks) {\n            total += mark;\n        }\n        return total / marks.length;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        StudentInfo student = new StudentInfo();\n        student.acceptDetails();\n\n        System.out.print(\"Enter marks of 6 subjects: \");\n        int[] marks = new int[6];\n        for (int i = 0; i < 6; i++) {\n            marks[i] = scanner.nextInt();\n        }\n\n        StudentPer sp = new StudentPer();\n        student.percentage = sp.calculatePercentage(marks);\n        student.displayInfo();\n    }\n}"
    },
    {
        "id": 71,
        "slip_no": "slip 11",
        "question": "Define an interface “Operation” which has method volume( ).Define a constant PI having a value 3.142 Create a class cylinder which implements this interface (members – radius,height). Create one object and calculate the volume.",
        "language": "java",
        "code": "interface Operation {\n    double volume();\n    double PI = 3.142;\n}\n\nclass Cylinder implements Operation {\n    private double radius;\n    private double height;\n\n    public Cylinder(double radius, double height) {\n        this.radius = radius;\n        this.height = height;\n    }\n\n    @Override\n    public double volume() {\n        return PI * radius * radius * height;\n    }\n\n    public static void main(String[] args) {\n        Cylinder cylinder = new Cylinder(5, 10);\n        System.out.println(\"Volume of Cylinder: \" + cylinder.volume());\n    }\n}"
    },
    {
        "id": 72,
        "slip_no": "slip 11",
        "question": "Write a program to accept the username and password from user if username and password are not same then raise \"Invalid Password\" with appropriate msg.",
        "language": "java",
        "code": "import java.util.Scanner;\n\npublic class UsernamePassword {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter username: \");\n        String username = scanner.nextLine();\n        System.out.print(\"Enter password: \");\n        String password = scanner.nextLine();\n\n        if (!username.equals(password)) {\n            System.out.println(\"Invalid Password\");\n        } else {\n            System.out.println(\"Access granted\");\n        }\n    }\n}"
    },
    {
        "id": 73,
        "slip_no": "slip 12",
        "question": "Write a program to create parent class College(cno, cname, caddr) and derived class Department(dno, dname) from College. Write a necessary methods to display College details.",
        "language": "java",
        "code": "class College {\n    private String cno;\n    private String cname;\n    private String caddr;\n\n    public College(String cno, String cname, String caddr) {\n        this.cno = cno;\n        this.cname = cname;\n        this.caddr = caddr;\n    }\n\n    public void displayCollegeDetails() {\n        System.out.println(\"College No: \" + cno);\n        System.out.println(\"College Name: \" + cname);\n        System.out.println(\"College Address: \" + caddr);\n    }\n}\n\nclass Department extends College {\n    private String dno;\n    private String dname;\n\n    public Department(String cno, String cname, String caddr, String dno, String dname) {\n        super(cno, cname, caddr);\n        this.dno = dno;\n        this.dname = dname;\n    }\n\n    public void displayDepartmentDetails() {\n        displayCollegeDetails();\n        System.out.println(\"Department No: \" + dno);\n        System.out.println(\"Department Name: \" + dname);\n    }\n\n    public static void main(String[] args) {\n        Department dept = new Department(\"C001\", \"ABC College\", \"123 Main St\", \"D001\", \"Computer Science\");\n        dept.displayDepartmentDetails();\n    }\n}"
    },
    {
        "id": 74,
        "slip_no": "slip 12",
        "question": "Write a java program that works as a simple calculator. Use a grid layout to arrange buttons for the digits and for the +, -, *, % operations. Add a text field to display the result.",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class SimpleCalculator extends JFrame implements ActionListener {\n    private JTextField textField;\n    private String operator;\n    private double num1, num2, result;\n\n    public SimpleCalculator() {\n        setTitle(\"Simple Calculator\");\n        setSize(300, 400);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n\n        textField = new JTextField();\n        textField.setEditable(false);\n        textField.setFont(new Font(\"Arial\", Font.PLAIN, 24));\n\n        JPanel panel = new JPanel();\n        panel.setLayout(new GridLayout(4, 4));\n\n        String[] buttonLabels = {\"7\", \"8\", \"9\", \"/\", \"4\", \"5\", \"6\", \"*\", \"1\", \"2\", \"3\", \"-\", \"C\", \"0\", \"=\", \"+\"};\n\n        for (String label : buttonLabels) {\n            JButton button = new JButton(label);\n            button.addActionListener(this);\n            panel.add(button);\n        }\n\n        add(textField, BorderLayout.NORTH);\n        add(panel);\n    }\n\n    public void actionPerformed(ActionEvent e) {\n        String command = e.getActionCommand();\n\n        if (command.charAt(0) >= '0' && command.charAt(0) <= '9') {\n            textField.setText(textField.getText() + command);\n        } else if (command.equals(\"C\")) {\n            textField.setText(\"\");\n            num1 = num2 = result = 0;\n        } else if (command.equals(\"=\")) {\n            num2 = Double.parseDouble(textField.getText());\n            switch (operator) {\n                case \"+\":\n                    result = num1 + num2;\n                    break;\n                case \"-\":\n                    result = num1 - num2;\n                    break;\n                case \"*\":\n                    result = num1 * num2;\n                    break;\n                case \"/\":\n                    result = num1 / num2;\n                    break;\n            }\n            textField.setText(String.valueOf(result));\n        } else {\n            if (!operator.isEmpty()) {\n                num1 = Double.parseDouble(textField.getText());\n            }\n            operator = command;\n            textField.setText(\"\");\n        }\n    }\n\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        calculator.setVisible(true);\n    }\n}"
    },
    {
        "id": 75,
        "slip_no": "slip 13",
        "question": "Write a program to accept a file name from command prompt, if the file exits then display number of words and lines in that file.",
        "language": "java",
        "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class FileWordLineCounter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the file name: \");\n        String fileName = scanner.nextLine();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            int lineCount = 0;\n            int wordCount = 0;\n\n            while ((line = br.readLine()) != null) {\n                lineCount++;\n                String[] words = line.split(\"\\s+\");\n                wordCount += words.length;\n            }\n\n            System.out.println(\"Number of lines: \" + lineCount);\n            System.out.println(\"Number of words: \" + wordCount);\n        } catch (IOException e) {\n            System.out.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}"
    },
    {
        "id": 76,
        "slip_no": "slip 13",
        "question": "Write a program to display the system date and time in various formats shown below: Current date is : 31/08/2021 Current date is : 08-31-2021 Current date is : Tuesday August 31 2021 Current date and time is : Fri August 31 15: 25: 59 IST 2021 Current date and time is : 31/08/21 15: 25: 59 PM +0530",
        "language": "java",
        "code": "import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.TimeZone;\n\npublic class DateTimeDisplay {\n    public static void main(String[] args) {\n        Date date = new Date();\n        SimpleDateFormat sdf1 = new SimpleDateFormat(\"dd/MM/yyyy\");\n        SimpleDateFormat sdf2 = new SimpleDateFormat(\"MM-dd-yyyy\");\n        SimpleDateFormat sdf3 = new SimpleDateFormat(\"EEEE MMMM dd yyyy\");\n        SimpleDateFormat sdf4 = new SimpleDateFormat(\"EEE MMMM dd HH:mm:ss z yyyy\");\n        SimpleDateFormat sdf5 = new SimpleDateFormat(\"dd/MM/yy hh:mm:ss a z\");\n        sdf5.setTimeZone(TimeZone.getDefault());\n\n        System.out.println(\"Current date is : \" + sdf1.format(date));\n        System.out.println(\"Current date is : \" + sdf2.format(date));\n        System.out.println(\"Current date is : \" + sdf3.format(date));\n        System.out.println(\"Current date and time is : \" + sdf4.format(date));\n        System.out.println(\"Current date and time is : \" + sdf5.format(date));\n    }\n}"
    },
    {
        "id": 77,
        "slip_no": "slip 14",
        "question": "Write a program to accept a number from the user, if number is zero then throw user defined exception “Number is 0” otherwise check whether no is prime or not (Use static keyword).",
        "language": "java",
        "code": "import java.util.Scanner;\n\nclass ZeroException extends Exception {\n    public ZeroException(String message) {\n        super(message);\n    }\n}\n\npublic class PrimeChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n\n        try {\n            checkNumber(number);\n        } catch (ZeroException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    static void checkNumber(int number) throws ZeroException {\n        if (number == 0) {\n            throw new ZeroException(\"Number is 0\");\n        } else {\n            if (isPrime(number)) {\n                System.out.println(number + \" is a prime number.\");\n            } else {\n                System.out.println(number + \" is not a prime number.\");\n            }\n        }\n    }\n\n    static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}"
    },
    {
        "id": 78,
        "slip_no": "slip 14",
        "question": "Write a Java program to create a Package “SY” which has a class SYMarks (members – ComputerTotal, MathsTotal, and ElectronicsTotal). Create another package TY which has a class TYMarks (members – Theory, Practicals). Create ‘n’ objects of Student class (having rollNumber, name, SYMarks and TYMarks). Add the marks of SY and TY computer subjects and calculate the Grade (‘A’ for >= 70, ‘B’ for >= 60 ‘C’ for >= 50, Pass Class for > =40 else‘FAIL’) and display the result of the student in proper format.",
        "language": "java",
        "code": "package SY;\n\npublic class SYMarks {\n    public int ComputerTotal;\n    public int MathsTotal;\n    public int ElectronicsTotal;\n\n    public SYMarks(int compTotal, int mathTotal, int elecTotal) {\n        this.ComputerTotal = compTotal;\n        this.MathsTotal = mathTotal;\n        this.ElectronicsTotal = elecTotal;\n    }\n}\n\npackage TY;\n\npublic class TYMarks {\n    public int Theory;\n    public int Practicals;\n\n    public TYMarks(int theory, int practicals) {\n        this.Theory = theory;\n        this.Practicals = practicals;\n    }\n}\n\nimport SY.SYMarks;\nimport TY.TYMarks;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Student {\n    private String rollNumber;\n    private String name;\n    private SYMarks syMarks;\n    private TYMarks tyMarks;\n\n    public Student(String rollNumber, String name, SYMarks syMarks, TYMarks tyMarks) {\n        this.rollNumber = rollNumber;\n        this.name = name;\n        this.syMarks = syMarks;\n        this.tyMarks = tyMarks;\n    }\n\n    public void displayResult() {\n        int totalMarks = syMarks.ComputerTotal + tyMarks.Theory;\n        char grade;\n        if (totalMarks >= 70) grade = 'A';\n        else if (totalMarks >= 60) grade = 'B';\n        else if (totalMarks >= 50) grade = 'C';\n        else if (totalMarks >= 40) grade = 'D';\n        else grade = 'F';\n\n        System.out.println(\"Student: \" + name + \", Roll No: \" + rollNumber + \", Grade: \" + grade);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"101\", \"John\", new SYMarks(70, 80, 90), new TYMarks(75, 85)));\n        students.add(new Student(\"102\", \"Jane\", new SYMarks(65, 55, 60), new TYMarks(70, 75)));\n\n        for (Student student : students) {\n            student.displayResult();\n        }\n    }\n}"
    },
    {
        "id": 79,
        "slip_no": "slip 15",
        "question": "Accept the names of two files and copy the contents of the first to the second. First file having Book name and Author name in file.",
        "language": "java",
        "code": "import java.io.*;\nimport java.util.Scanner;\n\npublic class FileCopy {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the source file name: \");\n        String sourceFileName = scanner.nextLine();\n        System.out.print(\"Enter the destination file name: \");\n        String destinationFileName = scanner.nextLine();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(sourceFileName));\n             BufferedWriter bw = new BufferedWriter(new FileWriter(destinationFileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                bw.write(line);\n                bw.newLine();\n            }\n            System.out.println(\"Contents copied successfully.\");\n        } catch (IOException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}"
    },
    {
        "id": 80,
        "slip_no": "slip 15",
        "question": "Write a program to define a class Account having members custname, accno. Define default and parameterized constructor. Create a subclass called SavingAccount with member savingbal, minbal. Create a derived class AccountDetail that extends the class SavingAccount with members, depositamt and withdrawalamt. Write a appropriate method to display customer details.",
        "language": "java",
        "code": "class Account {\n    protected String custname;\n    protected String accno;\n\n    public Account() {}\n\n    public Account(String custname, String accno) {\n        this.custname = custname;\n        this.accno = accno;\n    }\n}\n\nclass SavingAccount extends Account {\n    protected double savingbal;\n    protected double minbal;\n\n    public SavingAccount(String custname, String accno, double savingbal, double minbal) {\n        super(custname, accno);\n        this.savingbal = savingbal;\n        this.minbal = minbal;\n    }\n}\n\nclass AccountDetail extends SavingAccount {\n    private double depositamt;\n    private double withdrawalamt;\n\n    public AccountDetail(String custname, String accno, double savingbal, double minbal, double depositamt, double withdrawalamt) {\n        super(custname, accno, savingbal, minbal);\n        this.depositamt = depositamt;\n        this.withdrawalamt = withdrawalamt;\n    }\n\n    public void displayCustomerDetails() {\n        System.out.println(\"Customer Name: \" + custname);\n        System.out.println(\"Account No: \" + accno);\n        System.out.println(\"Saving Balance: \" + savingbal);\n        System.out.println(\"Minimum Balance: \" + minbal);\n        System.out.println(\"Deposit Amount: \" + depositamt);\n        System.out.println(\"Withdrawal Amount: \" + withdrawalamt);\n    }\n\n    public static void main(String[] args) {\n        AccountDetail accDetail = new AccountDetail(\"John Doe\", \"ACC12345\", 1000.00, 500.00, 200.00, 150.00);\n        accDetail.displayCustomerDetails();\n    }\n}"
    },
    {
        "id": 81,
        "slip_no": "slip 16",
        "question": "Write a program to find the Square of given number using function interface.",
        "language": "java",
        "code": "import java.util.function.Function;\n\npublic class SquareCalculator {\n    public static void main(String[] args) {\n        Function<Integer, Integer> square = (n) -> n * n;\n        int number = 5; // Example number\n        System.out.println(\"Square of \" + number + \" is: \" + square.apply(number));\n    }\n}"
    },
    {
        "id": 82,
        "slip_no": "slip 16",
        "question": "Write a program to design a screen using Awt that, File has option new, open, save, show about, exit and another two mean options Edit and About.",
        "language": "java",
        "code": "import java.awt.*;\nimport java.awt.event.*;\n\npublic class MenuExample extends Frame implements ActionListener {\n    public MenuExample() {\n        MenuBar mb = new MenuBar();\n        Menu fileMenu = new Menu(\"File\");\n        fileMenu.add(new MenuItem(\"New\"));\n        fileMenu.add(new MenuItem(\"Open\"));\n        fileMenu.add(new MenuItem(\"Save\"));\n        fileMenu.add(new MenuItem(\"Show About\"));\n        fileMenu.add(new MenuItem(\"Exit\"));\n\n        Menu editMenu = new Menu(\"Edit\");\n        editMenu.add(new MenuItem(\"Edit Option 1\"));\n        editMenu.add(new MenuItem(\"Edit Option 2\"));\n\n        mb.add(fileMenu);\n        mb.add(editMenu);\n        setMenuBar(mb);\n\n        setTitle(\"AWT Menu Example\");\n        setSize(400, 300);\n        setVisible(true);\n\n        addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent we) {\n                System.exit(0);\n            }\n        });\n    }\n\n    public void actionPerformed(ActionEvent e) {\n        // Handle menu actions here\n    }\n\n    public static void main(String[] args) {\n        new MenuExample();\n    }\n}"
    },
    {
        "id": 83,
        "slip_no": "slip 17",
        "question": "Design a Super class Customer (name, phone-number). Derive a class Depositor(accno, balance) from Customer. Again, derive a class Borrower (loan-no, loan-amt) from Depositor. Write necessary member functions to read and display the details of ‘n’ customers.",
        "language": "java",
        "code": "import java.util.Scanner;\n\nclass Customer {\n    String name;\n    String phoneNumber;\n\n    public Customer(String name, String phoneNumber) {\n        this.name = name;\n        this.phoneNumber = phoneNumber;\n    }\n\n    public void displayCustomerDetails() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Phone Number: \" + phoneNumber);\n    }\n}\n\nclass Depositor extends Customer {\n    String accno;\n    double balance;\n\n    public Depositor(String name, String phoneNumber, String accno, double balance) {\n        super(name, phoneNumber);\n        this.accno = accno;\n        this.balance = balance;\n    }\n\n    public void displayDepositorDetails() {\n        displayCustomerDetails();\n        System.out.println(\"Account Number: \" + accno);\n        System.out.println(\"Balance: \" + balance);\n    }\n}\n\nclass Borrower extends Depositor {\n    String loanNo;\n    double loanAmt;\n\n    public Borrower(String name, String phoneNumber, String accno, double balance, String loanNo, double loanAmt) {\n        super(name, phoneNumber, accno, balance);\n        this.loanNo = loanNo;\n        this.loanAmt = loanAmt;\n    }\n\n    public void displayBorrowerDetails() {\n        displayDepositorDetails();\n        System.out.println(\"Loan Number: \" + loanNo);\n        System.out.println(\"Loan Amount: \" + loanAmt);\n    }\n}\n\npublic class CustomerDetails {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter number of customers: \");\n        int n = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n        Borrower[] borrowers = new Borrower[n];\n\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Enter details for customer \" + (i + 1) + \":\");\n            System.out.print(\"Name: \");\n            String name = scanner.nextLine();\n            System.out.print(\"Phone Number: \");\n            String phone = scanner.nextLine();\n            System.out.print(\"Account Number: \");\n            String accno = scanner.nextLine();\n            System.out.print(\"Balance: \");\n            double balance = scanner.nextDouble();\n            scanner.nextLine(); // Consume newline\n            System.out.print(\"Loan Number: \");\n            String loanNo = scanner.nextLine();\n            System.out.print(\"Loan Amount: \");\n            double loanAmt = scanner.nextDouble();\n            scanner.nextLine(); // Consume newline\n\n            borrowers[i] = new Borrower(name, phone, accno, balance, loanNo, loanAmt);\n        }\n\n        System.out.println(\"\\nCustomer Details:\\\");\n        for (Borrower borrower : borrowers) {\n            borrower.displayBorrowerDetails();\n            System.out.println();\n        }\n    }\n}"
    },
    {
        "id": 84,
        "slip_no": "slip 17",
        "question": "Write Java program to design three text boxes and two buttons using swing. Enter different strings in first and second textbox. On clicking the First command button, concatenation of two strings should be displayed in third text box and on clicking second command button, reverse of string should display in third text box.",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.event.*;\n\npublic class StringManipulator {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"String Manipulator\");\n        JTextField text1 = new JTextField(15);\n        JTextField text2 = new JTextField(15);\n        JTextField result = new JTextField(15);\n        JButton concatButton = new JButton(\"Concatenate\");\n        JButton reverseButton = new JButton(\"Reverse\");\n\n        concatButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                String concatenated = text1.getText() + text2.getText();\n                result.setText(concatenated);\n            }\n        });\n\n        reverseButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                String reversed = new StringBuilder(text1.getText()).reverse().toString();\n                result.setText(reversed);\n            }\n        });\n\n        JPanel panel = new JPanel();\n        panel.add(text1);\n        panel.add(text2);\n        panel.add(concatButton);\n        panel.add(reverseButton);\n        panel.add(result);\n\n        frame.add(panel);\n        frame.setSize(400, 200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n    }\n}"
    },
    {
        "id": 85,
        "slip_no": "slip 18",
        "question": "Write a program to implement Border Layout Manager.",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.*;\n\npublic class BorderLayoutExample {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Border Layout Example\");\n        frame.setLayout(new BorderLayout());\n\n        frame.add(new JButton(\"North\"), BorderLayout.NORTH);\n        frame.add(new JButton(\"South\"), BorderLayout.SOUTH);\n        frame.add(new JButton(\"East\"), BorderLayout.EAST);\n        frame.add(new JButton(\"West\"), BorderLayout.WEST);\n        frame.add(new JButton(\"Center\"), BorderLayout.CENTER);\n\n        frame.setSize(400, 300);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n    }\n}"
    },
    {
        "id": 86,
        "slip_no": "slip 18",
        "question": "Define a class CricketPlayer (name, no_of_innings, no_of_times_notout, totalruns, bat_avg). Create an array of n player objects. Calculate the batting average for each player using static method avg(). Define a static sort method which sorts the array on the basis of average. Display the player details in sorted order.",
        "language": "java",
        "code": "class CricketPlayer {\n    String name;\n    int noOfInnings;\n    int noOfTimesNotOut;\n    int totalRuns;\n\n    public CricketPlayer(String name, int noOfInnings, int noOfTimesNotOut, int totalRuns) {\n        this.name = name;\n        this.noOfInnings = noOfInnings;\n        this.noOfTimesNotOut = noOfTimesNotOut;\n        this.totalRuns = totalRuns;\n    }\n\n    public double avg() {\n        return (double) totalRuns / noOfInnings;\n    }\n\n    public String toString() {\n        return \"Name: \" + name + \", Innings: \" + noOfInnings + \", Not Out: \" + noOfTimesNotOut + \", Total Runs: \" + totalRuns + \", Average: \" + avg();\n    }\n}\n\npublic class CricketPlayerDemo {\n    public static void sortByAvg(CricketPlayer[] players) {\n        for (int i = 0; i < players.length - 1; i++) {\n            for (int j = i + 1; j < players.length; j++) {\n                if (players[i].avg() < players[j].avg()) {\n                    CricketPlayer temp = players[i];\n                    players[i] = players[j];\n                    players[j] = temp;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        CricketPlayer[] players = new CricketPlayer[3];\n        players[0] = new CricketPlayer(\"Player1\", 10, 3, 450);\n        players[1] = new CricketPlayer(\"Player2\", 12, 4, 600);\n        players[2] = new CricketPlayer(\"Player3\", 8, 2, 250);\n\n        sortByAvg(players);\n\n        System.out.println(\"Player Details in Sorted Order:\");\n        for (CricketPlayer player : players) {\n            System.out.println(player);\n        }\n    }\n}"
    },
    {
        "id": 87,
        "slip_no": "slip 19",
        "question": "Write a program to accept the two-dimensional array from user and display the sum of its diagonal elements.",
        "language": "java",
        "code": "import java.util.Scanner;\n\npublic class DiagonalSum {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the size of the matrix (n x n): \");\n        int n = scanner.nextInt();\n        int[][] matrix = new int[n][n];\n\n        System.out.println(\"Enter the elements of the matrix:\");\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += matrix[i][i]; // Sum of diagonal elements\n        }\n\n        System.out.println(\"Sum of diagonal elements: \" + sum);\n    }\n}"
    },
    {
        "id": 88,
        "slip_no": "slip 19",
        "question": "Write a program which shows the combo box which includes list of T.Y.B.Sc.(Comp. Sci) subjects. Display the selected subject in a text field.",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.event.*;\n\npublic class ComboBoxExample {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Combo Box Example\");\n        String[] subjects = {\"Data Structures\", \"Algorithms\", \"Database Management Systems\", \"Operating Systems\"};\n        JComboBox<String> comboBox = new JComboBox<>(subjects);\n        JTextField textField = new JTextField(20);\n\n        comboBox.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                textField.setText((String) comboBox.getSelectedItem());\n            }\n        });\n\n        JPanel panel = new JPanel();\n        panel.add(comboBox);\n        panel.add(textField);\n\n        frame.add(panel);\n        frame.setSize(300, 200);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n    }\n}"
    },
    {
        "id": 89,
        "slip_no": "slip 20",
        "question": "Write a Program to illustrate multilevel Inheritance such that country is inherited from continent. State is inherited from country. Display the place, state, country, and continent.",
        "language": "java",
        "code": "class Continent {\n    String name;\n\n    public Continent(String name) {\n        this.name = name;\n    }\n}\n\nclass Country extends Continent {\n    String countryName;\n\n    public Country(String continentName, String countryName) {\n        super(continentName);\n        this.countryName = countryName;\n    }\n}\n\nclass State extends Country {\n    String stateName;\n\n    public State(String continentName, String countryName, String stateName) {\n        super(continentName, countryName);\n        this.stateName = stateName;\n    }\n}\n\npublic class MultilevelInheritance {\n    public static void main(String[] args) {\n        State state = new State(\"Asia\", \"India\", \"Maharashtra\");\n        System.out.println(\"Continent: \" + state.name);\n        System.out.println(\"Country: \" + state.countryName);\n        System.out.println(\"State: \" + state.stateName);\n    }\n}"
    },
    {
        "id": 90,
        "slip_no": "slip 20",
        "question": "Write a package for Operation, which has two classes, Addition and Maximum. Addition has two methods add() and subtract(), which are used to add two integers and subtract two float values respectively. Maximum has a method max() to display the maximum of two integers.",
        "language": "java",
        "code": "package Operation;\n\npublic class Addition {\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public float subtract(float a, float b) {\n        return a - b;\n    }\n}\n\npublic class Maximum {\n    public int max(int a, int b) {\n        return (a > b) ? a : b;\n    }\n}\n\n// Main class to test the package\nimport Operation.*;\n\nclass TestOperations {\n    public static void main(String[] args) {\n        Addition addition = new Addition();\n        Maximum maximum = new Maximum();\n\n        System.out.println(\"Addition: \" + addition.add(5, 3));\n        System.out.println(\"Subtraction: \" + addition.subtract(5.5f, 3.2f));\n        System.out.println(\"Maximum: \" + maximum.max(5, 10));\n    }\n}"
    },
    {
        "id": 91,
        "slip_no": "slip 21",
        "question": "Define a class MyDate(Day, Month, year) with methods to accept and display a MyDate object. Accept date as dd, mm, yyyy. Throw user defined exception 'InvalidDateException' if the date is invalid.",
        "language": "java",
        "code": "import java.util.Scanner;\n\nclass InvalidDateException extends Exception {\n    public InvalidDateException(String message) {\n        super(message);\n    }\n}\n\nclass MyDate {\n    private int day, month, year;\n\n    public MyDate(int day, int month, int year) throws InvalidDateException {\n        if (day < 1 || day > 31 || month < 1 || month > 12) {\n            throw new InvalidDateException(\"Invalid date: \" + day + \"/\" + month + \"/\" + year);\n        }\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n\n    public void display() {\n        System.out.println(\"Date: \" + day + \"/\" + month + \"/\" + year);\n    }\n}\n\npublic class DateTest {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter date (dd mm yyyy): \");\n        int day = scanner.nextInt();\n        int month = scanner.nextInt();\n        int year = scanner.nextInt();\n        try {\n            MyDate date = new MyDate(day, month, year);\n            date.display();\n        } catch (InvalidDateException e) {\n            System.out.println(e.getMessage());\n        }\n        scanner.close();\n    }\n}"
    },
    {
        "id": 92,
        "slip_no": "slip 21",
        "question": "Create an employee class(id, name, deptname, salary). Define a default and parameterized constructor. Use ‘this’ keyword to initialize instance variables. Keep a count of objects created. Create objects using parameterized constructor and display the object count after each object is created. (Use static member and method). Also display the contents of each object.",
        "language": "java",
        "code": "class Employee {\n    private int id;\n    private String name;\n    private String deptName;\n    private double salary;\n    private static int objectCount = 0;\n\n    public Employee() {\n        objectCount++;\n    }\n\n    public Employee(int id, String name, String deptName, double salary) {\n        this.id = id;\n        this.name = name;\n        this.deptName = deptName;\n        this.salary = salary;\n        objectCount++;\n        displayCount();\n    }\n\n    public void displayCount() {\n        System.out.println(\"Total Employee Objects Created: \" + objectCount);\n    }\n\n    public void display() {\n        System.out.println(\"ID: \" + id + \", Name: \" + name + \", Department: \" + deptName + \", Salary: \" + salary);\n    }\n}\n\npublic class EmployeeTest {\n    public static void main(String[] args) {\n        Employee emp1 = new Employee(1, \"Alice\", \"HR\", 50000);\n        emp1.display();\n        Employee emp2 = new Employee(2, \"Bob\", \"IT\", 60000);\n        emp2.display();\n        Employee emp3 = new Employee(3, \"Charlie\", \"Finance\", 55000);\n        emp3.display();\n    }\n}"
    },
    {
        "id": 93,
        "slip_no": "slip 22",
        "question": "Write a program to create an abstract class named Shape that contains two integers and an empty method named printArea(). Provide three classes named Rectangle, Triangle and Circle such that each one of the classes extends the class Shape. Each one of the classes contain only the method printArea() that prints the area of the given shape. (use method overriding).",
        "language": "java",
        "code": "abstract class Shape {\n    protected int dimension1, dimension2;\n\n    public Shape(int dimension1, int dimension2) {\n        this.dimension1 = dimension1;\n        this.dimension2 = dimension2;\n    }\n\n    abstract void printArea();\n}\n\nclass Rectangle extends Shape {\n    public Rectangle(int length, int width) {\n        super(length, width);\n    }\n\n    @Override\n    void printArea() {\n        System.out.println(\"Area of Rectangle: \" + (dimension1 * dimension2));\n    }\n}\n\nclass Triangle extends Shape {\n    public Triangle(int base, int height) {\n        super(base, height);\n    }\n\n    @Override\n    void printArea() {\n        System.out.println(\"Area of Triangle: \" + (0.5 * dimension1 * dimension2));\n    }\n}\n\nclass Circle extends Shape {\n    public Circle(int radius) {\n        super(radius, 0);\n    }\n\n    @Override\n    void printArea() {\n        System.out.println(\"Area of Circle: \" + (Math.PI * dimension1 * dimension1));\n    }\n}\n\npublic class ShapeTest {\n    public static void main(String[] args) {\n        Shape rect = new Rectangle(10, 5);\n        rect.printArea();\n        Shape tri = new Triangle(10, 5);\n        tri.printArea();\n        Shape circle = new Circle(7);\n        circle.printArea();\n    }\n}"
    },
    {
        "id": 94,
        "slip_no": "slip 22",
        "question": "Write a program that handles all mouse events and shows the event name at the center of the Window, red in color when a mouse event is fired. (Use adapter classes).",
        "language": "java",
        "code": "import java.awt.*;\nimport java.awt.event.*;\n\npublic class MouseEventExample extends Frame {\n    private Label label;\n\n    public MouseEventExample() {\n        setTitle(\"Mouse Events\");\n        setSize(400, 400);\n        setLayout(null);\n\n        label = new Label(\"Mouse Event: \", Label.CENTER);\n        label.setBounds(100, 150, 200, 30);\n        label.setFont(new Font(\"Arial\", Font.BOLD, 16));\n        label.setForeground(Color.RED);\n        add(label);\n\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                label.setText(\"Mouse Clicked\");\n            }\n\n            @Override\n            public void mouseEntered(MouseEvent e) {\n                label.setText(\"Mouse Entered\");\n            }\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                label.setText(\"Mouse Exited\");\n            }\n        });\n\n        addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent we) {\n                System.exit(0);\n            }\n        });\n\n        setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        new MouseEventExample();\n    }\n}"
    },
    {
        "id": 95,
        "slip_no": "slip 23",
        "question": "Define a class MyNumber having one private int data member. Write a default constructor to initialize it to 0 and another constructor to initialize it to a value (Use this). Write methods isNegative, isPositive, isZero, isOdd, isEven. Create an object in main. Use command line arguments to pass a value to the Object.",
        "language": "java",
        "code": "public class MyNumber {\n    private int number;\n\n    public MyNumber() {\n        this(0);\n    }\n\n    public MyNumber(int number) {\n        this.number = number;\n    }\n\n    public boolean isNegative() {\n        return number < 0;\n    }\n\n    public boolean isPositive() {\n        return number > 0;\n    }\n\n    public boolean isZero() {\n        return number == 0;\n    }\n\n    public boolean isOdd() {\n        return number % 2 != 0;\n    }\n\n    public boolean isEven() {\n        return number % 2 == 0;\n    }\n}\n\npublic class MyNumberTest {\n    public static void main(String[] args) {\n        if (args.length > 0) {\n            int value = Integer.parseInt(args[0]);\n            MyNumber myNum = new MyNumber(value);\n            System.out.println(\"Number: \" + value);\n            System.out.println(\"Is Negative: \" + myNum.isNegative());\n            System.out.println(\"Is Positive: \" + myNum.isPositive());\n            System.out.println(\"Is Zero: \" + myNum.isZero());\n            System.out.println(\"Is Odd: \" + myNum.isOdd());\n            System.out.println(\"Is Even: \" + myNum.isEven());\n        } else {\n            System.out.println(\"Please provide a number as command line argument.\");\n        }\n    }\n}"
    },
    {
        "id": 96,
        "slip_no": "slip 23",
        "question": "Write a simple currency converter, as shown in the figure. User can enter the amount of 'Singapore Dollars', 'US Dollars', or 'Euros', in floating-point number. The converted values shall be displayed to 2 decimal places. Assume that 1 USD = 1.41 SGD, 1 USD = 0.92 Euro, 1 SGD = 0.65 Euro.",
        "language": "java",
        "code": "import java.util.Scanner;\n\npublic class CurrencyConverter {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter amount in Singapore Dollars (SGD):\");\n        double sgd = scanner.nextDouble();\n        System.out.println(\"Enter amount in US Dollars (USD):\");\n        double usd = scanner.nextDouble();\n        System.out.println(\"Enter amount in Euros:\");\n        double euro = scanner.nextDouble();\n\n        double convertedToUSDFromSGD = sgd / 1.41;\n        double convertedToEuroFromUSD = usd * 0.92;\n        double convertedToSGDFromEuro = euro / 0.65;\n\n        System.out.printf(\"%.2f SGD = %.2f USD\\n\", sgd, convertedToUSDFromSGD);\n        System.out.printf(\"%.2f USD = %.2f Euro\\n\", usd, convertedToEuroFromUSD);\n        System.out.printf(\"%.2f Euro = %.2f SGD\\n\", euro, convertedToSGDFromEuro);\n\n        scanner.close();\n    }\n}"
    },
    {
        "id": 97,
        "slip_no": "slip 24",
        "question": "Create an abstract class 'Bank' with an abstract method 'getBalance'. Rs.100, Rs.150 and Rs.200 are deposited in banks A, B and C respectively. 'BankA', 'BankB' and 'BankC' are subclasses of class 'Bank', each having a method named 'getBalance'. Call this method by creating an object of each of the three classes.",
        "language": "java",
        "code": "abstract class Bank {\n    abstract void getBalance();\n}\n\nclass BankA extends Bank {\n    private int balance = 100;\n\n    @Override\n    void getBalance() {\n        System.out.println(\"Bank A Balance: Rs. \" + balance);\n    }\n}\n\nclass BankB extends Bank {\n    private int balance = 150;\n\n    @Override\n    void getBalance() {\n        System.out.println(\"Bank B Balance: Rs. \" + balance);\n    }\n}\n\nclass BankC extends Bank {\n    private int balance = 200;\n\n    @Override\n    void getBalance() {\n        System.out.println(\"Bank C Balance: Rs. \" + balance);\n    }\n}\n\npublic class BankTest {\n    public static void main(String[] args) {\n        Bank bankA = new BankA();\n        Bank bankB = new BankB();\n        Bank bankC = new BankC();\n\n        bankA.getBalance();\n        bankB.getBalance();\n        bankC.getBalance();\n    }\n}"
    },
    {
        "id": 98,
        "slip_no": "slip 24",
        "question": "Program that displays three concentric circles where ever the user clicks the mouse on a frame. The program must exit when user clicks ‘X’ on the frame.",
        "language": "java",
        "code": "import java.awt.*;\nimport java.awt.event.*;\n\npublic class ConcentricCircles extends Frame {\n    public ConcentricCircles() {\n        setTitle(\"Concentric Circles\");\n        setSize(400, 400);\n        setVisible(true);\n\n        addMouseListener(new MouseAdapter() {\n            public void mouseClicked(MouseEvent e) {\n                Graphics g = getGraphics();\n                int x = e.getX();\n                int y = e.getY();\n                drawCircles(g, x, y);\n            }\n        });\n\n        addWindowListener(new WindowAdapter() {\n            public void windowClosing(WindowEvent we) {\n                System.exit(0);\n            }\n        });\n    }\n\n    private void drawCircles(Graphics g, int x, int y) {\n        for (int radius = 10; radius <= 30; radius += 10) {\n            g.drawOval(x - radius, y - radius, 2 * radius, 2 * radius);\n        }\n    }\n\n    public static void main(String[] args) {\n        new ConcentricCircles();\n    }\n}"
    },
    {
        "id": 99,
        "slip_no": "slip 25",
        "question": "Create a class Student(rollno, name, class, per), to read student information from the console and display them (Using BufferedReader class).",
        "language": "java",
        "code": "import java.io.*;\n\nclass Student {\n    private int rollNo;\n    private String name;\n    private String className;\n    private float percentage;\n\n    public Student(int rollNo, String name, String className, float percentage) {\n        this.rollNo = rollNo;\n        this.name = name;\n        this.className = className;\n        this.percentage = percentage;\n    }\n\n    public void display() {\n        System.out.println(\"Roll No: \" + rollNo);\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Class: \" + className);\n        System.out.println(\"Percentage: \" + percentage + \"%\");\n    }\n}\n\npublic class StudentTest {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        System.out.print(\"Enter Roll No: \");\n        int rollNo = Integer.parseInt(reader.readLine());\n        System.out.print(\"Enter Name: \");\n        String name = reader.readLine();\n        System.out.print(\"Enter Class: \");\n        String className = reader.readLine();\n        System.out.print(\"Enter Percentage: \");\n        float percentage = Float.parseFloat(reader.readLine());\n\n        Student student = new Student(rollNo, name, className, percentage);\n        student.display();\n    }\n}"
    },
    {
        "id": 100,
        "slip_no": "slip 25",
        "question": "Create the following GUI screen using appropriate layout manager. Accept the name, class, hobbies from the user and display the selected options in a textbox.",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class UserInputGUI {\n    public UserInputGUI() {\n        JFrame frame = new JFrame(\"User Input Form\");\n        frame.setSize(400, 300);\n        frame.setLayout(new FlowLayout());\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        JLabel nameLabel = new JLabel(\"Name:\");\n        JTextField nameField = new JTextField(15);\n        JLabel classLabel = new JLabel(\"Class:\");\n        JTextField classField = new JTextField(15);\n        JLabel hobbiesLabel = new JLabel(\"Hobbies:\");\n        JTextField hobbiesField = new JTextField(15);\n        JButton submitButton = new JButton(\"Submit\");\n        JTextArea displayArea = new JTextArea(5, 30);\n\n        submitButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                String output = \"Name: \" + nameField.getText() + \"\\n\" + \"Class: \" + classField.getText() + \"\\n\" + \"Hobbies: \" + hobbiesField.getText();\n                displayArea.setText(output);\n            }\n        });\n\n        frame.add(nameLabel);\n        frame.add(nameField);\n        frame.add(classLabel);\n        frame.add(classField);\n        frame.add(hobbiesLabel);\n        frame.add(hobbiesField);\n        frame.add(submitButton);\n        frame.add(displayArea);\n\n        frame.setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        new UserInputGUI();\n    }\n}"
    },
    {
        "id": 101,
        "slip_no": "slip 26",
        "question": "Define a Item class (item_number, item_name, item_price). Define a default and parameterized constructor. Keep a count of objects created. Create objects using parameterized constructor and display the object count after each object is created.(Use static member and method). Also display the contents of each object.",
        "language": "java",
        "code": "class Item {\n    private int itemNumber;\n    private String itemName;\n    private double itemPrice;\n    private static int objectCount = 0;\n\n    // Default constructor\n    public Item() {\n        objectCount++;\n    }\n\n    // Parameterized constructor\n    public Item(int itemNumber, String itemName, double itemPrice) {\n        this.itemNumber = itemNumber;\n        this.itemName = itemName;\n        this.itemPrice = itemPrice;\n        objectCount++;\n        display();\n    }\n\n    public static int getObjectCount() {\n        return objectCount;\n    }\n\n    public void display() {\n        System.out.println(\"Item Number: \" + itemNumber + \", Item Name: \" + itemName + \", Item Price: \" + itemPrice);\n        System.out.println(\"Total Items Created: \" + getObjectCount());\n    }\n}\n\npublic class ItemTest {\n    public static void main(String[] args) {\n        Item item1 = new Item(101, \"Laptop\", 800.50);\n        Item item2 = new Item(102, \"Mouse\", 25.75);\n        Item item3 = new Item(103, \"Keyboard\", 45.99);\n    }\n}"
    },
    {
        "id": 102,
        "slip_no": "slip 26",
        "question": "Define a class ‘Donor’ to store the below mentioned details of a blood donor. name, age, address, contactnumber, bloodgroup, date of last donation. Create ‘n’ objects of this class for all the regular donors at Pune. Write these objects to a file. Read these objects from the file and display only those donors’ details whose blood group is ‘A+ve’ and had not donated for the recent six months.",
        "language": "java",
        "code": "import java.io.*;\nimport java.util.*;\nimport java.text.SimpleDateFormat;\n\nclass Donor implements Serializable {\n    private String name;\n    private int age;\n    private String address;\n    private String contactNumber;\n    private String bloodGroup;\n    private Date lastDonationDate;\n\n    public Donor(String name, int age, String address, String contactNumber, String bloodGroup, Date lastDonationDate) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n        this.contactNumber = contactNumber;\n        this.bloodGroup = bloodGroup;\n        this.lastDonationDate = lastDonationDate;\n    }\n\n    public String getBloodGroup() {\n        return bloodGroup;\n    }\n\n    public Date getLastDonationDate() {\n        return lastDonationDate;\n    }\n\n    public void display() {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n        System.out.println(\"Name: \" + name + \", Age: \" + age + \", Address: \" + address + \", Contact: \" + contactNumber + \", Blood Group: \" + bloodGroup + \", Last Donation: \" + sdf.format(lastDonationDate));\n    }\n}\n\npublic class DonorManagement {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        List<Donor> donors = new ArrayList<>();\n        donors.add(new Donor(\"John Doe\", 30, \"123 Main St\", \"1234567890\", \"A+ve\", new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"01/01/2024\")));\n        donors.add(new Donor(\"Jane Smith\", 25, \"456 Elm St\", \"0987654321\", \"O-ve\", new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"15/05/2024\")));\n\n        // Write to file\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"donors.dat\"));\n        oos.writeObject(donors);\n        oos.close();\n\n        // Read from file and display A+ve donors not donated in last 6 months\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"donors.dat\"));\n        List<Donor> readDonors = (List<Donor>) ois.readObject();\n        ois.close();\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.MONTH, -6);\n        Date sixMonthsAgo = calendar.getTime();\n\n        System.out.println(\"Donors with Blood Group A+ve who haven't donated in the last 6 months:\");\n        for (Donor donor : readDonors) {\n            if (donor.getBloodGroup().equals(\"A+ve\") && donor.getLastDonationDate().before(sixMonthsAgo)) {\n                donor.display();\n            }\n        }\n    }\n}"
    },
    {
        "id": 103,
        "slip_no": "slip 27",
        "question": "Define an Employee class with suitable attributes having getSalary() method, which returns salary withdrawn by a particular employee. Write a class Manager which extends a class Employee, override the getSalary() method, which will return salary of manager by adding traveling allowance, house rent allowance etc.",
        "language": "java",
        "code": "class Employee {\n    protected double baseSalary;\n\n    public Employee(double baseSalary) {\n        this.baseSalary = baseSalary;\n    }\n\n    public double getSalary() {\n        return baseSalary;\n    }\n}\n\nclass Manager extends Employee {\n    private double travelAllowance;\n    private double houseRentAllowance;\n\n    public Manager(double baseSalary, double travelAllowance, double houseRentAllowance) {\n        super(baseSalary);\n        this.travelAllowance = travelAllowance;\n        this.houseRentAllowance = houseRentAllowance;\n    }\n\n    @Override\n    public double getSalary() {\n        return baseSalary + travelAllowance + houseRentAllowance;\n    }\n}\n\npublic class EmployeeTest {\n    public static void main(String[] args) {\n        Employee emp = new Employee(3000);\n        Manager mgr = new Manager(5000, 2000, 1500);\n\n        System.out.println(\"Employee Salary: \" + emp.getSalary());\n        System.out.println(\"Manager Salary: \" + mgr.getSalary());\n    }\n}"
    },
    {
        "id": 104,
        "slip_no": "slip 27",
        "question": "Write a program to accept a string as command line argument and check whether it is a file or directory. Also perform operations as follows: i)If it is a directory, delete all text files in that directory. Confirm delete operation from user before deleting text files. Also, display a count showing the number of files deleted, if any, from the directory. ii)If it is a file display various details of that file.",
        "language": "java",
        "code": "import java.io.*;\nimport java.util.Scanner;\n\npublic class FileDirectoryCheck {\n    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.out.println(\"Please provide a file or directory path as command line argument.\");\n            return;\n        }\n\n        File file = new File(args[0]);\n\n        if (file.isDirectory()) {\n            File[] files = file.listFiles();\n            int deletedCount = 0;\n            Scanner scanner = new Scanner(System.in);\n\n            System.out.println(\"Are you sure you want to delete all text files in this directory? (yes/no)\");\n            String response = scanner.nextLine();\n            if (response.equalsIgnoreCase(\"yes\")) {\n                for (File f : files) {\n                    if (f.isFile() && f.getName().endsWith(\".txt\")) {\n                        if (f.delete()) {\n                            deletedCount++;\n                        }\n                    }\n                }\n            }\n            System.out.println(deletedCount + \" text files deleted.\");\n            scanner.close();\n        } else if (file.isFile()) {\n            System.out.println(\"File Details:\");\n            System.out.println(\"Name: \" + file.getName());\n            System.out.println(\"Path: \" + file.getAbsolutePath());\n            System.out.println(\"Readable: \" + file.canRead());\n            System.out.println(\"Writable: \" + file.canWrite());\n            System.out.println(\"Size: \" + file.length() + \" bytes\");\n        } else {\n            System.out.println(\"The specified path is neither a file nor a directory.\");\n        }\n    }\n}"
    },
    {
        "id": 105,
        "slip_no": "slip 28",
        "question": "Write a program that reads one file name from the user, then displays information about whether the file exists, whether the file is readable, whether the file is writable, the type of file and the length of the file in bytes.",
        "language": "java",
        "code": "import java.io.*;\nimport java.util.Scanner;\n\npublic class FileInfo {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the file name: \");\n        String fileName = scanner.nextLine();\n        File file = new File(fileName);\n\n        System.out.println(\"File Exists: \" + file.exists());\n        System.out.println(\"Readable: \" + file.canRead());\n        System.out.println(\"Writable: \" + file.canWrite());\n        System.out.println(\"File Type: \" + (file.isDirectory() ? \"Directory\" : \"File\"));\n        System.out.println(\"File Size: \" + file.length() + \" bytes\");\n\n        scanner.close();\n    }\n}"
    },
    {
        "id": 106,
        "slip_no": "slip 28",
        "question": "Write a program called SwingTemperatureConverter to convert temperature values between Celsius and Fahrenheit. User can enter either the Celsius or the Fahrenheit value, in floating-point number. Hints: To display a floating-point number in a specific format (e.g., 1 decimal place), use the static method String.format(), which has the same form as printf(). For example, String.format(\"%.1f\", 1.234) returns String \"1.2\".",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.event.*;\n\npublic class SwingTemperatureConverter {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Temperature Converter\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(300, 200);\n        frame.setLayout(null);\n\n        JLabel celsiusLabel = new JLabel(\"Celsius:\");\n        celsiusLabel.setBounds(20, 20, 100, 30);\n        JTextField celsiusField = new JTextField();\n        celsiusField.setBounds(120, 20, 150, 30);\n\n        JLabel fahrenheitLabel = new JLabel(\"Fahrenheit:\");\n        fahrenheitLabel.setBounds(20, 60, 100, 30);\n        JTextField fahrenheitField = new JTextField();\n        fahrenheitField.setBounds(120, 60, 150, 30);\n\n        JButton convertButton = new JButton(\"Convert\");\n        convertButton.setBounds(20, 100, 250, 30);\n\n        convertButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    if (!celsiusField.getText().isEmpty()) {\n                        double celsius = Double.parseDouble(celsiusField.getText());\n                        double fahrenheit = (celsius * 9/5) + 32;\n                        fahrenheitField.setText(String.format(\"%.1f\", fahrenheit));\n                    } else if (!fahrenheitField.getText().isEmpty()) {\n                        double fahrenheit = Double.parseDouble(fahrenheitField.getText());\n                        double celsius = (fahrenheit - 32) * 5/9;\n                        celsiusField.setText(String.format(\"%.1f\", celsius));\n                    }\n                } catch (NumberFormatException ex) {\n                    JOptionPane.showMessageDialog(frame, \"Please enter a valid number.\");\n                }\n            }\n        });\n\n        frame.add(celsiusLabel);\n        frame.add(celsiusField);\n        frame.add(fahrenheitLabel);\n        frame.add(fahrenheitField);\n        frame.add(convertButton);\n\n        frame.setVisible(true);\n    }\n}"
    },
    {
        "id": 107,
        "slip_no": "slip 29",
        "question": "Write a program to create a class Customer(custno,custname,contactnumber,custaddr). Write a method to search the customer name with given contact number and display the details.",
        "language": "java",
        "code": "import java.util.*;\n\nclass Customer {\n    private int custNo;\n    private String custName;\n    private String contactNumber;\n    private String custAddr;\n\n    public Customer(int custNo, String custName, String contactNumber, String custAddr) {\n        this.custNo = custNo;\n        this.custName = custName;\n        this.contactNumber = contactNumber;\n        this.custAddr = custAddr;\n    }\n\n    public String getContactNumber() {\n        return contactNumber;\n    }\n\n    public void display() {\n        System.out.println(\"Customer No: \" + custNo + \", Name: \" + custName + \", Contact: \" + contactNumber + \", Address: \" + custAddr);\n    }\n}\n\npublic class CustomerSearch {\n    public static void main(String[] args) {\n        List<Customer> customers = new ArrayList<>();\n        customers.add(new Customer(1, \"Alice\", \"1234567890\", \"Street 1\"));\n        customers.add(new Customer(2, \"Bob\", \"0987654321\", \"Street 2\"));\n\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter contact number to search: \");\n        String searchContact = scanner.nextLine();\n\n        for (Customer customer : customers) {\n            if (customer.getContactNumber().equals(searchContact)) {\n                customer.display();\n                break;\n            }\n        }\n        scanner.close();\n    }\n}"
    },
    {
        "id": 108,
        "slip_no": "slip 29",
        "question": "Write a program to create a super class Vehicle having members Company and price. Derive two different classes LightMotorVehicle(mileage) and HeavyMotorVehicle(capacity_in_tons). Accept the information for \"n\" vehicles and display the information in appropriate form. While taking data, ask user about the type of vehicle first.",
        "language": "java",
        "code": "import java.util.*;\n\nclass Vehicle {\n    protected String company;\n    protected double price;\n\n    public Vehicle(String company, double price) {\n        this.company = company;\n        this.price = price;\n    }\n}\n\nclass LightMotorVehicle extends Vehicle {\n    private double mileage;\n\n    public LightMotorVehicle(String company, double price, double mileage) {\n        super(company, price);\n        this.mileage = mileage;\n    }\n\n    public void display() {\n        System.out.println(\"Light Motor Vehicle: Company: \" + company + \", Price: \" + price + \", Mileage: \" + mileage);\n    }\n}\n\nclass HeavyMotorVehicle extends Vehicle {\n    private double capacityInTons;\n\n    public HeavyMotorVehicle(String company, double price, double capacityInTons) {\n        super(company, price);\n        this.capacityInTons = capacityInTons;\n    }\n\n    public void display() {\n        System.out.println(\"Heavy Motor Vehicle: Company: \" + company + \", Price: \" + price + \", Capacity: \" + capacityInTons + \" tons\");\n    }\n}\n\npublic class VehicleTest {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Vehicle> vehicles = new ArrayList<>();\n        System.out.print(\"Enter number of vehicles: \");\n        int n = scanner.nextInt();\n        scanner.nextLine(); // consume newline\n\n        for (int i = 0; i < n; i++) {\n            System.out.print(\"Enter type of vehicle (Light/Heavy): \");\n            String type = scanner.nextLine();\n            System.out.print(\"Enter Company: \");\n            String company = scanner.nextLine();\n            System.out.print(\"Enter Price: \");\n            double price = scanner.nextDouble();\n            scanner.nextLine(); // consume newline\n\n            if (type.equalsIgnoreCase(\"Light\")) {\n                System.out.print(\"Enter Mileage: \");\n                double mileage = scanner.nextDouble();\n                vehicles.add(new LightMotorVehicle(company, price, mileage));\n            } else if (type.equalsIgnoreCase(\"Heavy\")) {\n                System.out.print(\"Enter Capacity in tons: \");\n                double capacity = scanner.nextDouble();\n                vehicles.add(new HeavyMotorVehicle(company, price, capacity));\n            }\n            scanner.nextLine(); // consume newline\n        }\n\n        System.out.println(\"Vehicle Information:\");\n        for (Vehicle vehicle : vehicles) {\n            if (vehicle instanceof LightMotorVehicle) {\n                ((LightMotorVehicle) vehicle).display();\n            } else if (vehicle instanceof HeavyMotorVehicle) {\n                ((HeavyMotorVehicle) vehicle).display();\n            }\n        }\n        scanner.close();\n    }\n}"
    },
    {
        "id": 109,
        "slip_no": "slip 30",
        "question": "Write program to define class Person with data member as Personname, Aadharno, PanNo. Accept information for 5 objects and display appropriate information (use this keyword).",
        "language": "java",
        "code": "import java.util.*;\n\nclass Person {\n    private String personName;\n    private String aadharNo;\n    private String panNo;\n\n    public Person(String personName, String aadharNo, String panNo) {\n        this.personName = personName;\n        this.aadharNo = aadharNo;\n        this.panNo = panNo;\n    }\n\n    public void display() {\n        System.out.println(\"Name: \" + this.personName + \", Aadhar No: \" + this.aadharNo + \", PAN No: \" + this.panNo);\n    }\n}\n\npublic class PersonTest {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Person> people = new ArrayList<>();\n\n        for (int i = 0; i < 5; i++) {\n            System.out.print(\"Enter name: \");\n            String name = scanner.nextLine();\n            System.out.print(\"Enter Aadhar No: \");\n            String aadharNo = scanner.nextLine();\n            System.out.print(\"Enter PAN No: \");\n            String panNo = scanner.nextLine();\n            people.add(new Person(name, aadharNo, panNo));\n        }\n\n        System.out.println(\"Person Information:\");\n        for (Person person : people) {\n            person.display();\n        }\n        scanner.close();\n    }\n}"
    },
    {
        "id": 110,
        "slip_no": "slip 30",
        "question": "Write a program that creates a user interface to perform integer divisions. The user enters two numbers in the text fields, Number1 and Number2. The division of Number1 and Number2 is displayed in the Result field when the Divide button is clicked. If Number1 or Number2 were not an integer, the program would throw a NumberFormatException. If Number2 were Zero, the program would throw an Arithmetic Exception Display the exception in a message dialog box.",
        "language": "java",
        "code": "import javax.swing.*;\nimport java.awt.event.*;\n\npublic class IntegerDivision {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Integer Division\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(300, 200);\n        frame.setLayout(null);\n\n        JLabel num1Label = new JLabel(\"Number 1:\");\n        num1Label.setBounds(20, 20, 100, 30);\n        JTextField num1Field = new JTextField();\n        num1Field.setBounds(120, 20, 150, 30);\n\n        JLabel num2Label = new JLabel(\"Number 2:\");\n        num2Label.setBounds(20, 60, 100, 30);\n        JTextField num2Field = new JTextField();\n        num2Field.setBounds(120, 60, 150, 30);\n\n        JButton divideButton = new JButton(\"Divide\");\n        divideButton.setBounds(20, 100, 250, 30);\n\n        JLabel resultLabel = new JLabel(\"Result:\");\n        resultLabel.setBounds(20, 140, 100, 30);\n        JTextField resultField = new JTextField();\n        resultField.setBounds(120, 140, 150, 30);\n        resultField.setEditable(false);\n\n        divideButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    int num1 = Integer.parseInt(num1Field.getText());\n                    int num2 = Integer.parseInt(num2Field.getText());\n                    int result = num1 / num2;\n                    resultField.setText(String.valueOf(result));\n                } catch (NumberFormatException ex) {\n                    JOptionPane.showMessageDialog(frame, \"Please enter valid integers.\");\n                } catch (ArithmeticException ex) {\n                    JOptionPane.showMessageDialog(frame, \"Cannot divide by zero.\");\n                }\n            }\n        });\n\n        frame.add(num1Label);\n        frame.add(num1Field);\n        frame.add(num2Label);\n        frame.add(num2Field);\n        frame.add(divideButton);\n        frame.add(resultLabel);\n        frame.add(resultField);\n\n        frame.setVisible(true);\n    }\n}"
    },
    {
        "id": 111,
        "slip_no": "slip 1",
        "question": "Write the HTML code for generating the form as shown below. Apply the internal CSS to following form to change the font size of the heading to 6pt and change the color to red and also change the background color to yellow.",
        "language": "php",
        "code": "<?php\n// HTML form with internal CSS\n?>\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n  h1 {\n    font-size: 6pt;\n    color: red;\n  }\n  body {\n    background-color: yellow;\n  }\n</style>\n</head>\n<body>\n<h1>Sample Form</h1>\n<form>\n  <label for='name'>Name:</label><br>\n  <input type='text' id='name' name='name'><br>\n  <input type='submit' value='Submit'>\n</form>\n</body>\n</html>"
    },
    {
        "id": 112,
        "slip_no": "slip 2",
        "question": "Create HTML5 page with following specifications [15] i) Title should be about your City. ii) Color the background by Pink color. iii) Place your city name at the top of page in large text and in blue color. iv) Add names of the landmarks in your city, each in different color, style and font v) Add any image at the bottom. (Use inline CSS to format the web page)",
        "language": "php",
        "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My City</title>\n</head>\n<body style='background-color:pink;'>\n  <h1 style='color:blue;'>My City Name</h1>\n  <p style='color:red; font-family: Arial;'>Landmark 1</p>\n  <p style='color:green; font-family: Verdana;'>Landmark 2</p>\n  <p style='color:orange; font-family: Courier;'>Landmark 3</p>\n  <img src='city_image.jpg' alt='City Image' style='width:500px; height:auto;'>\n</body>\n</html>"
    },
    {
        "id": 113,
        "slip_no": "slip 3",
        "question": "Write a program using html with following CSS specifications- [15] i. The background colour of the company name should be in green. ii. The text colour of the company name should be red. iii. The heading should be large –with font 'comic sans ms' iv. The description of the company should be displayed in blue color in a paragraph.",
        "language": "php",
        "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Company</title>\n  <style>\n    .company-name {\n      background-color: green;\n      color: red;\n      font-family: 'Comic Sans MS';\n      font-size: 24px;\n      padding: 10px;\n    }\n    .description {\n      color: blue;\n    }\n  </style>\n</head>\n<body>\n  <div class='company-name'>Company Name</div>\n  <p class='description'>This is the description of the company displayed in blue.</p>\n</body>\n</html>"
    },
    {
        "id": 114,
        "slip_no": "slip 4",
        "question": "Write a HTML code, which generate the following output in table List of Books ,Item No ,Item Name ,Price,Rs. and Paise .data 1.Programming in Python 500 50 ,2 .Programming in Java 345 00",
        "language": "php",
        "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>List of Books</title>\n</head>\n<body>\n  <h2>List of Books</h2>\n  <table border='1'>\n    <tr>\n      <th>Item No</th>\n      <th>Item Name</th>\n      <th>Price (Rs.)</th>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>Programming in Python</td>\n      <td>500.50</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Programming in Java</td>\n      <td>345.00</td>\n    </tr>\n  </table>\n</body>\n</html>"
    },
    {
        "id": 115,
        "slip_no": "slip 5",
        "question": "A) Generate a random array of 50 integers and display them using a line chart, scatterplot, histogram and box plot. Apply appropriate color, labels and styling options.B) Write a Python program to print the shape, number of rows-columns, data types, feature names and the description of the data(Use User_Data.csv)",
        "language": "python",
        "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# A) Generate a random array\ndata = np.random.randint(1, 100, 50)\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.subplot(2, 2, 1)\nplt.plot(data, marker='o')\nplt.title('Line Chart')\nplt.grid()\n\nplt.subplot(2, 2, 2)\nplt.scatter(range(len(data)), data, color='r')\nplt.title('Scatter Plot')\n\nplt.subplot(2, 2, 3)\nplt.hist(data, bins=10, color='g')\nplt.title('Histogram')\n\nplt.subplot(2, 2, 4)\nplt.boxplot(data)\nplt.title('Box Plot')\n\nplt.tight_layout()\nplt.show()\n\n# B) Read User_Data.csv\nuser_data = pd.read_csv('User_Data.csv')\nprint(user_data.shape)  # Number of rows and columns\nprint(user_data.dtypes)  # Data types\nprint(user_data.columns)  # Feature names\nprint(user_data.describe())  # Description"
    },
    {
        "id": 116,
        "slip_no": "slip 6",
        "question": "Create following Bootstrap Web Layout Design and set Header background color Blue, add your College name, set Menu section background color green create menu About Us, In content section add college information, background color yellow, Footer section background color red, add address of college.",
        "language": "php",
        "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>College Web Layout</title>\n  <link rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css'>\n</head>\n<body>\n  <header class='bg-primary text-white text-center p-4'>\n    <h1>My College Name</h1>\n  </header>\n  <nav class='bg-success text-white p-2'>\n    <ul class='list-unstyled'>\n      <li><a href='#' class='text-white'>About Us</a></li>\n    </ul>\n  </nav>\n  <div class='container' style='background-color:yellow;'>\n    <h2>College Information</h2>\n    <p>Some information about the college.</p>\n  </div>\n  <footer class='bg-danger text-white text-center p-3'>\n    <p>Address of College</p>\n  </footer>\n</body>\n</html>"
    },
    {
        "id": 117,
        "slip_no": "slip 7",
        "question": "Write a Python program to perform the following tasks : a. Apply OneHot coding on Country column. b. Apply Label encoding on purchased column (Data.csv have two categorical column the country column, and the purchased column).",
        "language": "python",
        "code": "import pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\n# Load data\ndata = pd.read_csv('Data.csv')\n\n# OneHot encoding on 'Country' column\nonehotencoder = OneHotEncoder()\ncountry_encoded = onehotencoder.fit_transform(data[['Country']]).toarray()\n\n# Label encoding on 'Purchased' column\nlabelencoder = LabelEncoder()\ndata['Purchased'] = labelencoder.fit_transform(data['Purchased'])\n\n# Combine encoded columns with original dataframe\nencoded_df = pd.DataFrame(country_encoded, columns=onehotencoder.get_feature_names_out(['Country']))\nfinal_df = pd.concat([data, encoded_df], axis=1)\nprint(final_df)"
    },
    {
        "id": 118,
        "slip_no": "slip 8",
        "question": "Design an HTML form to accept two strings from the user. Write a PHP script for the following. a. Find whether the small string appears at the start of the large string. b. Find the position of the small string in the big string. c. Compare both the string for first n characters, also the comparison should not be case sensitive.",
        "language": "php",
        "code": "<?php\n// HTML form to accept two strings\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>String Comparison</title>\n</head>\n<body>\n  <form method='post'>\n    <label for='largeString'>Large String:</label><br>\n    <input type='text' id='largeString' name='largeString' required><br>\n    <label for='smallString'>Small String:</label><br>\n    <input type='text' id='smallString' name='smallString' required><br>\n    <label for='n'>Number of characters to compare:</label><br>\n    <input type='number' id='n' name='n' required><br>\n    <input type='submit' value='Submit'>\n  </form>\n  <?php\n  if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $largeString = $_POST['largeString'];\n    $smallString = $_POST['smallString'];\n    $n = (int)$_POST['n'];\n\n    // Check if small string is at the start of large string\n    $startsWith = strpos($largeString, $smallString) === 0;\n    echo $startsWith ? 'Small string is at the start of the large string.' : 'Small string is NOT at the start.';\n\n    // Find position of small string in large string\n    $position = strpos($largeString, $smallString);\n    echo '<br>Position of small string: ' . ($position !== false ? $position : 'Not found');\n\n    // Compare first n characters\n    $comparison = strncasecmp(substr($largeString, 0, $n), substr($smallString, 0, $n)) === 0;\n    echo '<br>First ' . $n . ' characters are ' . ($comparison ? 'equal' : 'not equal') . '.';\n  }\n  ?>\n</body>\n</html>"
    },
    {
        "id": 119,
        "slip_no": "slip 9",
        "question": "Write a PHP script for the following: Design a form having a text box and a drop down list containing any 3 separators(e.g. #, |, %, @, ! or comma) accept a strings from the user and also a separator. a. Split the string into separate words using the given separator. b. Replace all the occurrences of separator in the given string with some other separator. c. Find the last word in the given string.",
        "language": "php",
        "code": "<?php\n// HTML form with separators\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>String Separator</title>\n</head>\n<body>\n  <form method='post'>\n    <label for='inputString'>Input String:</label><br>\n    <input type='text' id='inputString' name='inputString' required><br>\n    <label for='separator'>Select Separator:</label><br>\n    <select id='separator' name='separator'>\n      <option value='#'>#</option>\n      <option value='|'>|</option>\n      <option value='%'>%</option>\n    </select><br>\n    <input type='submit' value='Submit'>\n  </form>\n  <?php\n  if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $inputString = $_POST['inputString'];\n    $separator = $_POST['separator'];\n\n    // Split the string\n    $words = explode($separator, $inputString);\n    echo 'Words: ' . implode(', ', $words) . '<br>';\n\n    // Replace separator\n    $newSeparator = ','; // or any new separator you want to use\n    $replacedString = str_replace($separator, $newSeparator, $inputString);\n    echo 'Replaced String: ' . $replacedString . '<br>';\n\n    // Find last word\n    $lastWord = end($words);\n    echo 'Last word: ' . $lastWord;\n  }\n  ?>\n</body>\n</html>"
    },
    {
        "id": 120,
        "slip_no": "slip 10",
        "question": "Write a script to accept two integers(Use html form having 2 textboxes). Write a PHP script to, a. Find mod of the two numbers. b. Find the power of first number raised to the second. c. Find the sum of first n numbers (considering first number as n) d. Find the factorial of second number. (Write separate function for each of the above operations.)",
        "language": "php",
        "code": "<?php\n// HTML form to accept two integers\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Integer Operations</title>\n</head>\n<body>\n  <form method='post'>\n    <label for='num1'>First Number:</label><br>\n    <input type='number' id='num1' name='num1' required><br>\n    <label for='num2'>Second Number:</label><br>\n    <input type='number' id='num2' name='num2' required><br>\n    <input type='submit' value='Submit'>\n  </form>\n  <?php\n  function findMod($a, $b) {\n    return $a % $b;\n  }\n\n  function findPower($a, $b) {\n    return pow($a, $b);\n  }\n\n  function sumOfFirstN($n) {\n    return ($n * ($n + 1)) / 2;\n  }\n\n  function findFactorial($n) {\n    return ($n == 0) ? 1 : $n * findFactorial($n - 1);\n  }\n\n  if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $num1 = (int)$_POST['num1'];\n    $num2 = (int)$_POST['num2'];\n\n    echo 'Mod: ' . findMod($num1, $num2) . '<br>';\n    echo 'Power: ' . findPower($num1, $num2) . '<br>';\n    echo 'Sum of first ' . $num1 . ': ' . sumOfFirstN($num1) . '<br>';\n    echo 'Factorial of ' . $num2 . ': ' . findFactorial($num2) . '<br>';\n  }\n  ?>\n</body>\n</html>"
    },
    {
        "id": 121,
        "slip_no": "slip 11",
        "question": "Create a button with different styles (Secondary, Primary, Success, Error, Info, Warning, Danger) using Bootstrap.",
        "language": "php",
        "code": "<?php\n// HTML and Bootstrap buttons with different styles\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'>\n  <title>Buttons with Bootstrap</title>\n</head>\n<body>\n  <button class='btn btn-primary'>Primary</button>\n  <button class='btn btn-secondary'>Secondary</button>\n  <button class='btn btn-success'>Success</button>\n  <button class='btn btn-danger'>Danger</button>\n  <button class='btn btn-info'>Info</button>\n  <button class='btn btn-warning'>Warning</button>\n</body>\n</html>"
    },
    {
        "id": 122,
        "slip_no": "slip 12",
        "question": "Write a PHP script for the following: Design a form to accept two numbers from the user. Give options to choose the arithmetic operation (use radio buttons). Display the result on the next form. (Use the concept of function and default parameters. Use ‘include’ construct or require statement.)",
        "language": "php",
        "code": "<?php\n// HTML form for arithmetic operations\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operations</title>\n</head>\n<body>\n  <form method='post' action='result.php'>\n    <label for='num1'>First Number:</label><br>\n    <input type='number' id='num1' name='num1' required><br>\n    <label for='num2'>Second Number:</label><br>\n    <input type='number' id='num2' name='num2' required><br>\n    <input type='radio' id='add' name='operation' value='add' checked> Add<br>\n    <input type='radio' id='sub' name='operation' value='sub'> Subtract<br>\n    <input type='radio' id='mul' name='operation' value='mul'> Multiply<br>\n    <input type='radio' id='div' name='operation' value='div'> Divide<br>\n    <input type='submit' value='Submit'>\n  </form>\n</body>\n</html>\n<?php\n// result.php\nfunction calculate($num1, $num2, $operation) {\n  switch ($operation) {\n    case 'add': return $num1 + $num2;\n    case 'sub': return $num1 - $num2;\n    case 'mul': return $num1 * $num2;\n    case 'div': return $num2 != 0 ? $num1 / $num2 : 'Cannot divide by zero';\n    default: return 'Invalid Operation';\n  }\n}\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $num1 = $_POST['num1'];\n  $num2 = $_POST['num2'];\n  $operation = $_POST['operation'];\n  echo 'Result: ' . calculate($num1, $num2, $operation);\n}\n?>"
    },
    {
        "id": 123,
        "slip_no": "slip 13",
        "question": "Write a PHP script to create a chess board using CSS on table cells.",
        "language": "php",
        "code": "<?php\n// HTML with PHP to generate a chessboard\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    table { border-collapse: collapse; width: 320px; height: 320px; }\n    td { width: 40px; height: 40px; }\n    .black { background-color: black; }\n    .white { background-color: white; }\n  </style>\n</head>\n<body>\n  <table border='1'>\n    <?php\n    for ($row = 0; $row < 8; $row++) {\n      echo '<tr>';\n      for ($col = 0; $col < 8; $col++) {\n        $color = ($row + $col) % 2 == 0 ? 'white' : 'black';\n        echo \"<td class='$color'></td>\";\n      }\n      echo '</tr>';\n    }\n    ?>\n  </table>\n</body>\n</html>"
    },
    {
        "id": 124,
        "slip_no": "slip 14",
        "question": "Create a container add row inside it and add 3 columns inside row using Bootstrap.",
        "language": "php",
        "code": "<?php\n// HTML structure using Bootstrap container, row, and columns\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'>\n  <title>Bootstrap Grid</title>\n</head>\n<body>\n  <div class='container'>\n    <div class='row'>\n      <div class='col'>Column 1</div>\n      <div class='col'>Column 2</div>\n      <div class='col'>Column 3</div>\n    </div>\n  </div>\n</body>\n</html>"
    },
    {
        "id": 125,
        "slip_no": "slip 15",
        "question": "Design a form to accept string from the user and perform the following operations: a. Select first 5 words from the string. b. Convert the given string to lowercase and then to Title case. c. Pad the given string with '*' from left and right both the sides. d. Remove the leading whitespaces from the given string. e. Find the reverse of the given string.",
        "language": "php",
        "code": "<?php\n// HTML form to accept a string and perform multiple operations\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>String Operations</title>\n</head>\n<body>\n  <form method='post'>\n    <label for='inputString'>Enter a string:</label><br>\n    <input type='text' id='inputString' name='inputString' required><br>\n    <input type='submit' value='Submit'>\n  </form>\n  <?php\n  if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $inputString = trim($_POST['inputString']);\n    $words = explode(' ', $inputString);\n\n    // a. Select first 5 words\n    $firstFiveWords = implode(' ', array_slice($words, 0, 5));\n    echo 'First 5 words: ' . $firstFiveWords . '<br>';\n\n    // b. Convert to lowercase and then Title case\n    $lowercaseString = strtolower($inputString);\n    $titleCaseString = ucwords($lowercaseString);\n    echo 'Title case: ' . $titleCaseString . '<br>';\n\n    // c. Pad the string\n    $paddedString = str_pad($inputString, strlen($inputString) + 2, '*', STR_PAD_BOTH);\n    echo 'Padded String: ' . $paddedString . '<br>';\n\n    // d. Remove leading whitespaces\n    echo 'String without leading spaces: ' . $inputString . '<br>';\n\n    // e. Reverse the string\n    echo 'Reversed String: ' . strrev($inputString) . '<br>';\n  }\n  ?>\n</body>\n</html>"
    },
    {
        "id": 126,
        "slip_no": "slip 16",
        "question": "Write a menu driven program to perform the following stack related operations: a) Insert an element in stack b) Delete an element from stack c) Display the contents of stack.",
        "language": "php",
        "code": "<?php\n// Simple stack operations using PHP\n$stack = [];\nfunction push(&$stack, $element) {\n  array_push($stack, $element);\n}\nfunction pop(&$stack) {\n  return array_pop($stack);\n}\nfunction display($stack) {\n  return implode(', ', $stack);\n}\n// Sample usage\npush($stack, 10);\npush($stack, 20);\npush($stack, 30);\necho 'Stack: ' . display($stack) . '<br>';\necho 'Popped: ' . pop($stack) . '<br>';\necho 'Stack after pop: ' . display($stack);\n?>"
    },
    {
        "id": 127,
        "slip_no": "slip 17",
        "question": "Write a PHP script to sort the following associative array: array('Sagar'=>'31','Vicky'=>'41','Leena'=>'39','Ramesh'=>'40') in a) ascending order sort by Value b) ascending order sort by Key c) descending order sorting by Value d) descending order sorting by Key.",
        "language": "php",
        "code": "<?php\n// Associative array\n$array = ['Sagar' => 31, 'Vicky' => 41, 'Leena' => 39, 'Ramesh' => 40];\n// a. Ascending order sort by Value\nasort($array);\necho 'Ascending order by value: ' . print_r($array, true) . '<br>';\n// b. Ascending order sort by Key\nksort($array);\necho 'Ascending order by key: ' . print_r($array, true) . '<br>';\n// c. Descending order sort by Value\narsort($array);\necho 'Descending order by value: ' . print_r($array, true) . '<br>';\n// d. Descending order sort by Key\nkrsort($array);\necho 'Descending order by key: ' . print_r($array, true);\n?>"
    },
    {
        "id": 128,
        "slip_no": "slip 18",
        "question": "Write a menu driven program to perform the following operations on an associative array: a. Reverse the order of each element’s key-value pair. b. Traverse the element in an array in random order. c. Convert the array elements into individual variables. d. Display the elements of an array along with key.",
        "language": "php",
        "code": "<?php\n$array = ['apple' => 'red', 'banana' => 'yellow', 'grapes' => 'green'];\n// a. Reverse the order of key-value pairs\n$reversed = array_flip($array);\necho 'Reversed key-value pairs: ' . print_r($reversed, true) . '<br>';\n// b. Random order traversal\nshuffle($array);\necho 'Array in random order: ' . print_r($array, true) . '<br>';\n// c. Convert array elements into variables\nextract($array);\necho 'Extracted variables: $apple = ' . $apple . ', $banana = ' . $banana . ', $grapes = ' . $grapes . '<br>';\n// d. Display elements with key\nforeach ($array as $key => $value) {\n  echo \"$key => $value<br>\";\n}\n?>"
    },
    {
        "id": 129,
        "slip_no": "slip 19",
        "question": "Write a PHP script to accept 2 strings from the user, the first string should be a sentence and the second can be a word. a. Delete a small part from first string after accepting position and number of characters to remove. b. Insert the given small string in the given big string at specified position without removing any characters from the big string. c. Replace some characters in the big string.",
        "language": "php",
        "code": "<?php\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $sentence = $_POST['sentence'];\n  $word = $_POST['word'];\n  $position = $_POST['position'];\n  $numToRemove = $_POST['numToRemove'];\n\n  // a. Remove part of the string\n  $modifiedSentence = substr_replace($sentence, '', $position, $numToRemove);\n  echo 'Modified Sentence: ' . $modifiedSentence . '<br>';\n\n  // b. Insert word in the sentence\n  $sentenceWithInsert = substr_replace($sentence, $word, $position, 0);\n  echo 'Sentence after insert: ' . $sentenceWithInsert . '<br>';\n\n  // c. Replace some characters\n  $replacedSentence = str_replace($word, 'replaced', $sentence);\n  echo 'Replaced Sentence: ' . $replacedSentence . '<br>';\n}\n?>\n<form method='post'>\n  <input type='text' name='sentence' placeholder='Enter a sentence'><br>\n  <input type='text' name='word' placeholder='Enter a word'><br>\n  <input type='number' name='position' placeholder='Position'><br>\n  <input type='number' name='numToRemove' placeholder='Characters to remove'><br>\n  <input type='submit'>\n</form>"
    },
    {
        "id": 130,
        "slip_no": "slip 20",
        "question": "Write a menu driven program to perform the following operations on associative arrays: a) Split an array into chunks. b) Sort the array by values without changing the keys. c) Filter the even elements from an array.",
        "language": "php",
        "code": "<?php\n$array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n// a. Split into chunks\n$chunks = array_chunk($array, 3);\necho 'Array chunks: ' . print_r($chunks, true) . '<br>';\n// b. Sort by values without changing keys\nasort($array);\necho 'Sorted array: ' . print_r($array, true) . '<br>';\n// c. Filter even elements\n$evens = array_filter($array, fn($n) => $n % 2 == 0);\necho 'Even elements: ' . print_r($evens, true);\n?>"
    },
    {
        "id": 131,
        "slip_no": "slip 21",
        "question": "Write a menu driven program to perform the following queue related operations a) Insert an element in queue b) Delete an element from queue c) Display the contents of queue",
        "language": "php",
        "code": "<?php\nclass Queue {\n    private $queue = array();\n\n    public function insert($item) {\n        array_push($this->queue, $item);\n        echo \"Element inserted: $item\\n\";\n    }\n\n    public function delete() {\n        if (empty($this->queue)) {\n            echo \"Queue is empty\\n\";\n        } else {\n            $item = array_shift($this->queue);\n            echo \"Element deleted: $item\\n\";\n        }\n    }\n\n    public function display() {\n        if (empty($this->queue)) {\n            echo \"Queue is empty\\n\";\n        } else {\n            echo \"Queue contents: \" . implode(', ', $this->queue) . \"\\n\";\n        }\n    }\n}\n\n$queue = new Queue();\n\nwhile (true) {\n    echo \"1. Insert element\\n2. Delete element\\n3. Display queue\\n4. Exit\\n\";\n    $choice = readline('Enter your choice: ');\n\n    switch ($choice) {\n        case 1:\n            $element = readline('Enter element to insert: ');\n            $queue->insert($element);\n            break;\n        case 2:\n            $queue->delete();\n            break;\n        case 3:\n            $queue->display();\n            break;\n        case 4:\n            exit;\n        default:\n            echo \"Invalid choice\\n\";\n    }\n}\n?>"
    },
    {
        "id": 132,
        "slip_no": "slip 22",
        "question": "Create an array of 15 high temperatures, approximating the weather for a spring month, then find the average high temp, the five warmest high temps. Display the result on the browser.",
        "language": "php",
        "code": "<?php\n$temperatures = [18, 20, 25, 30, 22, 26, 28, 29, 21, 19, 27, 23, 24, 22, 31];\n$average = array_sum($temperatures) / count($temperatures);\nrsort($temperatures);\n$top_five = array_slice($temperatures, 0, 5);\n\necho \"Average Temperature: $average°C\\n\";\necho \"Five Warmest Temperatures: \" . implode(', ', $top_five) . \"°C\\n\";\n?>"
    },
    {
        "id": 133,
        "slip_no": "slip 23",
        "question": "Write a PHP script for the following: Design a form to accept the marks of 5 different subjects of a student, having serial number, subject name & marks out of 100. Display the result in the tabular format which will have total, percentage and grade. Use only 3 text boxes.(Use array of form parameters)",
        "language": "php",
        "code": "<?php\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $subjects = $_POST['subject'];\n    $marks = $_POST['marks'];\n    $total = array_sum($marks);\n    $percentage = $total / count($marks);\n    $grade = ($percentage >= 90) ? 'A' : (($percentage >= 80) ? 'B' : (($percentage >= 70) ? 'C' : 'D'));\n    echo \"<table border='1'>\";\n    echo \"<tr><th>Subject</th><th>Marks</th></tr>\";\n    foreach ($subjects as $index => $subject) {\n        echo \"<tr><td>$subject</td><td>{$marks[$index]}</td></tr>\";\n    }\n    echo \"<tr><td>Total</td><td>$total</td></tr>\";\n    echo \"<tr><td>Percentage</td><td>$percentage%</td></tr>\";\n    echo \"<tr><td>Grade</td><td>$grade</td></tr>\";\n    echo \"</table>\";\n}\n?>\n<form method='post'>\n    Subject 1: <input type='text' name='subject[]'><input type='number' name='marks[]'><br>\n    Subject 2: <input type='text' name='subject[]'><input type='number' name='marks[]'><br>\n    Subject 3: <input type='text' name='subject[]'><input type='number' name='marks[]'><br>\n    <input type='submit' value='Submit'>\n</form>"
    },
    {
        "id": 134,
        "slip_no": "slip 24",
        "question": "Write a PHP program to read two file names from user and append content of first file into second file.",
        "language": "php",
        "code": "<?php\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $file1 = $_POST['file1'];\n    $file2 = $_POST['file2'];\n    $content = file_get_contents($file1);\n    file_put_contents($file2, $content, FILE_APPEND);\n    echo \"Content of $file1 appended to $file2\";\n}\n?>\n<form method='post'>\n    File 1: <input type='text' name='file1'><br>\n    File 2: <input type='text' name='file2'><br>\n    <input type='submit' value='Submit'>\n</form>"
    },
    {
        "id": 135,
        "slip_no": "slip 25",
        "question": "Write a menu driven program to perform various file operations. Accept filename from user. a) Display type of file. b) Display last modification time of file c) Display the size of file d) Delete the file",
        "language": "php",
        "code": "<?php\nfunction file_operations($file) {\n    echo \"File Type: \" . filetype($file) . \"\\n\";\n    echo \"Last Modified: \" . date('F d Y H:i:s.', filemtime($file)) . \"\\n\";\n    echo \"File Size: \" . filesize($file) . \" bytes\\n\";\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $file = $_POST['filename'];\n    if (file_exists($file)) {\n        file_operations($file);\n        if (isset($_POST['delete'])) {\n            unlink($file);\n            echo \"File $file deleted successfully\";\n        }\n    } else {\n        echo \"File does not exist\";\n    }\n}\n?>\n<form method='post'>\n    Filename: <input type='text' name='filename'><br>\n    <input type='checkbox' name='delete'> Delete File<br>\n    <input type='submit' value='Submit'>\n</form>"
    },
    {
        "id": 136,
        "slip_no": "slip 26",
        "question": "Consider the following entities and their relationship. Doctor (doc_no, dname, address, city, area) Hospital (hosp_no, hname, hcity) Doctor-Hospital related with many-one relationship. Create a RDB in 3NF for above and solve the following. Using above database write a script in PHP to print the Doctor visiting to the Hospital in tabular format. Accept Hospital name from user.",
        "language": "php",
        "code": "<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"hospital_db\";\n$conn = new mysqli($servername, $username, $password, $dbname);\nif ($conn->connect_error) { die(\"Connection failed: \" . $conn->connect_error); }\n$hospital_name = $_POST['hospital_name'];\n$sql = \"SELECT d.doc_no, d.dname FROM Doctor d JOIN Hospital h ON d.hosp_no = h.hosp_no WHERE h.hname = ?\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"s\", $hospital_name);\n$stmt->execute();\n$result = $stmt->get_result();\nif ($result->num_rows > 0) {\n echo \"<table><tr><th>Doctor No</th><th>Doctor Name</th></tr>\";\n while($row = $result->fetch_assoc()) {\n echo \"<tr><td>\" . $row['doc_no'] . \"</td><td>\" . $row['dname'] . \"</td></tr>\";\n }\n echo \"</table>\";\n} else { echo \"No doctors found\"; }\n$stmt->close();\n$conn->close();\n?>"
    },
    {
        "id": 137,
        "slip_no": "slip 27",
        "question": "Write a PHP program to read two file names from user and copy the content of first file into second file.",
        "language": "php",
        "code": "<?php\n$sourceFile = $_POST['source'];\n$destinationFile = $_POST['destination'];\nif (file_exists($sourceFile)) {\n $content = file_get_contents($sourceFile);\n file_put_contents($destinationFile, $content);\n echo \"File copied successfully.\";\n} else {\n echo \"Source file does not exist.\";\n}\n?>"
    },
    {
        "id": 138,
        "slip_no": "slip 28",
        "question": "Write a program to read a flat file 'student.dat', calculate the percentage and display the data from file in tabular format.(Student.dat file contains rollno, name, OS, WT, DS, Python, Java, CN)",
        "language": "php",
        "code": "<?php\n$file = fopen(\"student.dat\", \"r\");\nif ($file) {\n echo \"<table border='1'><tr><th>Roll No</th><th>Name</th><th>OS</th><th>WT</th><th>DS</th><th>Python</th><th>Java</th><th>CN</th><th>Percentage</th></tr>\";\n while (($line = fgets($file)) !== false) {\n $data = explode(\",\", $line);\n $total = $data[2] + $data[3] + $data[4] + $data[5] + $data[6] + $data[7];\n $percentage = $total / 6;\n echo \"<tr><td>{$data[0]}</td><td>{$data[1]}</td><td>{$data[2]}</td><td>{$data[3]}</td><td>{$data[4]}</td><td>{$data[5]}</td><td>{$data[6]}</td><td>{$data[7]}</td><td>{$percentage}%</td></tr>\";\n }\n echo \"</table>\";\n fclose($file);\n} else {\n echo \"Error opening file.\";\n}\n?>"
    },
    {
        "id": 139,
        "slip_no": "slip 29",
        "question": "Consider the following entities and their relationships Event (eno , title , date ) Committee (cno , name, head , from_time ,to_time , status) Event and Committee have many to many relationship. Write a php script to accept title of event and modify status committee as working.",
        "language": "php",
        "code": "<?php\n$event_title = $_POST['event_title'];\n$conn = new mysqli(\"localhost\", \"root\", \"\", \"events_db\");\nif ($conn->connect_error) { die(\"Connection failed: \" . $conn->connect_error); }\n$sql = \"UPDATE Committee SET status = 'working' WHERE cno IN (SELECT cno FROM EventCommittee WHERE eno IN (SELECT eno FROM Event WHERE title = ?))\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"s\", $event_title);\nif ($stmt->execute()) {\n echo \"Committee status updated successfully.\";\n} else {\n echo \"Error updating status.\";\n}\n$stmt->close();\n$conn->close();\n?>"
    },
    {
        "id": 140,
        "slip_no": "slip 30",
        "question": "Consider the following entities and their relationships Student (Stud_id,name,class) Competition (c_no,c_name,type) Relationship between student and competition is many-many with attribute rank and year. Create a RDB in 3NF for the above and solve the following. Using above database write a script in PHP to accept a competition name from user and display information of student who has secured 1st rank in that competition.",
        "language": "php",
        "code": "<?php\n$competition_name = $_POST['competition_name'];\n$conn = new mysqli(\"localhost\", \"root\", \"\", \"competition_db\");\nif ($conn->connect_error) { die(\"Connection failed: \" . $conn->connect_error); }\n$sql = \"SELECT s.Stud_id, s.name, s.class FROM Student s JOIN CompetitionStudent cs ON s.Stud_id = cs.Stud_id JOIN Competition c ON cs.c_no = c.c_no WHERE c.c_name = ? AND cs.rank = 1\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"s\", $competition_name);\n$stmt->execute();\n$result = $stmt->get_result();\nif ($result->num_rows > 0) {\n echo \"<table><tr><th>Student ID</th><th>Name</th><th>Class</th></tr>\";\n while($row = $result->fetch_assoc()) {\n echo \"<tr><td>{$row['Stud_id']}</td><td>{$row['name']}</td><td>{$row['class']}</td></tr>\";\n }\n echo \"</table>\";\n} else { echo \"No students found.\"; }\n$stmt->close();\n$conn->close();\n?>"
    },
    {
        "id": 141,
        "slip_no": "set a",
        "question": "Write a C program that behaves like a shell which displays the command prompt ‘myshell$’. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command ‘count’ as myshell$ count c filename: It will display the number of characters in given file myshell$ count w filename: It will display the number of words in given file myshell$ count l filename: It will display the number of lines in given file",
        "language": "c",
        "code": "#include <stdio.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <string.h>\n\nvoid count(char *fn, char op) {\n    int fh = open(fn, O_RDONLY);\n    int cc = 0, wc = 0, lc = 0;\n    char c;\n\n    if(fh == -1) {\n        printf(\"File %s not found.\\n\", fn);\n        return;\n    }\n\n    while(read(fh, &c, 1) > 0) {\n        cc++;\n        if(c == ' ' || c == '\\n') \n          wc++;\n        if(c == '\\n') \n          lc++;\n    }\n    close(fh);\n    \n    if(cc > 0){\n      wc++;\n      lc++;\n    }\n\n    if(op == 'c') \n      printf(\"Characters: %d\\n\", cc);\n    else if(op == 'w') \n      printf(\"Words: %d\\n\", wc);\n    else if(op == 'l') \n      printf(\"Lines: %d\\n\", lc);\n}\n\nint main() {\n    char input[100];\n    char command[10], fn[50], op;\n\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(input, sizeof(input), stdin);\n        \n        input[strcspn(input, \"\\n\")] = 0; \n        sscanf(input, \"%s %c %s\", command, &op, fn);\n        \n        if (strcmp(command, \"count\") == 0) {\n            pid_t pid = fork();\n            \n            if(pid < 0) {\n                printf(\"Fork failed.\\n\");\n                return 1;\n            } \n            else if(pid == 0) {\n                count(fn, op);\n                return 0;\n            } \n            else {\n                wait(NULL);\n            }\n        } else {\n            printf(\"Invalid command. Use 'count <op> <filename>'\\n\");\n        }\n    }\n    return 0;\n}\n\n//    how to execute the program\n//    gcc myshell_count.c -o myshell_count\n//    ./myshell_count\n//    myshell$ count c filename.txt\n//    myshell$ count w filename.txt\n//    myshell$ count l filename.txt"
    },
    {
      "id": 142,
      "slip_no": "set b",
      "question": "Write a C program that behaves like a shell which displays the command prompt ‘myshell$’. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command ‘list’ as myshell$ list f dirname: It will display filenames in a given directory. myshell$ list n dirname: It will count the number of entries in a given directory. myshell$ list i dirname: It will display filenames and their inode number for the files in a given directory.",
      "language": "c",
      "code": "//list\n#include <stdio.h>\n#include <stdlib.h>\n#include <dirent.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <string.h>\n\nvoid list_files(const char *dirname, char option) {\n    DIR *dp = opendir(dirname);\n    if (dp == NULL) {\n        perror(\"Failed to open directory\");\n        return;\n    }\n\n    struct dirent *entry;\n    int dir_count = 0, file_count = 0;\n\n    while ((entry = readdir(dp)) != NULL) {\n        switch (option) {\n            case 'f': // List filenames\n                if (entry->d_type == DT_REG) {\n                    printf(\"%s\\n\", entry->d_name);\n                }\n                break;\n            case 'n': // Count entries\n                if (entry->d_type == DT_DIR) dir_count++;\n                if (entry->d_type == DT_REG) file_count++;\n                break;\n            case 'i': // List filenames with inode numbers\n                if (entry->d_type == DT_REG) {\n                    printf(\"%s\\t%lu\\n\", entry->d_name, (unsigned long)entry->d_ino);\n                }\n                break;\n            default:\n                printf(\"Invalid option\\n\");\n                closedir(dp);\n                return;\n        }\n    }\n\n    if (option == 'n') {\n        printf(\"Total entries: %d Directory(s), %d File(s)\\n\", dir_count, file_count);\n    }\n\n    closedir(dp);\n}\n\nint main() {\n    char input[100];\n\n    while (1) {\n        printf(\"myshell$ \");\n        fflush(stdout);\n\n        if (fgets(input, sizeof(input), stdin) == NULL) {\n            break; // Exit on EOF or error\n        }\n\n        input[strcspn(input, \"\\n\")] = 0; // Remove the newline character\n\n        char *args[4]; // To hold command and its arguments\n        char *token = strtok(input, \" \");\n        int arg_count = 0;\n\n        while (token != NULL && arg_count < 4) {\n            args[arg_count++] = token;\n            token = strtok(NULL, \" \");\n        }\n        args[arg_count] = NULL;\n\n        // Check if the command is 'list'\n        if (arg_count == 3 && strcmp(args[0], \"list\") == 0) {\n            pid_t pid = fork();\n            if (pid < 0) {\n                perror(\"Fork failed\");\n            } else if (pid == 0) {\n                // Child process\n                list_files(args[2], args[1][0]);\n                exit(0); // Exit child process\n            } else {\n                // Parent process\n                wait(NULL); // Wait for child process to finish\n            }\n        } else {\n            printf(\"Invalid command. Use: list [f|n|i] dirname\\n\");\n        }\n    }\n\n    return 0;\n}\n\n//     how to execute the program\n//    gcc myshell_list.c -o myshell_list\n//    ./myshell_list\n//    myshell$ list f /path/to/directory\n//    myshell$ list n /path/to/directory\n//    myshell$ list i /path/to/directory"
    },
    {
        "id": 143,
        "slip_no": "set c 1",
        "question": "Write a C program that behaves like a shell which displays the command prompt ‘myshell$’. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command ‘typeline’ as myshell$ typeline n filename: It will display first n lines of the file. myshell$ typeline -n filename: It will display last n lines of the file. myshell$ typeline a filename: It will display all the lines of the file.",
        "language": "c",
        "code": "#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include<sys/wait.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid typeline(char *option, char *filename) {\n    int fh = open(filename, O_RDONLY);\n    if (fh == -1) {\n        printf(\"File %s not found.\\n\", filename);\n        return;\n    }\n\n    char c;\n    int n = 0, lines = 0;\n\n    if (option[0] >= '0' && option[0] <= '9') {\n        n = atoi(option);\n        for (int i = 0; i < n; i++) {\n            int line_count = 0;\n            while (read(fh, &c, 1) > 0) {\n                printf(\"%c\", c);\n                if (c == '\\n') {\n                    line_count++;\n                    break;\n                }\n            }\n            if (line_count == 0) break;\n        }\n    } \n    else if (strcmp(option, \"-n\") == 0) {\n        while (read(fh, &c, 1) > 0) if (c == '\\n') lines++;\n        lseek(fh, 0, SEEK_SET); \n\n        int line_target = lines - n;\n        int current_line = 0;\n        while (read(fh, &c, 1) > 0) {\n            if (c == '\\n') current_line++;\n            if (current_line >= line_target) printf(\"%c\", c);\n        }\n    } \n    else if (strcmp(option, \"a\") == 0) {\n        while (read(fh, &c, 1) > 0) printf(\"%c\", c);\n    } \n    else {\n        printf(\"Invalid option: %s\\n\", option);\n    }\n\n    close(fh);\n}\n\nint main() {\n    char command[80];\n\n    while (1) {\n        printf(\"myshell$ \");\n        fgets(command, sizeof(command), stdin);\n        command[strcspn(command, \"\\n\")] = 0;\n\n        if (strcmp(command, \"exit\") == 0) break;\n\n        pid_t pid = fork();\n        \n        if (pid < 0) {\n            printf(\"Fork failed.\\n\");\n            return 1;\n        } else if (pid == 0) {\n            char *args[4]; \n            args[0] = strtok(command, \" \");\n            args[1] = strtok(NULL, \" \");\n            args[2] = strtok(NULL, \" \");\n            args[3] = NULL; \n\n            if (args[0] != NULL && strcmp(args[0], \"typeline\") == 0 && args[1] != NULL && args[2] != NULL) {\n                typeline(args[1], args[2]);\n            } else {\n                execvp(args[0], args);\n                printf(\"Command not found.\\n\");\n            }\n            exit(0); \n        } else {\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}\n\n//    how to execute the program\n//    gcc myshell_typeline.c -o myshell_typeline\n//    ./myshell_typeline\n//    myshell$ typeline 5 filename.txt     # Displays the first 5 lines\n//    myshell$ typeline -5 filename.txt     # Displays the last 5 lines\n//    myshell$ typeline a filename.txt      # Displays all lines\n//    myshell$ exit                          # Exits the shell"
    },
    {
        "id": 144,
        "slip_no": "set c 2",
        "question": "Write a C program that behaves like a shell which displays the command prompt ‘myshell$’. It accepts the command, tokenize the command line and execute it by creating the child process. Also implement the additional command ‘search’ as myshell$ search f filename pattern : It will search the first occurrence of pattern in the given file myshell$ search a filename pattern : It will search all the occurrence of pattern in the given file myshell$ search c filename pattern : It will count the number of occurrence of pattern in the given file",
        "language": "c",
        "code": "#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\nvoid make_toks(char *s, char *tok[]) {\n    int i = 0;\n    char *p;\n    p = strtok(s, \" \");\n    while (p != NULL) {\n        tok[i++] = p;\n        p = strtok(NULL, \" \");\n    }\n    tok[i] = NULL;\n}\n\nvoid search(char *fn, char op, char *pattern) {\n    int fh, count = 0, i = 0, j = 0;\n    char buff[255], c, *p;\n    fh = open(fn, O_RDONLY);\n    if (fh == -1) {\n        printf(\"File %s Not Found\\n\", fn);\n        return;\n    }\n    \nswitch (op) {\n        case 'f': // Find first occurrence\n            while (read(fh, &c, 1)) {\n                buff[j++] = c;\n                if (c == '\\n') {\n                    buff[j] = '\\0';\n                    j = 0;\n                    i++;\n                    if (strstr(buff, pattern)) {\n                        printf(\"%d: %s\\n\", i, buff);\n                        break; // Exit after finding the first occurrence\n                    }\n                }\n            }\n            break;\n\n        case 'c': // Count occurrences\n            while (read(fh, &c, 1)) {\n                buff[j++] = c;\n                if (c == '\\n') {\n                    buff[j] = '\\0';\n                    j = 0;\n                    p = buff;\n                    while ((p = strstr(p, pattern))) {\n                        count++;\n                        p++; // Move to the next character after the found pattern\n                    }\n                }\n            }\n            printf(\"Total No. of Occurrences = %d\\n\", count);\n            break;\n\n        case 'a': // List all occurrences\n            while (read(fh, &c, 1)) {\n                buff[j++] = c;\n                if (c == '\\n') {\n                    buff[j] = '\\0';\n                    j = 0;\n                    i++;\n                    if (strstr(buff, pattern)) {\n                        printf(\"%d: %s\\n\", i, buff);\n                    }\n                }\n            }\n            break;\n\n        default:\n            printf(\"Invalid operation\\n\");\n            break;\n    }\n    close(fh);\n}\n\nint main() {\n    char buff[80], *args[10];\n    int pid;\n\n    while (1) {\n        printf(\"myshell$ \");\n        fflush(stdout);\n\n        if (fgets(buff, 80, stdin) == NULL) {\n            perror(\"Failed to read command\");\n            continue;\n        }\n        buff[strcspn(buff, \"\\n\")] = '\\0'; // Remove newline character\n\n        make_toks(buff, args);\n        if (strcmp(args[0], \"search\") == 0) {\n            if (args[1] && args[2] && args[3]) {\n                search(args[2], args[1][0], args[3]);\n            } else {\n                printf(\"Usage: search [f|a|c] filename pattern\\n\");\n            }\n        } else {\n            pid = fork();\n            if (pid > 0) {\n                wait(NULL); // Parent waits for child\n            } else if (pid == 0) {\n                if (execvp(args[0], args) == -1) {\n                    printf(\"Bad command.\\n\");\n                    exit(EXIT_FAILURE);\n                }\n            } else {\n                perror(\"Fork failed\");\n            }\n        }\n    }\n    return 0;\n}"
    },
    {
        "id": 145,
        "slip_no": "FIFO",
        "question": "FIFO Paging Algorithm",
        "language": "c",
        "code": "#include <stdio.h>\n\nint main() {\n    int num_pages, num_frames, page_faults = 0;\n    int i, j, k, found;\n    \n    printf(\"Enter number of pages: \");\n    scanf(\"%d\", &num_pages);\n    \n    int pages[num_pages];\n    \n    printf(\"Enter the page reference string: \");\n    for (i = 0; i < num_pages; i++) {\n        scanf(\"%d\", &pages[i]);\n    }\n\n    printf(\"Enter number of memory frames: \");\n    scanf(\"%d\", &num_frames);\n    \n    int frames[num_frames];\n    \n    for (i = 0; i < num_frames; i++) {\n        frames[i] = -1;\n    }\n    \n    for (i = 0, k = 0; i < num_pages; i++) {\n        found = 0;\n        \n        for (j = 0; j < num_frames; j++) {\n            if (frames[j] == pages[i]) {\n                found = 1; \n                break;\n            }\n        }\n\n        if (!found) {\n            frames[k] = pages[i];   \n            k = (k + 1) % num_frames;\n            page_faults++;          \n        }\n\n        printf(\"Page %d -> Frames: \", pages[i]);\n        for (j = 0; j < num_frames; j++) {\n            if (frames[j] == -1) {\n                printf(\"- \"); \n            } else {\n                printf(\"%d \", frames[j]); \n            }\n        }\n        printf(\"\\n\");\n    }\n    \n    printf(\"Total page faults: %d\\n\", page_faults);\n    \n    return 0;\n}"
    },
    {
        "id": 146,
        "slip_no": "LRU",
        "question": "LRU Paging Algorithm",
        "language": "c",
        "code": "#include <stdio.h>\n\nint main() {\n    int pc, fc, pf = 0, ph = 0;\n    int i, j, k, found;\n    \n    printf(\"Enter the count of Pages : \");\n    scanf(\"%d\", &pc);\n    int p[pc];\n    \n    printf(\"Enter the page reference string : \");\n    for (i = 0; i < pc; i++) {\n        scanf(\"%d\", &p[i]);\n    }\n    \n    printf(\"Enter Frame count : \");\n    scanf(\"%d\", &fc);\n    int f[fc];\n    \n    for (i = 0; i < fc; i++) {\n        f[i] = -1;\n    }\n    \n    for (i = 0, k = 0; i < pc; i++) {\n        found = 0;\n        for (j = 0; j < fc; j++) {\n            if (f[j] == p[i]) {\n                found = 1;\n                ph++;\n                break;\n            }\n        }\n        if (!found) {\n            f[k] = p[i];\n            k = (k + 1) % fc;\n            pf++;\n        }\n\n        printf(\"Page %d -> Frames: \", p[i]);\n        for (j = 0; j < fc; j++) {\n            if (f[j] == -1) {\n                printf(\"- \");\n            } else {\n                printf(\"%d \", f[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    \n    printf(\"Total page faults: %d\\n\", pf);\n    printf(\"Total hits: %d\\n\", ph);\n    \n    return 0;\n}"
    },
    {
        "id": 147,
        "slip_no": "LFU",
        "question": "LFU Paging Algorithm",
        "language": "c",
        "code": "// LFU (Least Frequently Used)\n#include <stdio.h>\n\nint main() {\n    int pc, fc, pf = 0, ph = 0;\n    int i, j, k, found;\n    \n    printf(\"Enter the count of Pages : \");\n    scanf(\"%d\", &pc);\n    int p[pc];\n    \n    printf(\"Enter the page reference string : \");\n    for (i = 0; i < pc; i++) {\n        scanf(\"%d\", &p[i]);\n    }\n    \n    printf(\"Enter Frame count : \");\n    scanf(\"%d\", &fc);\n    int f[fc], freq[fc];\n    \n    for (i = 0; i < fc; i++) {\n        f[i] = -1;\n        freq[i] = 0;\n    }\n    \n    for (i = 0; i < pc; i++) {\n        found = 0;\n        for (j = 0; j < fc; j++) {\n            if (f[j] == p[i]) {\n                found = 1;\n                freq[j]++;\n                ph++;\n                break;\n            }\n        }\n        if (!found) {\n            int min_index = 0;\n            for (j = 1; j < fc; j++) {\n                if (freq[j] < freq[min_index]) {\n                    min_index = j;\n                }\n            }\n            f[min_index] = p[i];\n            freq[min_index] = 1;\n            pf++;\n        }\n\n        printf(\"Page %d -> Frames: \", p[i]);\n        for (j = 0; j < fc; j++) {\n            if (f[j] == -1) {\n                printf(\"- \");\n            } else {\n                printf(\"%d \", f[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    \n    printf(\"Total page faults: %d\\n\", pf);\n    printf(\"Total hits: %d\\n\", ph);\n    \n    return 0;\n}"
    },
    {
        "id": 148,
        "slip_no": "MRU",
        "question": "MRU Paging Algorithm",
        "language": "c",
        "code": "// MRU (Most Recently Used)\n#include <stdio.h>\n\nint main() {\n    int pc, fc, pf = 0, ph = 0;\n    int i, j, k, found;\n    \n    printf(\"Enter the count of Pages : \");\n    scanf(\"%d\", &pc);\n    int p[pc];\n    \n    printf(\"Enter the page reference string : \");\n    for (i = 0; i < pc; i++) {\n        scanf(\"%d\", &p[i]);\n    }\n    \n    printf(\"Enter Frame count : \");\n    scanf(\"%d\", &fc);\n    int f[fc];\n    \n    for (i = 0; i < fc; i++) {\n        f[i] = -1;\n    }\n    \n    for (i = 0; i < pc; i++) {\n        found = 0;\n        for (j = 0; j < fc; j++) {\n            if (f[j] == p[i]) {\n                found = 1;\n                ph++;\n                break;\n            }\n        }\n        if (!found) {\n            int max_index = 0;\n            for (j = 1; j < fc; j++) {\n                if (f[j] != -1) {\n                    max_index = j;\n                }\n            }\n            f[max_index] = p[i];\n            pf++;\n        }\n\n        printf(\"Page %d -> Frames: \", p[i]);\n        for (j = 0; j < fc; j++) {\n            if (f[j] == -1) {\n                printf(\"- \");\n            } else {\n                printf(\"%d \", f[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    \n    printf(\"Total page faults: %d\\n\", pf);\n    printf(\"Total hits: %d\\n\", ph);\n    \n    return 0;\n}"
    },
    {
        "id": 149,
        "slip_no": "MFU",
        "question": "MFU Paging Algorithm",
        "language": "c",
        "code": "// MFU (Most Frequently Used)\n#include <stdio.h>\n\nint main() {\n    int pc, fc, pf = 0, ph = 0;\n    int i, j, k, found;\n    \n    printf(\"Enter the count of Pages : \");\n    scanf(\"%d\", &pc);\n    int p[pc];\n    \n    printf(\"Enter the page reference string : \");\n    for (i = 0; i < pc; i++) {\n        scanf(\"%d\", &p[i]);\n    }\n    \n    printf(\"Enter Frame count : \");\n    scanf(\"%d\", &fc);\n    int f[fc], freq[fc];\n    \n    for (i = 0; i < fc; i++) {\n        f[i] = -1;\n        freq[i] = 0;\n    }\n    \n    for (i = 0; i < pc; i++) {\n        found = 0;\n        for (j = 0; j < fc; j++) {\n            if (f[j] == p[i]) {\n                found = 1;\n                freq[j]++;\n                ph++;\n                break;\n            }\n        }\n        if (!found) {\n            int max_index = 0;\n            for (j = 1; j < fc; j++) {\n                if (freq[j] > freq[max_index]) {\n                    max_index = j;\n                }\n            }\n            f[max_index] = p[i];\n            freq[max_index] = 1;\n            pf++;\n        }\n\n        printf(\"Page %d -> Frames: \", p[i]);\n        for (j = 0; j < fc; j++) {\n            if (f[j] == -1) {\n                printf(\"- \");\n            } else {\n                printf(\"%d \", f[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    \n    printf(\"Total page faults: %d\\n\", pf);\n    printf(\"Total hits: %d\\n\", ph);\n    \n    return 0;\n}"
    },
    {
        "id": 150,
        "slip_no": "OPT",
        "question": "OPT Paging Algorithm",
        "language": "c",
        "code": "// OPT (Optimal)\n#include <stdio.h>\n\nint main() {\n    int pc, fc, pf = 0;\n    int i, j, k, found;\n    \n    printf(\"Enter the count of Pages : \");\n    scanf(\"%d\", &pc);\n    int p[pc];\n    \n    printf(\"Enter the page reference string : \");\n    for (i = 0; i < pc; i++) {\n        scanf(\"%d\", &p[i]);\n    }\n    \n    printf(\"Enter Frame count : \");\n    scanf(\"%d\", &fc);\n    int f[fc];\n    \n    for (i = 0; i < fc; i++) {\n        f[i] = -1;\n    }\n    \n    for (i = 0; i < pc; i++) {\n        found = 0;\n        for (j = 0; j < fc; j++) {\n            if (f[j] == p[i]) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            int replace_index = -1;\n            for (j = 0; j < fc; j++) {\n                int k;\n                for (k = i + 1; k < pc; k++) {\n                    if (f[j] == p[k]) {\n                        replace_index = j;\n                        break;\n                    }\n                }\n                if (replace_index == -1) {\n                    replace_index = j;\n                    break;\n                }\n            }\n            f[replace_index] = p[i];\n            pf++;\n        }\n\n        printf(\"Page %d -> Frames: \", p[i]);\n        for (j = 0; j < fc; j++) {\n            if (f[j] == -1) {\n                printf(\"- \");\n            } else {\n                printf(\"%d \", f[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    \n    printf(\"Total page faults: %d\\n\", pf);\n    \n    return 0;\n}"
    },
    {
        "id": 151,
        "slip_no": "FCFS",
        "question": "FCFS Scheduling Algorithm",
        "language": "c",
        "code": "#include <stdio.h>\n\nvoid findavgTime(int processes[], int n, int bt[]) {\n    int wt[n], tat[n];\n\n    // Calculate waiting time\n    wt[0] = 0;\n    for (int i = 1; i < n; i++) {\n        wt[i] = bt[i - 1] + wt[i - 1];\n    }\n\n    // Calculate Turn-Around Time\n    for (int i = 0; i < n; i++) {\n        tat[i] = bt[i] + wt[i];\n    }\n\n    printf(\"Process\\tBurst Time\\tWaiting Time\\tTurn-Around Time\\n\");\n    float total_wt = 0, total_tat = 0;\n    for (int i = 0; i < n; i++) {\n        total_wt += wt[i];\n        total_tat += tat[i];\n        printf(\"%d\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\", processes[i], bt[i], wt[i], tat[i]);\n    }\n    printf(\"Average Waiting Time: %.2f\\n\", total_wt / n);\n    printf(\"Average Turn-Around Time: %.2f\\n\", total_tat / n);\n}\n\nint main() {\n    int processes[] = {1, 2, 3};\n    int n = sizeof(processes) / sizeof(processes[0]);\n    int bt[] = {10, 5, 8}; // Burst time for each process\n\n    findavgTime(processes, n, bt);\n    \n    return 0;\n}"
    },
    {
        "id": 152,
        "slip_no": "RR",
        "question": "RR Scheduling Algorithm",
        "language": "c",
        "code": "#include <stdio.h>\n\nvoid findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum) {\n    int remaining_time[n];\n    for (int i = 0; i < n; i++) {\n        remaining_time[i] = bt[i];\n    }\n\n    int t = 0;\n    while (1) {\n        int done = 1;\n        for (int i = 0; i < n; i++) {\n            if (remaining_time[i] > 0) {\n                done = 0;\n                if (remaining_time[i] > quantum) {\n                    t += quantum;\n                    remaining_time[i] -= quantum;\n                } else {\n                    t = t + remaining_time[i];\n                    wt[i] = t - bt[i];\n                    remaining_time[i] = 0;\n                }\n            }\n        }\n        if (done == 1) break;\n    }\n}\n\nvoid findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {\n    for (int i = 0; i < n; i++) {\n        tat[i] = bt[i] + wt[i];\n    }\n}\n\nvoid findavgTime(int processes[], int n, int bt[], int quantum) {\n    int wt[n], tat[n];\n\n    findWaitingTime(processes, n, bt, wt, quantum);\n    findTurnAroundTime(processes, n, bt, wt, tat);\n\n    printf(\"Process\\tBurst Time\\tWaiting Time\\tTurn-Around Time\\n\");\n    float total_wt = 0, total_tat = 0;\n    for (int i = 0; i < n; i++) {\n        total_wt += wt[i];\n        total_tat += tat[i];\n        printf(\"%d\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\", processes[i], bt[i], wt[i], tat[i]);\n    }\n    printf(\"Average Waiting Time: %.2f\\n\", total_wt / n);\n    printf(\"Average Turn-Around Time: %.2f\\n\", total_tat / n);\n}\n\nint main() {\n    int processes[] = {1, 2, 3};\n    int n = sizeof(processes) / sizeof(processes[0]);\n    int bt[] = {10, 5, 8}; // Burst time for each process\n    int quantum = 2; // Time quantum\n\n    findavgTime(processes, n, bt, quantum);\n    \n    return 0;\n}"
    },
    {
        "id": 153,
        "slip_no": "SJF Non Preemptive",
        "question": "SJF Scheduling Algorithm (Non-Preemptive)",
        "language": "c",
        "code": "#include <stdio.h>\n\nvoid findavgTime(int processes[], int n, int bt[]) {\n    int wt[n], tat[n];\n\n    // Calculate waiting time\n    wt[0] = 0;\n    for (int i = 1; i < n; i++) {\n        wt[i] = bt[i - 1] + wt[i - 1];\n    }\n\n    // Calculate Turn-Around Time\n    for (int i = 0; i < n; i++) {\n        tat[i] = bt[i] + wt[i];\n    }\n\n    printf(\"Process\\tBurst Time\\tWaiting Time\\tTurn-Around Time\\n\");\n    float total_wt = 0, total_tat = 0;\n    for (int i = 0; i < n; i++) {\n        total_wt += wt[i];\n        total_tat += tat[i];\n        printf(\"%d\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\", processes[i], bt[i], wt[i], tat[i]);\n    }\n    printf(\"Average Waiting Time: %.2f\\n\", total_wt / n);\n    printf(\"Average Turn-Around Time: %.2f\\n\", total_tat / n);\n}\n\nint main() {\n    int processes[] = {1, 2, 3};\n    int n = sizeof(processes) / sizeof(processes[0]);\n    int bt[] = {6, 8, 7}; // Burst time for each process\n\n    findavgTime(processes, n, bt);\n    \n    return 0;\n}"
    },
    {
        "id": 154,
        "slip_no": "SJF Preemptive",
        "question": "SJF Scheduling Algorithm (Preemptive)",
        "language": "c",
        "code": "#include <stdio.h>\n#include <limits.h>\n\nvoid findWaitingTime(int processes[], int n, int bt[], int wt[]) {\n    int remaining_time[n];\n    for (int i = 0; i < n; i++) {\n        remaining_time[i] = bt[i];\n    }\n\n    int t = 0;\n    while (1) {\n        int done = 1;\n        int shortest = INT_MAX;\n        int index = -1;\n\n        for (int i = 0; i < n; i++) {\n            if (remaining_time[i] > 0) {\n                done = 0;\n                if (remaining_time[i] < shortest) {\n                    shortest = remaining_time[i];\n                    index = i;\n                }\n            }\n        }\n\n        if (done) break;\n        remaining_time[index]--;\n        t++;\n        if (remaining_time[index] == 0) {\n            wt[index] = t - bt[index];\n        }\n    }\n}\n\nvoid findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {\n    for (int i = 0; i < n; i++) {\n        tat[i] = bt[i] + wt[i];\n    }\n}\n\nvoid findavgTime(int processes[], int n, int bt[]) {\n    int wt[n], tat[n];\n\n    findWaitingTime(processes, n, bt, wt);\n    findTurnAroundTime(processes, n, bt, wt, tat);\n\n    printf(\"Process\\tBurst Time\\tWaiting Time\\tTurn-Around Time\\n\");\n    float total_wt = 0, total_tat = 0;\n    for (int i = 0; i < n; i++) {\n        total_wt += wt[i];\n        total_tat += tat[i];\n        printf(\"%d\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\", processes[i], bt[i], wt[i], tat[i]);\n    }\n    printf(\"Average Waiting Time: %.2f\\n\", total_wt / n);\n    printf(\"Average Turn-Around Time: %.2f\\n\", total_tat / n);\n}\n\nint main() {\n    int processes[] = {1, 2, 3};\n    int n = sizeof(processes) / sizeof(processes[0]);\n    int bt[] = {6, 8, 7}; // Burst time for each process\n\n    findavgTime(processes, n, bt);\n    \n    return 0;\n}"
    },
    {
        "id": 155,
        "slip_no": "Priority Non Preemptive",
        "question": "Priority Scheduling Algorithm (Non-Preemptive)",
        "language": "c",
        "code": "#include <stdio.h>\n\nvoid findavgTime(int processes[], int n, int bt[], int pr[]) {\n    int wt[n], tat[n];\n\n    // Calculate waiting time\n    wt[0] = 0;\n    for (int i = 1; i < n; i++) {\n        wt[i] = bt[i - 1] + wt[i - 1];\n    }\n\n    // Calculate Turn-Around Time\n    for (int i = 0; i < n; i++) {\n        tat[i] = bt[i] + wt[i];\n    }\n\n    printf(\"Process\\tBurst Time\\tWaiting Time\\tTurn-Around Time\\n\");\n    float total_wt = 0, total_tat = 0;\n    for (int i = 0; i < n; i++) {\n        total_wt += wt[i];\n        total_tat += tat[i];\n        printf(\"%d\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\", processes[i], bt[i], wt[i], tat[i]);\n    }\n    printf(\"Average Waiting Time: %.2f\\n\", total_wt / n);\n    printf(\"Average Turn-Around Time: %.2f\\n\", total_tat / n);\n}\n\nint main() {\n    int processes[] = {1, 2, 3};\n    int n = sizeof(processes) / sizeof(processes[0]);\n    int bt[] = {10, 5, 8}; // Burst time for each process\n    int pr[] = {2, 1, 3}; // Priority for each process\n\n    findavgTime(processes, n, bt, pr);\n    \n    return 0;\n}"
    },
    {
        "id": 156,
        "slip_no": "Priority Preemptive",
        "question": "Priority Scheduling Algorithm (Preemptive)",
        "language": "c",
        "code": "#include <stdio.h>\n\nvoid findWaitingTime(int processes[], int n, int bt[], int wt[], int pr[]) {\n    int remaining_time[n];\n    for (int i = 0; i < n; i++) {\n        remaining_time[i] = bt[i];\n    }\n\n    int t = 0;\n    while (1) {\n        int done = 1;\n        for (int i = 0; i < n; i++) {\n            if (remaining_time[i] > 0) {\n                done = 0;\n                if (remaining_time[i] > 1) {\n                    remaining_time[i]--;\n                    t++;\n                } else {\n                    t += remaining_time[i];\n                    wt[i] = t - bt[i];\n                    remaining_time[i] = 0;\n                }\n            }\n        }\n        if (done == 1) break;\n    }\n}\n\nvoid findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {\n    for (int i = 0; i < n; i++) {\n        tat[i] = bt[i] + wt[i];\n    }\n}\n\nvoid findavgTime(int processes[], int n, int bt[], int pr[]) {\n    int wt[n], tat[n];\n\n    findWaitingTime(processes, n, bt, wt, pr);\n    findTurnAroundTime(processes, n, bt, wt, tat);\n\n    printf(\"Process\\tBurst Time\\tWaiting Time\\tTurn-Around Time\\n\");\n    float total_wt = 0, total_tat = 0;\n    for (int i = 0; i < n; i++) {\n        total_wt += wt[i];\n        total_tat += tat[i];\n        printf(\"%d\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\", processes[i], bt[i], wt[i], tat[i]);\n    }\n    printf(\"Average Waiting Time: %.2f\\n\", total_wt / n);\n    printf(\"Average Turn-Around Time: %.2f\\n\", total_tat / n);\n}\n\nint main() {\n    int processes[] = {1, 2, 3};\n    int n = sizeof(processes) / sizeof(processes[0]);\n    int bt[] = {10, 5, 8}; // Burst time for each process\n    int pr[] = {2, 1, 3}; // Priority for each process\n\n    findavgTime(processes, n, bt, pr);\n    \n    return 0;\n}"
    }
]
