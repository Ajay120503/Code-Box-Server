[
    {
        "id": 1,
        "slip_no": "",
        "language": "c",
        "question": "Banker's Algorithm",
        "code": "#include <stdio.h>\n\nint main(void) {\n    int r, p, i, j, done = 0;\n    printf(\"Enter number of resources: \");\n    scanf(\"%d\", &r);\n    int total[r], avail[r];\n    for(i = 0; i < r; i++) {\n        printf(\"Total instances for resource %c: \", 'A' + i);\n        scanf(\"%d\", &total[i]);\n        avail[i] = total[i];  // initialize available resources\n    }\n    printf(\"Enter number of processes: \");\n    scanf(\"%d\", &p);\n    int alloc[p][r], max[p][r], need[p][r], finish[p], safe[p];\n    for(i = 0; i < p; i++)\n        finish[i] = 0;\n    \n    // Input allocation matrix and update available resources\n    for(i = 0; i < p; i++) {\n        printf(\"Enter allocation for P[%d]:\\n\", i);\n        for(j = 0; j < r; j++) {\n            scanf(\"%d\", &alloc[i][j]);\n            avail[j] -= alloc[i][j];\n        }\n    }\n    \n    // Input maximum demand and compute need matrix\n    for(i = 0; i < p; i++) {\n        printf(\"Enter max demand for P[%d]:\\n\", i);\n        for(j = 0; j < r; j++) {\n            scanf(\"%d\", &max[i][j]);\n            need[i][j] = max[i][j] - alloc[i][j];\n        }\n    }\n    \n    // Find safe sequence\n    while(done < p) {\n        int progress = 0;\n        for(i = 0; i < p; i++) {\n            if(!finish[i]) {\n                int canRun = 1;\n                for(j = 0; j < r; j++) {\n                    if(need[i][j] > avail[j]) {\n                        canRun = 0;\n                        break;\n                    }\n                }\n                if(canRun) {\n                    safe[done++] = i;\n                    finish[i] = 1;\n                    for(j = 0; j < r; j++)\n                        avail[j] += alloc[i][j];\n                    progress = 1;\n                }\n            }\n        }\n        if(!progress) break; // no process could be allocated resources\n    }\n    \n    // Output result\n    if(done == p) {\n        printf(\"Safe sequence: \");\n        for(i = 0; i < p; i++)\n            printf(\"P[%d] \", safe[i]);\n        printf(\"\\n\");\n    } else {\n        printf(\"System is not in a safe state.\\n\");\n    }\n    return 0;\n}\n"
    }
]
